<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>afronski.pl</title>
    <description>Random thoughts from top of my head - afronski.pl</description>
    <link>http://www.afronski.pl</link>
    <atom:link href="http://www.afronski.pl/feed.xml" rel="self" type="application/rss+xml" />
    
      <item>
        <title>Interesting Language Features - Erlang I</title>
        <description>&lt;h1 id=&quot;interesting-language-features---erlang-i&quot;&gt;Interesting Language Features - Erlang I&lt;/h1&gt;

&lt;quote class=&quot;disclaimer&quot;&gt;This blog post is a starting point of a series which contains examples, explanations and details about interesting features of various programming languages. I have collected several examples of different characteristics, which definitely extended my view regarding programming, architecture and structure in general. I would love to hear your feedback about presented choices or description of yours favorite programming language feature.&lt;/quote&gt;

&lt;h3 id=&quot;introduction&quot;&gt;Introduction&lt;/h3&gt;

&lt;p&gt;Almost every programmer struggled in the past with the unclear and non-obvious code, probably written yesterday or even earlier. That feeling is often amplified by the actual mental state (e.g. you are angry, not rested or upset - if you don’t know how it affects you, I encourage you to get familiar with &lt;a href=&quot;http://www.afronski.pl/2015/03/07/books-that-changed-my-career-pragmatic-thinking-and-learning.html&quot;&gt;this book and blog post&lt;/a&gt;). If you will run onto some unclear and ugly written code sample, which yesterday was perfectly clear, your attitude may only be worse. It can escalate, if such code was written by someone else from your team.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Software Craftsmanship&lt;/em&gt; movement and Uncle Bob’s books (especially &lt;a href=&quot;http://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882/&quot;&gt;Clean Code&lt;/a&gt; and &lt;a href=&quot;http://www.amazon.com/Clean-Coder-Conduct-Professional-Programmers/dp/0137081073/&quot;&gt;Clean Coder&lt;/a&gt;) are trying to improve that state, but most of mainstream programming languages did not encourage developers to write something clear and obvious at the first sight. Often context is hidden inside pile of code. Somewhere underneath unnecessary abstraction you can find the essence of that particular slice. Not to mention stateful programming languages, where often state is passed between following methods (or functions) inexplicitly.&lt;/p&gt;

&lt;p&gt;Very long, tangled, imperative flow control can bury the code conciseness and clarity very easily (yes, I am talking about &lt;code&gt;if-else&lt;/code&gt; and &lt;code&gt;switch-case&lt;/code&gt; statements). If I had a dime for every time I lost track somewhere in the thicket of flow control statements, I could easily retire and write for a rest of my life &lt;em&gt;Haskell&lt;/em&gt; for fun. But I would like to present very clear alternative, present in almost any modern programming language, especially in the functional ones.&lt;/p&gt;

&lt;h3 id=&quot;pattern-matching&quot;&gt;Pattern Matching&lt;/h3&gt;

&lt;p&gt;Instead of codifying rules imperatively, try to think about rules in a declarative way instead. I would like to focus on &lt;em&gt;Erlang&lt;/em&gt; syntax right now, but still this concept can be represented in any functional programming language.&lt;/p&gt;

&lt;p&gt;All examples of source code are gathered from the &lt;em&gt;CouchDB&lt;/em&gt; project (very nice &lt;em&gt;key-value&lt;/em&gt; storage with &lt;em&gt;JSON&lt;/em&gt; documents stored as value, that &lt;em&gt;embraces the web&lt;/em&gt;, written in &lt;em&gt;Erlang&lt;/em&gt;). You can find link to the exact file in the &lt;a href=&quot;#credits&quot;&gt;Credits&lt;/a&gt; section:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-erlang&quot; data-lang=&quot;erlang&quot;&gt;&lt;span class=&quot;lineno&quot;&gt; 1&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;% Is character a whitespace?&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 2&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;%&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 3&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;% Syntax $\s means a character&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 4&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;% represented as with escape sequence.&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 5&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;%&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 6&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;% Equal to the &amp;#39;\s&amp;#39; in C-like syntax.&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 7&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt; 8&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;is_whitespace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;$\s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 9&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;is_whitespace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;$\t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;is_whitespace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;$\n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;11&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;is_whitespace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;$\r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;12&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;is_whitespace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(_&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You can see that we declared several cases what our function should return under certain input conditions. It looks like a function with multiple heads, each with different inputs, treated as a single case. All rules are checked in the declaration order, last one is a &lt;em&gt;catch-all&lt;/em&gt; clause. As you can see, this function is very simple, but it is a good starting point to get familiar with the construct.&lt;/p&gt;

&lt;p&gt;We can push it even further. Imagine that you can differentiate behavior and execution flow in such declarative way - lets see how we can do that.&lt;/p&gt;

&lt;h3 id=&quot;named_case_expressions&quot;&gt;&lt;i&gt;Named Case Expressions&lt;/i&gt;&lt;/h3&gt;

&lt;p&gt;Of course in &lt;em&gt;Erlang&lt;/em&gt; and other languages there are &lt;em&gt;if&lt;/em&gt; and &lt;em&gt;case&lt;/em&gt; expressions (there is a significant difference between statement and expression, but that is another topic) and you can wrote your code in classical way:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-erlang&quot; data-lang=&quot;erlang&quot;&gt;&lt;span class=&quot;lineno&quot;&gt; 1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;before&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;export&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dict_find&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]).&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 3&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt; 4&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;dict_find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;DefaultValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 5&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 6&lt;/span&gt;     &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 7&lt;/span&gt;         &lt;span class=&quot;nv&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 8&lt;/span&gt;     &lt;span class=&quot;p&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 9&lt;/span&gt;         &lt;span class=&quot;nv&quot;&gt;DefaultValue&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;10&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It is still a pattern matching - we are matching against a &lt;em&gt;tagged tuple&lt;/em&gt; with &lt;code&gt;ok&lt;/code&gt; atom at the first place, we have &lt;em&gt;catch-all&lt;/em&gt; clause. But we can definitely do it better, in more &lt;em&gt;Erlangish&lt;/em&gt; way. After a small refactoring code will look like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-erlang&quot; data-lang=&quot;erlang&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;after&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;export&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dict_find&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]).&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;3&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getValueOrDefault&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;_)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getValueOrDefault&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(_,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;6&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt;7&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;dict_find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;DefaultValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;8&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;getValueOrDefault&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;DefaultValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Lets look what happened here in details. We have changed the case expression into a function with clear name, that has two arguments - first is a result of &lt;code&gt;dict:find&lt;/code&gt; and second is a default value. Then with pattern matching we are dispatching the execution flow - in our case we are returning a proper value (with extraction from a &lt;em&gt;tagged tuple&lt;/em&gt;), but you can easily imagine that another function calls can be easily introduced here. We transformed &lt;em&gt;case&lt;/em&gt; expression (a syntactical construct) to the &lt;em&gt;named&lt;/em&gt; representation (a logical construct).&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Why it is better?&lt;/em&gt; I hope that you can see that it is clearer at the first sight. Matching rules are stored in a declarative way, we have less syntactical noise and the most important thing - &lt;em&gt;it has a name&lt;/em&gt;. That is the reason from where name of this &lt;em&gt;pattern&lt;/em&gt; came from - &lt;em&gt;named case expressions&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;But what about performance? Would not it be slower, because additional functions introduced here? We can check it easily, by digging deeper into &lt;em&gt;Erlang VM&lt;/em&gt; internals.&lt;/p&gt;

&lt;h3 id=&quot;internal-representation-core-erlang&quot;&gt;Internal representation (&lt;em&gt;Core Erlang&lt;/em&gt;)&lt;/h3&gt;

&lt;p&gt;Before we will take a peek under the hood, we need to briefly explain the structure of the &lt;em&gt;Erlang&lt;/em&gt; compiler. Before the &lt;em&gt;Erlang&lt;/em&gt; gets interpreted on the VM it is transformed to the &lt;em&gt;Core Erlang&lt;/em&gt; representation and after that to the &lt;em&gt;BEAM&lt;/em&gt; code (which is a equivalent of &lt;em&gt;bytecode&lt;/em&gt; from &lt;em&gt;JVM&lt;/em&gt;). It turns out that our &lt;em&gt;named case expressions&lt;/em&gt; (functions with multiple heads and pattern matching, a logical construct) are directly transformed to the syntactical construct - &lt;em&gt;case&lt;/em&gt; expression - in the first phase of compilation.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-erlang&quot; data-lang=&quot;erlang&quot;&gt;&lt;span class=&quot;lineno&quot;&gt; 1&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;% Function &amp;#39;getValueOrDefault&amp;#39; after compilation&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 2&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;% to the Core Erlang representation, which will be&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 3&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;% afterwards compiled to the BEAM code:&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 4&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt; 5&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;&amp;#39;getValueOrDefault&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 6&lt;/span&gt;     &lt;span class=&quot;c&quot;&gt;%% Line 4&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 7&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(_&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cor1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,_&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cor0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 8&lt;/span&gt; 	&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cor1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,_&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cor0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 9&lt;/span&gt; 	  &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;&amp;#39;ok&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},_&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cor4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;&amp;#39;true&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;10&lt;/span&gt; 	      &lt;span class=&quot;nv&quot;&gt;Value&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;11&lt;/span&gt; 	  &lt;span class=&quot;c&quot;&gt;%% Line 5&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;12&lt;/span&gt; 	  &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cor5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Default&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;&amp;#39;true&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;13&lt;/span&gt; 	      &lt;span class=&quot;nv&quot;&gt;Default&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;14&lt;/span&gt; 	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As you may see, &lt;em&gt;multi-head function clauses&lt;/em&gt; are anyway compiled to the &lt;em&gt;case&lt;/em&gt; expression, so argument about lost performance or additional overhead introduced by this abstraction is simply invalid - there is no such overhead, we can use it without any doubts (in most cases such objections are simply the &lt;a href=&quot;http://en.wikipedia.org/wiki/Program_optimization&quot;&gt;premature optimization&lt;/a&gt; anyway).&lt;/p&gt;

&lt;p&gt;How we took a peek under the hood? It is simple, you can start new &lt;em&gt;Erlang&lt;/em&gt; shell and then execute:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-erlang&quot; data-lang=&quot;erlang&quot;&gt;&lt;span class=&quot;c&quot;&gt;% Compiler will spit out the&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;% Core Erlang representation&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;% to the &amp;#39;after.core&amp;#39; file.&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;after&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to_core&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;summary&quot;&gt;Summary&lt;/h3&gt;

&lt;p&gt;Clear, concise and obvious code should be our goal from the beginning. It is easy to forget about it in the daily routine or rush caused by deadlines. It is a really small investment put upfront (even if it is bigger at the beginning, cost will definitely lower as time passes and we are gaining experience). It eases the debugging and &lt;em&gt;context reload&lt;/em&gt; time. We should strive to simplicity, because &lt;em&gt;simple is better&lt;/em&gt; - and it is worth knowing these tricks that can help you with pursuit to the final goal.&lt;/p&gt;

&lt;h3 id=&quot;credits&quot;&gt;Credits&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=UuHMaeO1k-E&quot;&gt;Garrett Smith, &lt;em&gt;Social Code&lt;/em&gt; (Code Mesh 2014)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/apache/couchdb-couch/blob/master/src/couch_util.erl&quot;&gt;CouchDB - &lt;em&gt;couch_util.erl&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Tue, 10 Mar 2015 16:00:00 +0000</pubDate>
        <link>http://www.afronski.pl/2015/03/10/interesting-language-features-erlang-named-case-expressions.html</link>
        <guid isPermaLink="true">http://www.afronski.pl/2015/03/10/interesting-language-features-erlang-named-case-expressions.html</guid>
      </item>
    
      <item>
        <title>Books that changed my career - Pragmatic Thinking and Learning</title>
        <description>&lt;h1 id=&quot;books-that-changed-my-career---pragmatic-thinking-and-learning&quot;&gt;Books that changed my career - Pragmatic Thinking and Learning&lt;/h1&gt;

&lt;quote class=&quot;disclaimer&quot;&gt;This blog post is the second in the series which contains the most influential books that I have read in my programming career. This is my private ranking, each post contains a good dose of my private opinions (you have been warned &lt;img class=&quot;emoji&quot; title=&quot;:wink:&quot; alt=&quot;:wink:&quot; src=&quot;https://assets.github.com/images/icons/emoji/unicode/1f609.png&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; /&gt;), but besides that I hope that you will find it valuable.&lt;/quote&gt;

&lt;h3 id=&quot;introduction&quot;&gt;Introduction&lt;/h3&gt;

&lt;p&gt;Programming and designing is very thankful activity, when everything snaps and clicks together (programmers call this state &lt;em&gt;flow&lt;/em&gt;). Nevertheless, it can be extremely frustrating as well, especially when you try to solve something really difficult, or you are overloaded with work, maybe personal issues. Sometimes the same hard problem will be solved in a day, sometimes it will take couple of weeks instead (and I am assuming doing it in both cases from scratch and for the first time).&lt;/p&gt;

&lt;p&gt;But some people seem to be more effective than others at first sight. Like they do not have &lt;em&gt;bad days&lt;/em&gt; at all. This can be observed especially in larger teams, for longer periods of time - when you can work with multiple colleagues several times, where each activity is separated by a few weeks. I am not a huge fan of &lt;a href=&quot;http://en.wikipedia.org/wiki/Biorhythm&quot;&gt;biorythm&lt;/a&gt; pseudoscience, so there must be a different explanation.&lt;/p&gt;

&lt;p&gt;In most cases they have got &lt;em&gt;very good habits&lt;/em&gt; or &lt;em&gt;huge self-awareness&lt;/em&gt;. This sounds almost like an obvious statement, but actually it is not so simple to bring it to your daily working environment. We are learning all the time (and someone who stops learning as an active programmer, while acting like an expert, has treated himself with &lt;quote&gt;&lt;i&gt;the professional kiss of death&lt;/i&gt;&lt;/quote&gt;) and it could be useful to know all science and these little tricks which will ease and improve the whole process.&lt;/p&gt;

&lt;p&gt;Fortunately, someone has collected many of good techniques and advice in a book, with an addition of the science (&lt;em&gt;neuroscience&lt;/em&gt;, &lt;em&gt;psychology&lt;/em&gt; and &lt;em&gt;cognitive science&lt;/em&gt;) necessary to explain everything in greater detail.&lt;/p&gt;

&lt;h3 class=&quot;center&quot;&gt;&lt;em&gt;Pragmatic Thinking and Learning: Refactor Your Wetware&lt;/em&gt;&lt;/h3&gt;

&lt;p&gt;&lt;img alt=&quot;Programming Thinking and Learning&quot; src=&quot;/assets/PragmaticThinkingAndLearning.jpg&quot; class=&quot;book&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;why-this-book&quot;&gt;Why this book?&lt;/h4&gt;

&lt;p&gt;It is not a surprise that this person is &lt;em&gt;Andy Hunt&lt;/em&gt;, one of &lt;em&gt;pragmatic programmers&lt;/em&gt;. The first thing that (I hope &lt;img class=&quot;emoji&quot; title=&quot;:wink:&quot; alt=&quot;:wink:&quot; src=&quot;https://assets.github.com/images/icons/emoji/unicode/1f609.png&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; /&gt;) caught your attention is a &lt;em&gt;subtitle&lt;/em&gt;. It has a subtle pun - the word &lt;a href=&quot;http://en.wikipedia.org/wiki/Wetware_(brain)&quot;&gt;&lt;em&gt;wetware&lt;/em&gt;&lt;/a&gt;. I encourage you to dig deeper into the meaning of this word, because it is crucial to rewire your thinking to a proper attitude, necessary to work with this book effectively.&lt;/p&gt;

&lt;p&gt;The book is structured in a very deliberate way, we are starting with definitions and theoretical introduction to the learning process (&lt;em&gt;Dreyfus Skill Acquisition&lt;/em&gt; model). Then we are digging deeper into mechanisms that are working inside our brains, with a small dose of inevitable theory. After knowing how your brain works &lt;em&gt;inside out&lt;/em&gt;, we are ready to rewire and refactor our &lt;em&gt;wetware&lt;/em&gt; - we will try to overcome our primal instincts (&lt;quote&gt;&lt;i&gt;I am the evolved one&lt;/i&gt;&lt;/quote&gt;), we will try to learn deliberately, work in a focused manner. At the end author introduces the key concepts how be an expert, but still be a passionate and eager to learn even more. If you met &lt;em&gt;Dreyfus Model&lt;/em&gt; before, the whole structure will look similar for you.&lt;/p&gt;

&lt;p&gt;Besides science, the book also introduces many well-known and verified methods like &lt;em&gt;GTD&lt;/em&gt; (&lt;a href=&quot;http://en.wikipedia.org/wiki/Getting_Things_Done&quot;&gt;Getting Things Done&lt;/a&gt;), positive psychology or techniques known from &lt;em&gt;Agile&lt;/em&gt; or &lt;em&gt;eXtreme Programming&lt;/em&gt;. Even referrals to the classical &lt;em&gt;Pragmatic Programmer&lt;/em&gt; book are used in a proper context (e.g. &lt;em&gt;rubber duck debugging&lt;/em&gt; or &lt;em&gt;boiling frog&lt;/em&gt; explanation).&lt;/p&gt;

&lt;p&gt;As engineers, we are rather skeptical in terms of emotions, instincts and psychology. This cannot be described, evaluated and verified with any mathematical or physical model that we know. It looks to us as &lt;em&gt;voodoo&lt;/em&gt;, a kind of black magic which involves too many irrational things at once. But this book is different, the major advantage is that is written in a &lt;em&gt;geek&lt;/em&gt; language for geeks, by a &lt;em&gt;computer geek&lt;/em&gt;. And moreover you will experience only fully scientific explanations to the certain behaviors (supported by real studies, everything referenced in book contents or annotations). Even the chapter describing &lt;em&gt;meditation&lt;/em&gt; techniques, which at the first sight definitely is not supported by any science, has some reasonable explanations based on research related to &lt;em&gt;breathing techniques&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Obviously, many of these techniques are not a silver bullet for everyone, but I strongly suggest at least trying them. Do not rush through the book, even the author encourages slower reading and thinking about the chapter currently being read (and he does it by introducing small exercises which require e.g. walking or drawing &lt;img class=&quot;emoji&quot; title=&quot;:wink:&quot; alt=&quot;:wink:&quot; src=&quot;https://assets.github.com/images/icons/emoji/unicode/1f609.png&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; /&gt;). If you feel that a certain technique is not for you, it is fine - &lt;em&gt;learn&lt;/em&gt;, &lt;em&gt;think&lt;/em&gt; and &lt;em&gt;adapt&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;For me the most important and &lt;em&gt;eye opening&lt;/em&gt; techniques are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;i&gt;Learning and experiencing with all senses&lt;/i&gt; - I was a huge believer in the theory that people learn with some senses better, which turns out not to be true. You should learn and experience using as many senses and techniques as you can (it enables more areas in your brain). Try to scribble and listen during meetings, try acting, role play during planning - it brings new solutions and creative ways to the table.&lt;/li&gt;
  &lt;li&gt;&lt;i&gt;Deliberate scribbling&lt;/i&gt; - I have done this in the past, but I have stopped (because I thought that noting everything digitally will much better). That was a wrong move - you can see above why, but that’s the immediate thing that brings value after doing it one or two times. I just feel more focused and I can see visually the actual problem and solution in my head. I will never stop doing that again.&lt;/li&gt;
  &lt;li&gt;&lt;i&gt;Morning Text Dump&lt;/i&gt; - Another &lt;em&gt;eye opening&lt;/em&gt; technique. It may sounds funny at the beginning, but the first thing you should do after waking up is not a coffee, but a morning text dump. You should literally write 2-3 pages of text, just after out of the bed - the things that you actually remember. After couple of days you will be able to &lt;em&gt;dump&lt;/em&gt; almost anything that is in the back of your head (processed by the &lt;em&gt;rich mode&lt;/em&gt; of your brain).&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Myers%E2%80%93Briggs_Type_Indicator&quot;&gt;&lt;i&gt;Myers-Briggs Type Indicator&lt;/i&gt;&lt;/a&gt; - I strongly recommend to read about this and take a test. Results can be ground breaking for you, but even if they will acknowledge what you already know, the original test has some advice and explanations why with type of your personality some things can be hard.&lt;/li&gt;
  &lt;li&gt;&lt;i&gt;Lizard Brain&lt;/i&gt; - Very important knowledge, especially if you are a very &lt;em&gt;impulsive&lt;/em&gt; and &lt;em&gt;judging&lt;/em&gt; type. It is the root cause of almost all problems related to subconscious, compulsive behaviors that you may express, especially if you are dealing with huge stress or deadlines.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Oblique_Strategies&quot;&gt;&lt;i&gt;Oblique Statements&lt;/i&gt;&lt;/a&gt; - For me that was the strangest one, but I gave it a try and the results also amazed me. I suggest you to try it by yourself, it is astonishing to see what your brain can deduce, in your actual context from, at the very first sight, words cluster (because they sound and look like this sometimes &lt;img class=&quot;emoji&quot; title=&quot;:stuck_out_tongue:&quot; alt=&quot;:stuck_out_tongue:&quot; src=&quot;https://assets.github.com/images/icons/emoji/unicode/1f61b.png&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; /&gt;).&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;whats-next&quot;&gt;What’s next?&lt;/h3&gt;

&lt;p&gt;I am aware that I have started this series with less obvious positions in the programmer’s library. For the next review, I would like to shift a little bit - to the more standard and established books. This is a classical one, again from the &lt;em&gt;Pragmatic Programmers&lt;/em&gt; sign. I have three copies of this book: in English (as an &lt;em&gt;ebook&lt;/em&gt;), in Polish (again, as an ebook), but the most valuable for me is the printed Polish version, which I have received from my friend, with an inscription. Stay tuned! &lt;img class=&quot;emoji&quot; title=&quot;:wink:&quot; alt=&quot;:wink:&quot; src=&quot;https://assets.github.com/images/icons/emoji/unicode/1f609.png&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;credits&quot;&gt;Credits&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://pragprog.com/book/ahptl/pragmatic-thinking-and-learning&quot;&gt;Pragmatic Thinking and Learning, The Pragmatic Bookshelf&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sat, 07 Mar 2015 16:00:00 +0000</pubDate>
        <link>http://www.afronski.pl/2015/03/07/books-that-changed-my-career-pragmatic-thinking-and-learning.html</link>
        <guid isPermaLink="true">http://www.afronski.pl/2015/03/07/books-that-changed-my-career-pragmatic-thinking-and-learning.html</guid>
      </item>
    
      <item>
        <title>Books that changed my career - Introduction</title>
        <description>&lt;h1 id=&quot;books-that-changed-my-career---introduction&quot;&gt;Books that changed my career - Introduction&lt;/h1&gt;

&lt;quote class=&quot;disclaimer&quot;&gt;This blog post is a starting point of a series which contains the most influential books that I have read in my programming career. This is my private ranking, each post will contain a good dose of my private opinions (you have been warned &lt;img class=&quot;emoji&quot; title=&quot;:wink:&quot; alt=&quot;:wink:&quot; src=&quot;https://assets.github.com/images/icons/emoji/unicode/1f609.png&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; /&gt;), but besides that I hope that you will find it valuable.&lt;/quote&gt;

&lt;h3 id=&quot;introduction&quot;&gt;Introduction&lt;/h3&gt;

&lt;p&gt;If you are a programmer and you like your profession, it is very likely that you are reading a lot of technical books. There are plenty of them on the market - related to craftsmanship, oriented fully around technology, patterns or methodologies and more. Besides practicing in your spare time - reading is probably the most important way of learning new stuff.&lt;/p&gt;

&lt;p&gt;I read a lot of books, what is even more important - my reading queue is growing faster than my reading abilities - and what I found after a while is that merely only a couple of them can be marked as a highly influential on my career. It is not only related to the frequency with which I am returning to it - there are some books which I find really valuable, but I have read it only once. So, what makes a book &lt;em&gt;good&lt;/em&gt;?&lt;/p&gt;

&lt;p&gt;Before we define that set of features, I would like to divert a bit - &lt;strong&gt;learning is hard&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/LearningIsHard.jpg&quot; alt=&quot;Learning is hard&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This is true especially if you are doing it in isolation (this is directly related with reading a book - you can do it within a book club, but still - it can uncomfortable or not enjoyable for someone). There is a very important concept related to learning new skill, when you are selecting a task which is only just slightly more difficult than your regular task, but still doable - it is the &lt;em&gt;sweet spot&lt;/em&gt; where you can learn in the most effective way by yourself (learning in group is fundamentally different).&lt;/p&gt;

&lt;p&gt;What I have observed relates to that &lt;em&gt;sweet spot&lt;/em&gt; - books which I grouped in my private &lt;em&gt;the best of&lt;/em&gt; list are related to that &lt;em&gt;concept&lt;/em&gt; &lt;strong&gt;and&lt;/strong&gt; with a particular &lt;em&gt;time&lt;/em&gt; when I read it. That is why this list is perfectly viable for me, and can be irritating for you - especially if we are on the different level of skill acquisition for the particular set of features, covered in the described publication.&lt;/p&gt;

&lt;p&gt;Today I would like to start with a very interesting book, but at the first sight it looks just like a classic example of &lt;i&gt;XYZ for dummies&lt;/i&gt; guidebook. Such omission can result that you can miss a very good publication.&lt;/p&gt;

&lt;h3 class=&quot;center&quot;&gt;&lt;em&gt;Seven Languages in Seven Weeks&lt;/em&gt;&lt;/h3&gt;

&lt;p&gt;&lt;img alt=&quot;Seven Languages in Seven Weeks&quot; src=&quot;/assets/SevenLanguagesInSevenWeeks.jpg&quot; class=&quot;book&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;why-this-book&quot;&gt;Why this book?&lt;/h4&gt;

&lt;p&gt;We live in interesting times - &lt;a href=&quot;http://www.wsj.com/articles/SB10001424053111903480904576512250915629460&quot;&gt;software is eating world&lt;/a&gt;, now even more than in the 2011. Being a &lt;em&gt;software engineer&lt;/em&gt; means that you have to &lt;em&gt;solve various business problems&lt;/em&gt;. The more advanced topics you grab, the more complex problems appear. Up to some point, using a well-known &lt;em&gt;hammer&lt;/em&gt; is a very pragmatic and good choice.&lt;/p&gt;

&lt;p&gt;But someday you will hit a wall. You will see that it is not enough to know just one technology or one programming language well in order to solve these problems. This is especially true when you are building a distributed system, which should handle significant traffic and at the same time solve a complicated business case. In such environment you need to adapt - improve your skills by continuous learning.&lt;/p&gt;

&lt;p&gt;There is another term, highly connected with the aforementioned concept, called &lt;em&gt;polyglot programming&lt;/em&gt; (coined by Neal Ford). It does not mean that you should put every single language into your project, but rather that you should try to enhance your perspective, skills, try to think in a different way, build and interact with completely new ideas. That experience will influence your existing capabilities, it will create new pathways inside your brain and it may open your senses to the new patterns. Obviously, it requires &lt;em&gt;curiosity&lt;/em&gt;, &lt;em&gt;small dose of courage&lt;/em&gt; and &lt;em&gt;humility&lt;/em&gt; (because nobody likes to feel stupid and this is inevitable at the beginning).&lt;/p&gt;

&lt;p&gt;I found this book (polish edition) in the middle of 2012. At that time I was mostly a web and front-end developer (only &lt;em&gt;JavaScript&lt;/em&gt;) with significant &lt;em&gt;.NET&lt;/em&gt; experience and some smaller &lt;em&gt;Python&lt;/em&gt; and &lt;em&gt;Node.js&lt;/em&gt; episodes. I have tried both flavors, &lt;em&gt;back-end&lt;/em&gt; and &lt;em&gt;front-end&lt;/em&gt;, and only this kind of partition in the IT world had a significant meaning for me before. But the transition had already started - I heard about &lt;em&gt;functional programming&lt;/em&gt;, I started looking for different experiences - I have just discovered &lt;em&gt;Erlang&lt;/em&gt; and started getting familiar with it, I worked for a while with &lt;em&gt;Scala&lt;/em&gt; because of Coursera’s course guided by &lt;em&gt;Martin Odersky&lt;/em&gt;. At the studies I worked twice with &lt;em&gt;Prolog&lt;/em&gt; and that’s it - I have seen every non-obvious technology as impractical and not worth looking at. Being a &lt;em&gt;clean coder&lt;/em&gt; in the enterprise was the &lt;em&gt;thing&lt;/em&gt; back then. At least I have seen it as a fully professional requirement. But it changed when I have started reading this book - it just literally sucked me in.&lt;/p&gt;

&lt;p&gt;At first, it was not a pleasant ride. As a huge fan of &lt;em&gt;JavaScript&lt;/em&gt;, I felt insecure and wronged because of choosing different prototype-based language as a representative of this group. But suddenly, when I finished the first 3 chapters, a really strange thing happened - I just realized how narrow my mindset was, how ineffective is to use single tool to the every problem that you try to solve. There are plenty of problems from very interesting domains that can be relatively easily solved (in comparison to &lt;em&gt;my favorite well-known&lt;/em&gt; language) just by choosing a &lt;em&gt;screwdriver&lt;/em&gt; instead a &lt;em&gt;hammer&lt;/em&gt; again. I have soaked myself completely in &lt;em&gt;polyglot programming&lt;/em&gt; movement and after a while I have seen the first effects.&lt;/p&gt;

&lt;p&gt;Thanks to the different perspective, I started to think in categories that were previously fixed, sometimes even not considered as a point for change or improvement. I have understood the theory underneath many patterns and behaviors that I previously subconsciously used or implemented (e.g. I have used early versions of &lt;em&gt;RxJS&lt;/em&gt; just because it was convenient - already built, packaged and well-tested). This book definitely changed my approach to the programming languages and I can honestly say, without exaggeration, that thanks to this book I started treating programming language as a &lt;em&gt;tool&lt;/em&gt;, instead of treating it as a &lt;em&gt;dogma&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;If you are aware of that simple fact, that your life is oriented around 1-2 programming languages, within only one programming paradigm (e.g. &lt;em&gt;OOP&lt;/em&gt;), I strongly recommend to buy this book and read it. You most likely will not write your next back-end system in &lt;em&gt;Haskell&lt;/em&gt;, you will not use &lt;em&gt;Prolog&lt;/em&gt; inside your application, but your mindset will change.&lt;/p&gt;

&lt;p&gt;I would say that the only drawback of this book is the incomprehensible explanation of &lt;em&gt;monads&lt;/em&gt; (yes, there are the &lt;em&gt;m-words&lt;/em&gt; there). Besides that, this book is really well-written, it contains nice set of homework assignments and for me was an &lt;em&gt;eye-opening&lt;/em&gt; book, which significantly enhanced my toolbox.&lt;/p&gt;

&lt;h3 id=&quot;whats-next&quot;&gt;What’s next?&lt;/h3&gt;

&lt;p&gt;Obviously the aforementioned book cannot be described in just one blog post, so I would like to announce a follow-up post series, which will start immediately after this one. There I will discuss each language presented in that publication separately.&lt;/p&gt;

&lt;p&gt;Regarding this series, next books are ready, waiting in the pipeline and I would like to share them with you. The next one is a &lt;em&gt;must-read&lt;/em&gt; for every programmer, but in a different way that you might initially think. If you have an idea which one I am talking about, please post the title in the comment below. Regardless of whether you know - stay tuned! &lt;img class=&quot;emoji&quot; title=&quot;:wink:&quot; alt=&quot;:wink:&quot; src=&quot;https://assets.github.com/images/icons/emoji/unicode/1f609.png&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;credits&quot;&gt;Credits&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://pragprog.com/book/btlang/seven-languages-in-seven-weeks&quot;&gt;Seven Languages in Seven Weeks, The Pragmatic Bookshelf&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://martinfowler.com/bliki/OneLanguage.html&quot;&gt;One Language, Martin Fowler&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.flickr.com/photos/cote/94256599/in/photolist-9k6cM-nMfaY2-nMxn12-4Wyyg-pPzTdM-f4fhb-ojhTc-9PY9Uk-9PYaxc-qQb56p-qhZZ5T-9vpW4P-qaQqEc-nerTPS-ngcZsg-3WzyA-7Hxgmw-5EyP2b-mZXyzn-h5bQ9g-eCod2H-dAgeQa-q6Vgj-q6Ver-4vQgFr-cHPbL-9Q1ZxL-ngcXRS-dAmHEY-dAmHJj-tGzJq-9Q22fh-cToBD3-G4y8C-4TyQRZ-dAgeAT-dAmHpU-dAmHum-dAgeqD-dAgewk-dAmGXL-dAgeia-9aagv6-9PY9v2-4qcY6P-efwp43-efqE1K-efqEdg-efqDPH-efwoWq&quot;&gt;Pile of books (CC BY 2.0)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sun, 22 Feb 2015 22:30:00 +0000</pubDate>
        <link>http://www.afronski.pl/2015/02/22/books-that-changed-my-career-introduction.html</link>
        <guid isPermaLink="true">http://www.afronski.pl/2015/02/22/books-that-changed-my-career-introduction.html</guid>
      </item>
    
      <item>
        <title>How to store and examine custom business metrics?</title>
        <description>&lt;h1 id=&quot;how-to-store-and-examine-custom-business-metrics&quot;&gt;How to store and examine custom business metrics?&lt;/h1&gt;

&lt;p&gt;Recently, I spent some time looking for an ideal provider, which will deliver storage and graphing capabilities for our custom business metrics. Each growing business need to track your &lt;code&gt;KPIs&lt;/code&gt; but also other values, on the internal and much more granular level. It was not an easy job to do, because we have got very specific requirements.&lt;/p&gt;

&lt;h2 id=&quot;requirements&quot;&gt;Requirements&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;We need &lt;em&gt;schemaless&lt;/em&gt; storage with support for JSON.&lt;/li&gt;
  &lt;li&gt;We need a possibility to query, group, filter by plain fields and nested object structure.&lt;/li&gt;
  &lt;li&gt;We need to deliver multiple and custom data series, represented as business metrics.&lt;/li&gt;
  &lt;li&gt;We need to deliver them over &lt;code&gt;HTTPS&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;We need a possibility to create graphs, tables and dashboards.&lt;/li&gt;
  &lt;li&gt;We need at most one hour delay when displaying graphs from actual data.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Obviously, it looks like too many requirements for one tool, especially that we were focused on the &lt;em&gt;SaaS&lt;/em&gt; solutions - for obvious reasons we don’t want to host anything by ourselves. Moreover, it will be nice to have a dedicated &lt;em&gt;Node.js&lt;/em&gt; client available for such service.&lt;/p&gt;

&lt;h2 id=&quot;services&quot;&gt;Services&lt;/h2&gt;

&lt;p&gt;We have evaluated numerous solutions (&lt;em&gt;around 25 providers&lt;/em&gt;) and we have found these mentioned below as these which match our requirements:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://keen.io/&quot;&gt;Keen IO&lt;/a&gt; - That is the most complete solution for us. It has everything (even a nice &lt;em&gt;Node.js&lt;/em&gt; client), however it does not host dashboards and charts in their place. It is a very nice storage and API only. Fortunately, there is a &lt;a href=&quot;http://keen.github.io/dashboards/&quot;&gt;project&lt;/a&gt; which provides nice, &lt;em&gt;Bootstrap&lt;/em&gt; powered, templates for &lt;a href=&quot;https://keen.io&quot;&gt;Keen IO&lt;/a&gt;. Unfortunately you have to host them on your own.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://datahero.com/&quot;&gt;DataHero&lt;/a&gt; - It is the most impressive solution, with amazing charting abilities, but without any kind of storage and API for pushing metrics. They are specializing in visualization and data analysis. It is possible to integrate &lt;a href=&quot;https://keen.io&quot;&gt;Keen IO&lt;/a&gt; with it, however you can schedule update of your data only once a day. Second possibility is to use the &lt;em&gt;Google Drive Spreadsheet&lt;/em&gt; in order to achieve real-time integration for your dashboards, but it feels like a &lt;em&gt;hack&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://statsmix.com/&quot;&gt;StatsMix&lt;/a&gt; - Very nice complete solution, which has dashboards, metrics storage. Unfortunately bugs related with &lt;code&gt;CSV&lt;/code&gt; export, lack of JSON metadata filtering and grouping and plenty of UI glitches destroy the overall experience.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://newrelic.com/insights&quot;&gt;New Relic Insights&lt;/a&gt; - Again, nice and complete solution but without support for JSON metadata (lack of filtering, storage and grouping). If you would like to store plain, flat structure it is a very nice solution to do that.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://segment.com/&quot;&gt;Segment&lt;/a&gt; - It is a nice tool, but it is only a &lt;em&gt;black-box&lt;/em&gt; which eases integration across multiple services. You can basically insert data into &lt;a href=&quot;https://segment.com&quot;&gt;Segment&lt;/a&gt; (with a nice &lt;em&gt;Node.js&lt;/em&gt; client) and forward them automatically to the other integrated services (like &lt;em&gt;Google Analytics&lt;/em&gt;, &lt;a href=&quot;https://keen.io&quot;&gt;Keen IO&lt;/a&gt; and so on). They do not have dashboards and export API.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.librato.com/&quot;&gt;Librato&lt;/a&gt; - Again, very nice and complete solution without support for nested JSON objects. If you need to store and display graphs from only flat and plain metrics it is a nice tool to check.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;Our choice focused on &lt;a href=&quot;https://keen.io&quot;&gt;Keen IO&lt;/a&gt; integrated via &lt;a href=&quot;https://segment.com&quot;&gt;Segment&lt;/a&gt;. It has an API and JavaScript library for drawing charts (which uses &lt;em&gt;Google Charts&lt;/em&gt; underneath), however it does not host your charts and dashboards in one place, so it is not a complete solution. So why we chosen that one? Simply because of that the rest of solutions have far more problems than &lt;a href=&quot;https://keen.io&quot;&gt;Keen IO&lt;/a&gt; with our requirements.&lt;/p&gt;
</description>
        <pubDate>Sat, 24 Jan 2015 22:00:00 +0000</pubDate>
        <link>http://www.afronski.pl/2015/01/24/how-to-store-and-examine-custom-business-metrics.html</link>
        <guid isPermaLink="true">http://www.afronski.pl/2015/01/24/how-to-store-and-examine-custom-business-metrics.html</guid>
      </item>
    
      <item>
        <title>My picks of NDC 2014 - part II</title>
        <description>&lt;h1 id=&quot;my-picks-of-ndc-2014---part-ii&quot;&gt;My picks of NDC 2014 - part II&lt;/h1&gt;

&lt;p&gt;Another presentations worth looking from the past NDC conference (previous part is &lt;a href=&quot;http://www.afronski.pl/2014/06/16/my-picks-of-NDC-2014-part-1.html&quot;&gt;here&lt;/a&gt;):&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://vimeo.com/97537675&quot;&gt;Venkat Subramaniam - Towards an Evolutionary Architecture&lt;/a&gt; - Very nice talk which summarizes all necessary things which are important in the concept of &lt;em&gt;Good Architecture&lt;/em&gt;. An architect in Agile have been considered as obsolete by many people, but actually it is the opposite. Good architecture defers decisions, enables evolution and moreover handles or even removes completely the complexity. Besides that - a very nice Agile approach is to prioritize features and assignments by the business value and the architectural impact - by doing that you can really avoid many pitfalls when you are moving forward and crush the knowledge during the process of building the application.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://vimeo.com/97415346&quot;&gt;Cory House - Becoming an Outlier: Career Reboot for the Developer Mind&lt;/a&gt; - Definitely recommended video to watch. For many people it will be a mind and eye opening experience. Handful of valuable thoughts and advices how to manage your career, change your habits and adapt in the continuously changing environment.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://vimeo.com/97516289&quot;&gt;Roy Osherove - Beautiful Builds&lt;/a&gt; - Very refreshing talk. It starts by very obvious, but very often forgotten statement that &lt;em&gt;automated builds are not the continuous integration&lt;/em&gt;. It introduces important concept of &lt;em&gt;shipping skeleton&lt;/em&gt;. Mixing operational knowledge with building and deployment knowledge is also an anti-pattern. Talk contains a very useful set of patterns and best practices about CI and even Continuous Deployment - definitely recommended.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://vimeo.com/97507576&quot;&gt;Doc Norton - The Technical Debt Trap&lt;/a&gt; - Very wise and mindful explanation of Technical Debt metaphor (and moreover - the good and only true one). If you are operating this metaphor and you often use it, please watch this presentation and be sure that all points which are related with the true definition are fulfilled. Because if not, you are talking about &lt;em&gt;cruft&lt;/em&gt; not &lt;em&gt;debt&lt;/em&gt;. &lt;img class=&quot;emoji&quot; title=&quot;:wink:&quot; alt=&quot;:wink:&quot; src=&quot;https://assets.github.com/images/icons/emoji/unicode/1f609.png&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://vimeo.com/97408239&quot;&gt;Joe Armstrong - The mess we’re in&lt;/a&gt; - In most cases talks presented by Joe Armstrong can look like a little spontaneous, sometimes even unprepared. However it is a false belief - amount of experience, insight, pragmatic and at the same time scientific approach to the computing can be really underestimated. Knowledge and very insightful anecdotes are &lt;em&gt;flowing out this talk&lt;/em&gt;. If you want to know more or you are merely interested about the history of computing and how it actually will affect the future of computer science, it is a must-watch presentation.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://vimeo.com/97505679&quot;&gt;Aral Balkan - Free is a lie&lt;/a&gt; - Definitely recommended talk, especially if you do not have an idea what is a Google / Facebook business model. For those people it can be even a controversial talk (for me it is because of presenting Mozilla as not a ‘Free’ option in the IT world - claiming that most of the income comes from the Google and only that disqualifies this company from being &lt;em&gt;free as a liberty&lt;/em&gt; is &lt;em&gt;just unfair&lt;/em&gt;). In other words - if you do not know this already, by using free services - you are not a consumer, you are a product - &lt;em&gt;a data source&lt;/em&gt; - nothing less, nothing more.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://vimeo.com/97541185&quot;&gt;Venkat Subramaniam - Core Software Design Principles&lt;/a&gt; - Worth looking if you forgot or you would like to refresh your knowledge about &lt;em&gt;&lt;code&gt;SOLID&lt;/code&gt;&lt;/em&gt; principles, or you do not know what &lt;em&gt;&lt;code&gt;YAGNI&lt;/code&gt;&lt;/em&gt;, &lt;em&gt;&lt;code&gt;DRY&lt;/code&gt;&lt;/em&gt; and &lt;em&gt;&lt;code&gt;TDA&lt;/code&gt;&lt;/em&gt; means. Otherwise, you will watch a rather repetitive (but not boring) presentation.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://vimeo.com/97337252&quot;&gt;Garrett Smith - Functional code considered Beautiful&lt;/a&gt; - Definitely worth looking, especially that it is a kind of a rather &lt;em&gt;soft&lt;/em&gt; talk with very pragmatic insights, without &lt;em&gt;preaching&lt;/em&gt; and not necessary &lt;em&gt;marketing&lt;/em&gt;. If you are not convinced enough - try to think about very readable, declarative code which is oriented around concurrency and is side-effect free - how it should look like? And one more - presented sample with &lt;em&gt;&lt;code&gt;GCD&lt;/code&gt;&lt;/em&gt; is beautiful and enlightening.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://vimeo.com/97514517&quot;&gt;Mathias Brandewinder - F# and Machine Learning: a winning combination&lt;/a&gt; - Inspiring and fresh talk, both regarding the topic and presented programming language. Definitely worth looking if you are interested in the polyglot programming movement, and if you are looking for interesting language to learn in this or next year. &lt;img class=&quot;emoji&quot; title=&quot;:wink:&quot; alt=&quot;:wink:&quot; src=&quot;https://assets.github.com/images/icons/emoji/unicode/1f609.png&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://vimeo.com/97419178&quot;&gt;Bruce Tate - Pipe Dreams&lt;/a&gt; - Another talk from the polyglot programming family. In this case it presents only two key pieces of Elixir, a new language which is a mix of Ruby syntax, Erlang VM and OTP library, but does it well and deeply - actually it is open-minded in terms of specific approach to the data processing paradigm and sequentiality.&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Thu, 28 Aug 2014 20:00:00 +0000</pubDate>
        <link>http://www.afronski.pl/2014/08/28/my-picks-of-NDC-2014-part-2.html</link>
        <guid isPermaLink="true">http://www.afronski.pl/2014/08/28/my-picks-of-NDC-2014-part-2.html</guid>
      </item>
    
      <item>
        <title>nodeschool.io</title>
        <description>&lt;h1 id=&quot;nodeschoolio&quot;&gt;nodeschool.io&lt;/h1&gt;

&lt;p&gt;I would like to present very interesting initiative for everyone interested in topics oriented around Node.js. If you are curious how to learn effectively about stuff available on the platform, how to use libraries effectively and write the most idiomatic code which is consistent with &lt;em&gt;UNIX&lt;/em&gt; philosophy, please read this article further.&lt;/p&gt;

&lt;h1 id=&quot;why&quot;&gt;Why?&lt;/h1&gt;

&lt;p&gt;The major problem when you are learning new stuff is related with first step, even with a basic question &lt;em&gt;“how to start”&lt;/em&gt;. This barrier is often related with new thinking or programming paradigm, new language, unknown environment or even unfamiliar &lt;code&gt;API&lt;/code&gt;. For almost every technology we can find opinionated stuff on the Internet: multiple tutorials, guidelines (often it is not so hard to find two conflicting ones &lt;img class=&quot;emoji&quot; title=&quot;:wink:&quot; alt=&quot;:wink:&quot; src=&quot;https://assets.github.com/images/icons/emoji/unicode/1f609.png&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; /&gt;) and blog posts with information how to work with technology in which we are interested. Moreover, in almost each case we still have a question back in our heads: &lt;em&gt;“Is it a proper way to learn and work with it?”&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Learning process could be easier if we have one source of truth and best practices how to approach certain topics related with piece of technology which is interesting for us. For Node.js such initiative is called &lt;a href=&quot;http://nodeschool.io&quot;&gt;nodeschool.io&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/nodeschool.png&quot; alt=&quot;Nodeschool Main Page&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;what&quot;&gt;What?&lt;/h1&gt;

&lt;p&gt;Nodeschool is a series of interactive workshops, divided into two sections - core concepts and electives.&lt;/p&gt;

&lt;p&gt;In the main concepts we have:
- &lt;a href=&quot;http://nodeschool.io/#learn-you-node&quot;&gt;basic asynchronous programming and introduction to the core Node.js concepts&lt;/a&gt;
- &lt;a href=&quot;http://nodeschool.io/#stream-adventure&quot;&gt;introduction to the streams&lt;/a&gt;
- &lt;a href=&quot;http://nodeschool.io/#bytewiser&quot;&gt;bytes and buffers manipulation&lt;/a&gt;
- &lt;a href=&quot;http://nodeschool.io/#functionaljs&quot;&gt;functional programming in JavaScript&lt;/a&gt;
- &lt;a href=&quot;http://nodeschool.io/#git-it&quot;&gt;how to work effectively with git and github&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Electives are oriented around:
- &lt;a href=&quot;http://nodeschool.io/#levelmeup&quot;&gt;use of node.js binding and modules related with LevelDB&lt;/a&gt;
- &lt;a href=&quot;http://nodeschool.io/#makemehapi&quot;&gt;hapi.js framework&lt;/a&gt;
- &lt;a href=&quot;http://nodeschool.io/#expressworks&quot;&gt;express.js framework&lt;/a&gt;
- &lt;a href=&quot;http://nodeschool.io/#goingnative&quot;&gt;native modules and addons&lt;/a&gt;
- &lt;a href=&quot;http://nodeschool.io/#count-to-6&quot;&gt;6th version of ECMAScript&lt;/a&gt;
- &lt;a href=&quot;http://nodeschool.io/#browserify-adventure&quot;&gt;browserify&lt;/a&gt;
- &lt;a href=&quot;http://nodeschool.io/#promiseitwonthurt&quot;&gt;promises&lt;/a&gt;
- &lt;a href=&quot;http://nodeschool.io/#asyncyou&quot;&gt;async.js&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;how-to-start&quot;&gt;How to start?&lt;/h1&gt;

&lt;p&gt;At first you need to have &lt;em&gt;&lt;code&gt;npm&lt;/code&gt;&lt;/em&gt; and &lt;em&gt;&lt;code&gt;node&lt;/code&gt;&lt;/em&gt; executables - if you do not have them already on your machine, the most recommended place to start is &lt;a href=&quot;http://nodejs.org/download/&quot;&gt;here&lt;/a&gt;. Then you can install each workshop globally using &lt;em&gt;Node Packaged Modules&lt;/em&gt; manager:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;~ &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;npm install -g learnyounode&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In this example &lt;em&gt;&lt;code&gt;-g&lt;/code&gt;&lt;/em&gt; flag means &lt;em&gt;“install package globally”&lt;/em&gt;, so it will be available as a executable on your machine.&lt;/p&gt;

&lt;p&gt;Every single workshop is using the same command line interface and workflow. This eases the work with each of them. Moreover, assignments are well defined, descriptive and small enough to perform them as a &lt;a href=&quot;http://en.wikipedia.org/wiki/Kata_%28programming%29&quot;&gt;daily code kata&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Workflow is oriented around invoking commands in the terminal. After starting the workshop executable without any parameters you will see the list of available assignments, like presented below:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/learnyounode.png&quot; alt=&quot;learnyounode workshop&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Then you should select first unresolved assignment from the list. After that you will see the description and guidelines how you should approach this task. Then you have two commands for testing and verifying prepared solution.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# Testing your solution:&lt;/span&gt;
~ &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;learnyounode run &amp;lt;FILE_NAME_WITH_SOLUTION&amp;gt;
&lt;span class=&quot;c&quot;&gt;# Veryfing the prepared solution:&lt;/span&gt;
~ &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;learnyounode verify &amp;lt;FILE_NAME_WITH_SOLUTION&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If solution is correct, the current assignment will be marked as resolved. Now you are ready to work with each workshop available on the main page.&lt;/p&gt;

&lt;h1 id=&quot;i-am-the-beginner-in-nodejs-community---where-should-i-start&quot;&gt;I am the beginner in Node.js community - where should I start?&lt;/h1&gt;

&lt;p&gt;I will recommend to start with &lt;a href=&quot;http://nodeschool.io/#learn-you-node&quot;&gt;learn-you-node workshop&lt;/a&gt; and then move forward through the rest of core concepts. After that you are free to choose any from the interesting topics from electives group (e.g. related with specific framework).&lt;/p&gt;

&lt;h1 id=&quot;i-am-more-advanced-member---how-can-i-contribute&quot;&gt;I am more advanced member - how can I contribute?&lt;/h1&gt;

&lt;p&gt;You can contribute in several ways.&lt;/p&gt;

&lt;p&gt;The easiest thing is to perform any workshop and check it in practice (especially with edge cases). Then you can fork repository related with it, fix the bugs, improve documentation and clarity of the steps, maybe even add missing scenarios and lessons. After that you can contribute back your changes to the community by providing a &lt;em&gt;pull request&lt;/em&gt; to the workshop author.&lt;/p&gt;

&lt;p&gt;Second option is related with local events. You can easily organize a new event in your city which will be oriented around whole &lt;em&gt;nodeschool&lt;/em&gt; initiative (or even around just one type of workshops). There is a detailed guideline prepared by organization &lt;a href=&quot;http://nodeschool.io/host.html&quot;&gt;how to do this&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;And finally, you can create a new workshop. In such vibrant and broad community you can easily find topic suitable for you. If you do not have a clue which could be suitable for you, you can look at the list of possible topics gathered &lt;a href=&quot;https://github.com/nodeschool/workshoppers/issues?labels=status%3Arequested&quot;&gt;here&lt;/a&gt;. If you already have an idea, you should fork the &lt;a href=&quot;https://github.com/rvagg/workshopper&quot;&gt;rvagg/workshopper&lt;/a&gt; project and start creating lessons. Then, you can add your project to the list of available workshops via &lt;a href=&quot;https://github.com/nodeschool/workshoppers/issues?labels=status%3Ain+progress&quot;&gt;github&lt;/a&gt; - then your workshop will be reviewed, validated and after successful acceptation it will be available as a official lesson on the main &lt;em&gt;nodeschool&lt;/em&gt; page.&lt;/p&gt;

&lt;h1 id=&quot;references&quot;&gt;References&lt;/h1&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;http://nodeschool.io&quot;&gt;nodeschool.io&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://nodeschool.io/host.html&quot;&gt;How to run a new ‘nodeschool’ event?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/rvagg/workshopper&quot;&gt;rvagg/workshopper&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Fri, 18 Jul 2014 15:00:00 +0000</pubDate>
        <link>http://www.afronski.pl/2014/07/18/nodeschool-io.html</link>
        <guid isPermaLink="true">http://www.afronski.pl/2014/07/18/nodeschool-io.html</guid>
      </item>
    
      <item>
        <title>My picks of NDC 2014 - part I</title>
        <description>&lt;h1 id=&quot;my-picks-of-ndc-2014---part-i&quot;&gt;My picks of NDC 2014 - part I&lt;/h1&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://vimeo.com/97329157&quot;&gt;Kevlin Henney - Seven Ineffective Coding Habits of Many Programmers&lt;/a&gt; - Very refreshing talk about style and programming habbits. Even if it has many controversial points from your perspective and it is very opinionated, many of them are at least thought-provoking and maybe they should be reconsidered and rethought again.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://vimeo.com/97315946&quot;&gt;Hadi Hariri - Developing in a Decade&lt;/a&gt; - Very inspiring and refreshing talk what software development, internet and whole IT actually is and why it should change if we want to be happier and live in the better world. Amazing anegdotes and very thought-provoking comparisons to the books (Orwell’s &lt;em&gt;“1984”&lt;/em&gt;, Huxley’s &lt;em&gt;“Brave New World”&lt;/em&gt;, Postman’s &lt;em&gt;“Amusing Ourselves to Death”&lt;/em&gt;). For me, this is the best presentation of this year NDC by now.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://vimeo.com/97530863&quot;&gt;Robert C. Martin - Clean Architecture and Design&lt;/a&gt; - Strongly recommended if you have not seen earlier talks made by &lt;em&gt;Uncle Bob&lt;/em&gt; related with this topic. The most appropriate summary of this talk: &lt;em&gt;application’s business rules are the most important things, protect them - everything is a implementation detail and it should be pluggable&lt;/em&gt;. In other words &lt;em&gt;good architecture maximizes the number of decisions not made&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://vimeo.com/97505656&quot;&gt;Tim Berglund - Discrete Math You Need to Know&lt;/a&gt; - Inspiring talk (even if you may think that math cannot be inspiring). Definitely recommended, at first - it is recommended to stretch your mind frequently, moreover - it is nice to know more and have these tools in your toolbox (or what is even more recommended - refresh it). Surprisingly, still many people in IT do not know how the RSA works underneath.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://vimeo.com/97318800&quot;&gt;Denise R. Jackobs - Banish Your Inner Critic&lt;/a&gt; - It can be very enlightening talk for many people, maybe even a life changer. If you have problems with pursuing to the perfection state, procrastination and you have feeling and knowledge that you are a victim of &lt;em&gt;impostor syndrome&lt;/em&gt; definitely worth watching.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://vimeo.com/97516288&quot;&gt;Robert C. Martin - Advanced Test Driven Development&lt;/a&gt; - Again, if you have seen it before, there is probably nothing new, but if not - please definitely watch it. Very interesting concept called &lt;em&gt;transformation priority premise&lt;/em&gt;. And surprising summary - &lt;em&gt;if statement is a degenerated case of while loop&lt;/em&gt;. &lt;img class=&quot;emoji&quot; title=&quot;:wink:&quot; alt=&quot;:wink:&quot; src=&quot;https://assets.github.com/images/icons/emoji/unicode/1f609.png&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://vimeo.com/97537026&quot;&gt;Scott Bellware - TDD in Tatters&lt;/a&gt; - Eye-opening introduction about cognitive theory and learning. Very nice differentiation between crude and subtle things, which sometimes fells out and disappear in the process of learning. I disagree about that automation leads to removal a connection between the programmers and code, but still it is a viable talk (at least the beginning about &lt;em&gt;amateur cognitive theory&lt;/em&gt;, pointing out the subtleties and explaining the design role in &lt;em&gt;TDD&lt;/em&gt; acronym). The most important quote from this presentation is &lt;em&gt;every test is an additional coupling to the code&lt;/em&gt; - and by providing good design we should minimize the coupling, we should control it. It is the subtle thing that we often ignore.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;how-to-watch-these-videos-offline&quot;&gt;How to watch these videos offline?&lt;/h2&gt;

&lt;p&gt;Unfortunately, since 2013 there are no &lt;em&gt;&lt;code&gt;torrent&lt;/code&gt;&lt;/em&gt; files, which combine all videos in one place. But there is a solution - we can use &lt;code&gt;Selenium&lt;/code&gt; &lt;em&gt;JavaScript&lt;/em&gt; driver to scrap all links from &lt;em&gt;&lt;code&gt;HTML5&lt;/code&gt;&lt;/em&gt; &lt;em&gt;video&lt;/em&gt; tags. Complete source code of scripts and helpers is available &lt;a href=&quot;https://github.com/afronski/playground-repository/tree/master/vimeo-scraper&quot;&gt;here&lt;/a&gt;. Installation:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# On Arch Linux, Selenium Chrome WebDriver is available only in AUR.&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;2&lt;/span&gt; ~ &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;pacaur -S chromedriver
&lt;span class=&quot;lineno&quot;&gt;3&lt;/span&gt; ~ &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;npm install
&lt;span class=&quot;lineno&quot;&gt;4&lt;/span&gt; ~ &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;node vimeo-scraper.js &amp;gt; urls.txt&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In the output file you will receive list of URLs which point directly to &lt;em&gt;MP4&lt;/em&gt; ready to download.&lt;/p&gt;

&lt;h2 id=&quot;appendix---a-bitter-state-of-headless-browsers&quot;&gt;Appendix - A bitter state of headless browsers&lt;/h2&gt;

&lt;p&gt;I know that there are tools capable to do such things headlessly. I thought that it will be an easy task to do.&lt;/p&gt;

&lt;p&gt;Unfortunately, I have tested &lt;code&gt;Phantom.js&lt;/code&gt; and &lt;code&gt;SlimmerJS&lt;/code&gt; (representatives of two major browser engines - &lt;em&gt;WebKit&lt;/em&gt; and &lt;em&gt;Gecko&lt;/em&gt;) and both does not work (even if creators of &lt;code&gt;SlimmerJS&lt;/code&gt; &lt;a href=&quot;http://slimerjs.org/features.html&quot;&gt;claims&lt;/a&gt; that it should work with &lt;em&gt;&lt;code&gt;HTML5&lt;/code&gt;&lt;/em&gt; &lt;em&gt;video&lt;/em&gt;, &lt;code&gt;Phantom.js&lt;/code&gt; is slightly better in this matter - it &lt;a href=&quot;https://github.com/ariya/phantomjs/wiki/Supported-Web-Standards#unsupported-features&quot;&gt;officially&lt;/a&gt; does not support &lt;em&gt;audio&lt;/em&gt; and &lt;em&gt;video&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;The best implementation of &lt;em&gt;&lt;code&gt;WebKit&lt;/code&gt;&lt;/em&gt; rendering engine available to Node.js called &lt;em&gt;Chimera&lt;/em&gt; is &lt;a href=&quot;https://github.com/deanmao/node-chimera/issues/44#issuecomment-30561620&quot;&gt;no longer maintained&lt;/a&gt;. It was a very nice module, I have used it in the past - very unfortunate and disappointing decision.&lt;/p&gt;

&lt;p&gt;So if you really want to scrape pages headlessly by doing more than simple rendering, measure loading time and capture a single screenshot, you need to use the good, old and reliable pair: &lt;code&gt;Selenium&lt;/code&gt; and &lt;code&gt;Xvfb&lt;/code&gt;.&lt;/p&gt;

&lt;h1 id=&quot;references&quot;&gt;References&lt;/h1&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://vimeo.com/channels/ndc2014&quot;&gt;NDC 2014 Vimeo Playlist&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://slimmerjs.org&quot;&gt;SlimmerJS&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://phantomjs.org&quot;&gt;phantomjs&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/deanmao/node-chimera&quot;&gt;&lt;code&gt;node-chimera&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Mon, 16 Jun 2014 22:10:00 +0000</pubDate>
        <link>http://www.afronski.pl/2014/06/16/my-picks-of-NDC-2014-part-1.html</link>
        <guid isPermaLink="true">http://www.afronski.pl/2014/06/16/my-picks-of-NDC-2014-part-1.html</guid>
      </item>
    
      <item>
        <title>Easter Eggs in Python's REPL</title>
        <description>&lt;h1 id=&quot;easter-eggs-in-pythons-repl&quot;&gt;Easter Eggs in Python’s &lt;code&gt;REPL&lt;/code&gt;&lt;/h1&gt;

&lt;p&gt;Recently, I have ran into a funny thing in Python. Try to import &lt;em&gt;&lt;code&gt;antigravity&lt;/code&gt;&lt;/em&gt; module inside the &lt;code&gt;REPL&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;antigravity&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Obviously, it is not the only funny thing hidden somewhere deep in the Python implementation. I researched the topic and I found more examples of easter eggs &lt;img class=&quot;emoji&quot; title=&quot;:grin:&quot; alt=&quot;:grin:&quot; src=&quot;https://assets.github.com/images/icons/emoji/unicode/1f601.png&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; /&gt;.&lt;/p&gt;

&lt;p&gt;The best known is &lt;code&gt;import this&lt;/code&gt; easter egg:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;this&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;The&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Zen&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Python&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;by&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Tim&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Peters&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;Beautiful&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;better&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;than&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ugly&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Explicit&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;better&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;than&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;implicit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Simple&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;better&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;than&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;complex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Complex&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;better&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;than&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;complicated&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Flat&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;better&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;than&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nested&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Sparse&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;better&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;than&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dense&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Readability&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;counts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Special&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cases&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aren&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;t special enough to break the rules.&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Although&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;practicality&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beats&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;purity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Errors&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;should&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;never&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;silently&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Unless&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;explicitly&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;silenced&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;In&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;face&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ambiguity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;refuse&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;temptation&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;guess&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;There&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;should&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;be&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;one&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;preferably&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;only&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;one&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obvious&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;way&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Although&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;that&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;way&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;may&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;be&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obvious&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;at&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;first&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;you&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;re Dutch.&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Now&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;better&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;than&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;never&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Although&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;never&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;often&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;better&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;than&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;If&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;implementation&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hard&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;explain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;s a bad idea.&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;If&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;implementation&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;easy&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;explain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;may&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;be&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;good&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;idea&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Namespaces&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;are&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;one&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;honking&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;great&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;idea&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;s do more of those!&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;There is also nice &lt;a href=&quot;http://www.redmountainsw.com/wordpress/archives/a-joke-in-the-python-interpreter&quot;&gt;example&lt;/a&gt; which exploits idea of &lt;code&gt;this&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;love&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;this&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;love&lt;/span&gt;
&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;love&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;
&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;love&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;
&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;love&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;
&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;love&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;love&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;love&lt;/span&gt;
&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;
&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Also, Python as a &lt;em&gt;truly enterprise ready&lt;/em&gt; language has built-in &lt;code&gt;Hello World&lt;/code&gt; functionality:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;__hello__&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Hello&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;world&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;reload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__hello__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Hello&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;world&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;__hello__&amp;#39;&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;&amp;lt;frozen&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;But the funniest thing is &lt;em&gt;&lt;code&gt;IMHO&lt;/code&gt;&lt;/em&gt; this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;__future__&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;braces&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;ne&quot;&gt;SyntaxError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chance&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This exception message definitely made my day &lt;img class=&quot;emoji&quot; title=&quot;:wink:&quot; alt=&quot;:wink:&quot; src=&quot;https://assets.github.com/images/icons/emoji/unicode/1f609.png&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; /&gt;.&lt;/p&gt;

&lt;p&gt;If I omitted something, please post a comment and let me know which I have missed.&lt;/p&gt;

&lt;h1 id=&quot;references&quot;&gt;References&lt;/h1&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;http://xkcd.com/353&quot;&gt;&lt;code&gt;xkcd&lt;/code&gt;: Python!&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://svn.python.org/view/python/trunk/Lib/antigravity.py?view=markup&quot;&gt;Module &lt;code&gt;antigravity&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Sun, 08 Jun 2014 12:10:00 +0000</pubDate>
        <link>http://www.afronski.pl/2014/06/08/easter-eggs-in-pythons-repl.html</link>
        <guid isPermaLink="true">http://www.afronski.pl/2014/06/08/easter-eggs-in-pythons-repl.html</guid>
      </item>
    
      <item>
        <title>My Toolbox</title>
        <description>&lt;h1 id=&quot;my-toolbox&quot;&gt;My Toolbox&lt;/h1&gt;

&lt;p&gt;This post is mostly a summary, notes with conclusions and information about what tools I am actually using, which ones I have dropped and even more important why these are sufficient or just good enough.&lt;/p&gt;

&lt;h2 id=&quot;current-setup&quot;&gt;Current Setup&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Notes - &lt;em&gt;Microsoft OneNote&lt;/em&gt;
    &lt;ul&gt;
      &lt;li&gt;Impressive web and mobile clients.&lt;/li&gt;
      &lt;li&gt;Easy access to my notes.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Tasks - &lt;em&gt;Asana&lt;/em&gt; &amp;amp; &lt;em&gt;Google Calendar&lt;/em&gt;
    &lt;ul&gt;
      &lt;li&gt;Unfortunately all tasks management tools are after a while not enough and too &lt;em&gt;rigid&lt;/em&gt; for me.&lt;/li&gt;
      &lt;li&gt;Right now I am scheduling all tasks in Google Calendar and rest of uncategorized tasks are available in &lt;em&gt;Asana&lt;/em&gt;.&lt;/li&gt;
      &lt;li&gt;I am in the middle of researching an ideal workflow and transferring tasks from both to just one.&lt;/li&gt;
      &lt;li&gt;Recently I back to &lt;em&gt;Trello&lt;/em&gt; for some side project and I cannot recall why I stopped to use this tool.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Mind Maps - &lt;em&gt;MindMup&lt;/em&gt; (&lt;a href=&quot;http://www.mindmup.com&quot;&gt;mindmup.com&lt;/a&gt;)
    &lt;ul&gt;
      &lt;li&gt;I have started using mind mapping technique recently as a way of making notes and I must admit that in some cases it works perfectly.&lt;/li&gt;
      &lt;li&gt;&lt;em&gt;MindMup&lt;/em&gt; is a very good web client for doing notes in such form.&lt;/li&gt;
      &lt;li&gt;Unfortunately, I cannot use this approach in each case, because editing mode for longer notes and short descriptions in nodes is terrible.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Repositories - &lt;em&gt;Github&lt;/em&gt; (&lt;a href=&quot;https://github.com&quot;&gt;github.com&lt;/a&gt;)
    &lt;ul&gt;
      &lt;li&gt;For me it is an obvious choice - I am a happy customer since 2012.&lt;/li&gt;
      &lt;li&gt;I have tried &lt;em&gt;bitbucket&lt;/em&gt; earlier, I moved to &lt;em&gt;github&lt;/em&gt; and recently I have used &lt;em&gt;bitbucket&lt;/em&gt; again after a while - it works and looks much better right now.&lt;/li&gt;
      &lt;li&gt;At this point of time these two systems are very similar in capabilities and supported features.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Storage - &lt;em&gt;Google Drive&lt;/em&gt;
    &lt;ul&gt;
      &lt;li&gt;Natural choice because of Google Apps account and seamless integration with Google Docs.&lt;/li&gt;
      &lt;li&gt;From &lt;em&gt;Android&lt;/em&gt;-like device it is a pleasure to work with Drive for me.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Documents - &lt;em&gt;Google Docs&lt;/em&gt;
    &lt;ul&gt;
      &lt;li&gt;Impressive and what is most important working web and mobile client.&lt;/li&gt;
      &lt;li&gt;Right now I am using Google Docs in all tasks which requires creating documents, spreadsheets.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Read/Watch Later - &lt;em&gt;Instapaper&lt;/em&gt;, &lt;em&gt;Feedly&lt;/em&gt;, &lt;em&gt;Vimeo&lt;/em&gt;, &lt;em&gt;Youtube&lt;/em&gt;
    &lt;ul&gt;
      &lt;li&gt;Simple and clean UI, whole project is seamlessly integrated with Kindle.&lt;/li&gt;
      &lt;li&gt;&lt;em&gt;Feedly&lt;/em&gt; (after closing &lt;em&gt;Google Reader&lt;/em&gt;) is for me the best application for RSS feeds management (with decent mobile client).
        &lt;ul&gt;
          &lt;li&gt;Still, it has serious issues - lack of tag management etc.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;For videos and podcasts I am using Youtube’s and Vimeo’s &lt;em&gt;“Watch Later”&lt;/em&gt; lists.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Presentations - &lt;em&gt;Customized frameworks&lt;/em&gt;
    &lt;ul&gt;
      &lt;li&gt;I hate &lt;em&gt;PowerPoint&lt;/em&gt;-like presentations.&lt;/li&gt;
      &lt;li&gt;I am using adjusted and crafted version of &lt;a href=&quot;http://lab.hakim.se/reveal-js&quot;&gt;reveal.js&lt;/a&gt; available &lt;a href=&quot;https://github.com/afronski/presentation-template&quot;&gt;here&lt;/a&gt;.&lt;/li&gt;
      &lt;li&gt;In future, with probability I will use &lt;a href=&quot;http://slides.com&quot;&gt;slides.com&lt;/a&gt;.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;tools-that-i-tried&quot;&gt;Tools that I tried&lt;/h2&gt;

&lt;h3 id=&quot;emacs-org-mode&quot;&gt;Emacs org-mode&lt;/h3&gt;

&lt;p&gt;It is at the same time powerful and annoying. With &lt;em&gt;&lt;code&gt;git&lt;/code&gt;&lt;/em&gt; and remote repository creates very powerful combination. Unfortunately, there are no synchronization mechanisms for web / mobile application - for me it is not acceptable, because most of notes and ideas are coming to my mind when I do not have access to laptop / PC.&lt;/p&gt;

&lt;h3 id=&quot;dropbox&quot;&gt;Dropbox&lt;/h3&gt;

&lt;p&gt;My Dropbox account was the victim of migration to Google Apps - I would like to have seamless integration with my online documents, so the naturally I have migrated to Google Drive. Unfortunately this option has a serious drawback - Linux client for Google Drive does not exist, there is a very simple alternative called &lt;em&gt;&lt;code&gt;grive&lt;/code&gt;&lt;/em&gt;. Dropbox had very good client for that operating system.&lt;/p&gt;

&lt;h3 id=&quot;offline-note-taking&quot;&gt;Offline note-taking&lt;/h3&gt;

&lt;p&gt;This does not work for me. I have made myself to work with it and I just can’t. When I have pen and paper, notebook or something similar, I can note interesting observation and idea. There is only one &lt;em&gt;if&lt;/em&gt; - I often forgot to gather with me my notebook. Another disadvantage is related with offline management for such notes - it is much harder then the digital ones (lack of copy-pasting, lack of elasticity - moving paragraphs etc.).&lt;/p&gt;

&lt;h3 id=&quot;trello&quot;&gt;Trello&lt;/h3&gt;

&lt;p&gt;Very simple and neat board management tool. I have used it extensively in the past and one day I just stopped. Personally, I don’t remember why I did that - it can be that I had pile of tasks which are not properly reduced after a while and &lt;em&gt;icebox&lt;/em&gt; was bigger and bigger.&lt;/p&gt;

&lt;h3 id=&quot;evernote&quot;&gt;Evernote&lt;/h3&gt;

&lt;p&gt;It is a really good tool, I have used it previously as a something in the middle of note taking and long term tasks management tool. However lack of decent Linux / Web client enforced me to look for better alternative.&lt;/p&gt;

&lt;h3 id=&quot;prezi&quot;&gt;Prezi&lt;/h3&gt;

&lt;p&gt;It does not look good enough for me to pay for it, and free version limitation (e.g. I do not like watermarks) is unacceptable for me. Moreover communication via such tool can be very &lt;em&gt;cluttered&lt;/em&gt; and &lt;em&gt;inconsistent&lt;/em&gt;. Do you need more arguments? It is powered by Flash.&lt;/p&gt;

&lt;h3 id=&quot;impressjs&quot;&gt;impress.js&lt;/h3&gt;

&lt;p&gt;It is very neat tool, but complicated transforms and moving parts are &lt;em&gt;cluttering&lt;/em&gt; the meaning (as above). A huge advantage is use of a web platform and browser as a main technologies for this library.&lt;/p&gt;

&lt;h3 id=&quot;pocket&quot;&gt;Pocket&lt;/h3&gt;

&lt;p&gt;This project does not work for me because of several reasons. First, I have used it around a year ago and I hated this UI. Second, there were no integration with Kindle at that time.&lt;/p&gt;

&lt;h3 id=&quot;digg&quot;&gt;Digg&lt;/h3&gt;

&lt;p&gt;I have tried to use this web application and after a couple of days I gave up. Many glitches on the UI side and problem with categorization of sources were sufficient for me to drop that tool.&lt;/p&gt;

&lt;h3 id=&quot;the-old-reader&quot;&gt;The Old Reader&lt;/h3&gt;

&lt;p&gt;I really liked this application, it has simple and clean UI, decent tags and feeds categorization management. However after fuss with closing and reopening it discouraged me enough to keep me away from it.&lt;/p&gt;

&lt;h1 id=&quot;missing-pieces&quot;&gt;Missing Pieces&lt;/h1&gt;

&lt;p&gt;Actually, there is only one piece missing here - integration between tasks, calendar and feeds of information (like &lt;em&gt;Instapaper&lt;/em&gt;/&lt;em&gt;Youtube&lt;/em&gt;/&lt;em&gt;Vimeo&lt;/em&gt; queues). If you know such tool, please let me know.&lt;/p&gt;

&lt;p&gt;If you disagree with my opinion and my choices, please let me know about it in the comments.&lt;/p&gt;
</description>
        <pubDate>Mon, 28 Apr 2014 22:30:00 +0000</pubDate>
        <link>http://www.afronski.pl/2014/04/28/my-toolbox.html</link>
        <guid isPermaLink="true">http://www.afronski.pl/2014/04/28/my-toolbox.html</guid>
      </item>
    
      <item>
        <title>Gibberish Game</title>
        <description>&lt;h1 id=&quot;gibberish-game&quot;&gt;Gibberish Game&lt;/h1&gt;

&lt;p&gt;Sometimes you cannot properly name the actual thing. Sometimes you exactly know how to name it, but it will introduce ambiguity and confusion. &lt;em&gt;How to avoid overloading certain terms and assign proper name to the actual definition?&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;what&quot;&gt;What?&lt;/h3&gt;

&lt;p&gt;Answer how to do it is related with a technique from &lt;em&gt;domain driven design&lt;/em&gt; process called &lt;em&gt;modeling whirlpool&lt;/em&gt;. This game helps &lt;em&gt;modeler&lt;/em&gt; choose and adjust a word to the description which &lt;em&gt;domain expert&lt;/em&gt; provides.&lt;/p&gt;

&lt;h3 id=&quot;when&quot;&gt;When?&lt;/h3&gt;

&lt;p&gt;You definitely should use this technique when the actual term cannot be safely used in unambiguous way or it is really overloaded with meanings e.g. couple of aggregates can be associated with it. By defining different, simple, temporary and not meaningful name to the definition we are enforcing our mind to use different parts of brain in order to &lt;em&gt;discover&lt;/em&gt; the actual meaning. It is a way of jumping out just for a while from the scientific and analytic mindset to the more creative one.&lt;/p&gt;

&lt;h3 id=&quot;how&quot;&gt;How?&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Do not name model elements too early.&lt;/li&gt;
  &lt;li&gt;Name it at first as &lt;em&gt;&lt;code&gt;foo&lt;/code&gt;&lt;/em&gt;/&lt;em&gt;&lt;code&gt;bar&lt;/code&gt;&lt;/em&gt;/&lt;em&gt;&lt;code&gt;blah&lt;/code&gt;&lt;/em&gt;/&lt;em&gt;&lt;code&gt;ble&lt;/code&gt;&lt;/em&gt;/etc. and describe its rules and features.
    &lt;ul&gt;
      &lt;li&gt;Proper and what is even more important - descriptive and clear name will automatically appear after a while.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;In the next iteration of describing things choose different word.
    &lt;ul&gt;
      &lt;li&gt;Why? Because your brain already learned what the previous word means.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;If &lt;em&gt;&lt;code&gt;foo&lt;/code&gt;&lt;/em&gt;-ish names sounds offensive and are not appropriate for the audience, you can use Greek letters instead.
    &lt;ul&gt;
      &lt;li&gt;&lt;em&gt;&lt;code&gt;Alpha&lt;/code&gt;&lt;/em&gt;/&lt;em&gt;&lt;code&gt;Kappa&lt;/code&gt;&lt;/em&gt;/&lt;em&gt;&lt;code&gt;Psi&lt;/code&gt;&lt;/em&gt;/etc. sounds more professional &lt;img class=&quot;emoji&quot; title=&quot;:stuck_out_tongue_closed_eyes:&quot; alt=&quot;:stuck_out_tongue_closed_eyes:&quot; src=&quot;https://assets.github.com/images/icons/emoji/unicode/1f61d.png&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; /&gt;.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;references&quot;&gt;References&lt;/h1&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;http://goodenoughsoftware.net/2012/02/28/the-gibberish-game/&quot;&gt;&lt;em&gt;The Gibberish Game&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://goodenoughsoftware.net/2012/02/29/the-context-game/&quot;&gt;&lt;em&gt;The Context Game&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=iaLeKHbspLg&quot;&gt;&lt;em&gt;Model jest wszystkim czego potrzebujesz&lt;/em&gt; (PL)&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Thu, 24 Apr 2014 23:00:00 +0000</pubDate>
        <link>http://www.afronski.pl/2014/04/24/gibberish-game.html</link>
        <guid isPermaLink="true">http://www.afronski.pl/2014/04/24/gibberish-game.html</guid>
      </item>
    
  </channel>
</rss>
