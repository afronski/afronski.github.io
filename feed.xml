<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>afronski.pl</title>
    <description>Random thoughts from top of my head - afronski.pl</description>
    <link>http://www.afronski.pl</link>
    <atom:link href="http://www.afronski.pl/feed.xml" rel="self" type="application/rss+xml" />
    
      <item>
        <title>Tips and tricks for chef-solo and vagrant</title>
        <description>
&lt;h1 id=&quot;tips_and_tricks_for_chefsolo_and_vagrant&quot;&gt;Tips and tricks for chef-solo and vagrant&lt;/h1&gt;

&lt;p&gt;In your daily work with the kitchen sink :wink:, sometimes you have to be a &lt;em&gt;plumber&lt;/em&gt; and get dirty. In order to do that you have to be familiar with the concept of debugging &lt;em&gt;vagrant&lt;/em&gt;, &lt;em&gt;chef-solo&lt;/em&gt; and some other useful tricks.&lt;/p&gt;

&lt;h2 id=&quot;debugging_vagrant&quot;&gt;Debugging vagrant&lt;/h2&gt;

&lt;p&gt;If you want to enable a verbose mode for &lt;em&gt;vagrant&lt;/em&gt;, you need to set the environment variable &lt;code&gt;VAGRANT_LOG&lt;/code&gt; with &lt;code&gt;DEBUG&lt;/code&gt; or &lt;code&gt;INFO&lt;/code&gt; value, as in the example below:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='bash'&gt;~ &lt;span class='nv'&gt;$ VAGRANT_LOG&lt;/span&gt;&lt;span class='o'&gt;=&lt;/span&gt;DEBUG vagrant up
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;debugging_chefsolo&quot;&gt;Debugging chef-solo&lt;/h2&gt;

&lt;p&gt;You have got two options how to enable verbose mode for &lt;em&gt;chef-solo&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;First, you can login into a created virtual machine via &lt;em&gt;SSH&lt;/em&gt; and invoke the &lt;em&gt;magic command&lt;/em&gt; in a certain directory:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='bash'&gt;~ &lt;span class='nv'&gt;$ &lt;/span&gt;vagrant ssh

vagrant@localhost ~ &lt;span class='nv'&gt;$ &lt;/span&gt;&lt;span class='nb'&gt;cd&lt;/span&gt; /tmp/vagrant-chef-1
vagrant@localhost /tmp/vagrant-chef-1 &lt;span class='nv'&gt;$ &lt;/span&gt;sudo chef-solo -c solo.rb -j dna.json -l debug
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In this &lt;em&gt;magic command&lt;/em&gt; parameter &lt;code&gt;-c&lt;/code&gt; is responsible for setting a configuration file, &lt;code&gt;-j&lt;/code&gt; is for passing a file with attributes, which is later called a &lt;em&gt;node specification&lt;/em&gt;. Last parameter &lt;code&gt;-l&lt;/code&gt; - most important for us - enables the verbose mode at a certain logging level.&lt;/p&gt;

&lt;p&gt;You may be wondering, why you are entering to the directory &lt;code&gt;/tmp/vagrant-chef-1&lt;/code&gt; with a digit at the end?&lt;/p&gt;

&lt;p&gt;Actual value depends on number of concurrent and active provisioning processes running on the virtual machine and it is represented by &lt;a href=&quot;https://github.com/mitchellh/vagrant/blob/master/plugins/provisioners/chef/provisioner/base.rb#L22&quot;&gt;get_and_update_counter&lt;/a&gt; method and &lt;a href=&quot;https://github.com/mitchellh/vagrant/blob/master/lib/vagrant/util/counter.rb&quot;&gt;Counter&lt;/a&gt; module.&lt;/p&gt;

&lt;p&gt;But we can enable it in a different way - by passing the arguments to a provisioner inside &lt;em&gt;Vagrantfile&lt;/em&gt;:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='ruby'&gt;&lt;span class='lineno'&gt;1&lt;/span&gt; &lt;span class='no'&gt;Vagrant&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;configure&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;2&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='k'&gt;do&lt;/span&gt; &lt;span class='o'&gt;|&lt;/span&gt;&lt;span class='n'&gt;config&lt;/span&gt;&lt;span class='o'&gt;|&lt;/span&gt;
&lt;span class='lineno'&gt;2&lt;/span&gt;   &lt;span class='c1'&gt;# ...&lt;/span&gt;
&lt;span class='lineno'&gt;3&lt;/span&gt; 
&lt;span class='lineno'&gt;4&lt;/span&gt;   &lt;span class='n'&gt;config&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;vm&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;provision&lt;/span&gt; &lt;span class='ss'&gt;:chef_solo&lt;/span&gt; &lt;span class='k'&gt;do&lt;/span&gt; &lt;span class='o'&gt;|&lt;/span&gt;&lt;span class='n'&gt;chef&lt;/span&gt;&lt;span class='o'&gt;|&lt;/span&gt;
&lt;span class='lineno'&gt;5&lt;/span&gt;     &lt;span class='c1'&gt;# ...&lt;/span&gt;
&lt;span class='lineno'&gt;6&lt;/span&gt; 
&lt;span class='lineno'&gt;7&lt;/span&gt;     &lt;span class='n'&gt;chef&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;arguments&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;-l debug&amp;#39;&lt;/span&gt;
&lt;span class='lineno'&gt;8&lt;/span&gt;   &lt;span class='k'&gt;end&lt;/span&gt;
&lt;span class='lineno'&gt;9&lt;/span&gt; &lt;span class='k'&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;mutating_the_dna&quot;&gt;Mutating the DNA&lt;/h2&gt;

&lt;p&gt;As you can see in the example above, related with the chef-solo debugging, we have got a &lt;code&gt;dna.json&lt;/code&gt; file with attributes generated on the basis of provisioner configuration attached in &lt;em&gt;Vagrantfile&lt;/em&gt;. We call it a &lt;em&gt;node specification&lt;/em&gt;. But what if we already have an existing node specification, and we want to use it?&lt;/p&gt;

&lt;p&gt;There is an attribute for that, called &lt;code&gt;json&lt;/code&gt;, but it is a dictionary. You cannot pass a plain string with a path to the node file, like the role name in the &lt;em&gt;add_role&lt;/em&gt; method or setting a value in the &lt;em&gt;environment&lt;/em&gt; field.&lt;/p&gt;

&lt;p&gt;In order to inject our attributes we need to read the file first, then parse the content as a JSON and finally merge it with the existing value of the field:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='ruby'&gt;&lt;span class='lineno'&gt;1&lt;/span&gt; &lt;span class='no'&gt;Vagrant&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;configure&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;2&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='k'&gt;do&lt;/span&gt; &lt;span class='o'&gt;|&lt;/span&gt;&lt;span class='n'&gt;config&lt;/span&gt;&lt;span class='o'&gt;|&lt;/span&gt;
&lt;span class='lineno'&gt;2&lt;/span&gt;   &lt;span class='c1'&gt;# ...&lt;/span&gt;
&lt;span class='lineno'&gt;3&lt;/span&gt; 
&lt;span class='lineno'&gt;4&lt;/span&gt;   &lt;span class='n'&gt;config&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;vm&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;provision&lt;/span&gt; &lt;span class='ss'&gt;:chef_solo&lt;/span&gt; &lt;span class='k'&gt;do&lt;/span&gt; &lt;span class='o'&gt;|&lt;/span&gt;&lt;span class='n'&gt;chef&lt;/span&gt;&lt;span class='o'&gt;|&lt;/span&gt;
&lt;span class='lineno'&gt;5&lt;/span&gt;     &lt;span class='c1'&gt;# ...&lt;/span&gt;
&lt;span class='lineno'&gt;6&lt;/span&gt; 
&lt;span class='lineno'&gt;7&lt;/span&gt;     &lt;span class='n'&gt;chef&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;json&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;merge!&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='no'&gt;JSON&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;parse&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='no'&gt;File&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;read&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;path/to/json/file&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;)))&lt;/span&gt;
&lt;span class='lineno'&gt;8&lt;/span&gt;   &lt;span class='k'&gt;end&lt;/span&gt;
&lt;span class='lineno'&gt;9&lt;/span&gt; &lt;span class='k'&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&quot;links&quot;&gt;Links&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/mitchellh/vagrant&quot;&gt;Vagrant Github repository&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href=&quot;http://docs.vagrantup.com/v2/&quot;&gt;Vagrant documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Fri, 18 Oct 2013 20:10:00 +0000</pubDate>
        <link>http://www.afronski.pl/2013/10/18/chef-solo-dna-mutation.html</link>
        <guid isPermaLink="true">http://www.afronski.pl/2013/10/18/chef-solo-dna-mutation.html</guid>
      </item>
    
      <item>
        <title>Creating a custom Vagrant box</title>
        <description>
&lt;h1 id=&quot;creating_a_custom_vagrant_box&quot;&gt;Creating a custom Vagrant box&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;/assets/VagrantLogo.png&quot; alt=&quot;Vagrant Logo&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;vagrant - a person without a settled home or regular work who wanders from place to place and lives by begging.&lt;/em&gt;&lt;/p&gt;

&lt;h1 id=&quot;it_is_not_a_common_path&quot;&gt;It is not a common path&lt;/h1&gt;

&lt;p&gt;Do not start the creation of a new box from scratch without checking both of these sites:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.vagrantbox.es/&quot;&gt;vagrantbox.es&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href=&quot;https://github.com/jedi4ever/veewee&quot;&gt;veewee&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In 99% of cases, one page will already contain the solution, which is a needed box. Otherwise we have to roll up our sleeves and go through the whole process. This post will contain almost all directions for creating a fresh box.&lt;/p&gt;

&lt;p&gt;And last but not least: all recipes provided in this article are valid for Vagrant in version 1.2 and above.&lt;/p&gt;

&lt;h1 id=&quot;_but_sometimes_necessary&quot;&gt;â€¦ but sometimes necessary&lt;/h1&gt;

&lt;h4 id=&quot;install_vagrant&quot;&gt;Install Vagrant&lt;/h4&gt;

&lt;p&gt;Iâ€™m assuming that you already have Vagrant - if not, go to &lt;a href=&quot;http://downloads.vagrantup.com/&quot;&gt;downloads&lt;/a&gt; page or install it by using package manager from your Linux distribution.&lt;/p&gt;

&lt;h4 id=&quot;virtual_machine_in_virtualbox&quot;&gt;Virtual Machine in VirtualBox&lt;/h4&gt;

&lt;p&gt;At first, we have to prepare a virtual machine with a specified amount of RAM, number of virtual processors, virtual hard disk image and the rest of the virtualized hardware. Remember the &lt;em&gt;VM&lt;/em&gt; name - you will need it at the end :wink:.&lt;/p&gt;

&lt;p&gt;One important thing related to networking - create only one network adapter and set it for using NAT. At last, setup port forwarding like presented below:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/VirtualBoxPortForwarding.png&quot; alt=&quot;Port forwarding setup for test purposes&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;installation&quot;&gt;Installation&lt;/h4&gt;

&lt;p&gt;Grab your favourite &lt;em&gt;Linux distribution&lt;/em&gt; / &lt;em&gt;Unix flavour&lt;/em&gt; ISO image and proceed with the installation process (no Windows because right now Vagrant doesnâ€™t support this operating system as a guest).&lt;/p&gt;

&lt;p&gt;This is the easiest step in the whole guide :grin:.&lt;/p&gt;

&lt;h4 id=&quot;user_management&quot;&gt;User management&lt;/h4&gt;

&lt;p&gt;After the installation, create a new user account:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='bash'&gt;&lt;span class='c'&gt;# Create user &amp;#39;vagrant&amp;#39;.&lt;/span&gt;
root&amp;gt; useradd vagrant

&lt;span class='c'&gt;# Setup password.&lt;/span&gt;
root&amp;gt; passwd vagrant
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And add him to proper groups:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='bash'&gt;root&amp;gt; usermod -aG users,wheel vagrant
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And the final step here - disable password for &lt;code&gt;sudo&lt;/code&gt; command in the &lt;code&gt;wheel&lt;/code&gt; group:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='bash'&gt;root&amp;gt; visudo

&lt;span class='c'&gt;# Uncomment or add a line like below:&lt;/span&gt;
%wheel &lt;span class='nv'&gt;ALL&lt;/span&gt;&lt;span class='o'&gt;=(&lt;/span&gt;ALL&lt;span class='o'&gt;)&lt;/span&gt; NOPASSWD: ALL
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;ssh&quot;&gt;SSH&lt;/h4&gt;

&lt;p&gt;At first open port 22 on your machine, then get this &lt;a href=&quot;https://raw.github.com/mitchellh/vagrant/master/keys/vagrant.pub&quot;&gt;public key&lt;/a&gt; and put it in the file:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='bash'&gt;root&amp;gt; curl https://raw.github.com/.../vagrant.pub &amp;gt; /etc/ssh/authorized_keys
root&amp;gt; chown root:root /etc/ssh/authorized_keys
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then setup your &lt;code&gt;sshd_config&lt;/code&gt; file like presented below:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='bash'&gt;&lt;span class='c'&gt;# Uncomment these lines:&lt;/span&gt;
Port 22
AddressFamily any
ListenAddress 0.0.0.0
ListenAddress ::
PermitRootLogin yes

&lt;span class='c'&gt;# Also uncomment and change these:&lt;/span&gt;
AuthorizedKeysFile /etc/ssh/authorized_keys
PasswordAuthentication no
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then you can verify your settings by command:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='bash'&gt;~ &lt;span class='nv'&gt;$ &lt;/span&gt;ssh -i ~/.vagrant.d/insecure_private_key vagrant@localhost -p 2222
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If there are no errors youâ€™re ready for the next step.&lt;/p&gt;

&lt;p&gt;In some cases youâ€™ll receive an error similar to this one (&lt;strong&gt;Ubuntu / RedHat compatible tip&lt;/strong&gt;):&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='bash'&gt;~ &lt;span class='nv'&gt;$ &lt;/span&gt;ssh -i ~/.vagrant.d/insecure_private_key vagrant@localhost -p 2222

Permission denied &lt;span class='o'&gt;(&lt;/span&gt;publickey,gssapi-keyex,gssapi-with-mic&lt;span class='o'&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In this case you need to fix the labels for the file with authorized keys:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='bash'&gt;~ &lt;span class='nv'&gt;$ &lt;/span&gt;&lt;span class='nb'&gt;cd&lt;/span&gt; /etc/ssh/
~ &lt;span class='nv'&gt;$ &lt;/span&gt;ls -laZ                     &lt;span class='c'&gt;# Checking labels.&lt;/span&gt;
~ &lt;span class='nv'&gt;$ &lt;/span&gt;restorecon -r -vv .         &lt;span class='c'&gt;# Fixing them.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;finishing_touches&quot;&gt;Finishing touches&lt;/h4&gt;

&lt;p&gt;Unfortunately our &lt;code&gt;sudo&lt;/code&gt; has one big disadvantage - it wonâ€™t work without a real TTY and as you probably guessed - vagrant doesnâ€™t use it. So we have to disable this setting in &lt;code&gt;sudoers&lt;/code&gt; file:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='bash'&gt;~ &lt;span class='nv'&gt;$ &lt;/span&gt;sudo visudo

&lt;span class='c'&gt;# Comment or remove line like below:&lt;/span&gt;
Default requiretty
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Just before the last step, please remove all previously forwarded ports for your virtual machine in VirtualBox.&lt;/p&gt;

&lt;h4 id=&quot;gift_packing&quot;&gt;Gift packing!&lt;/h4&gt;

&lt;p&gt;We still have to do the last step - packaging:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='bash'&gt;~ &lt;span class='nv'&gt;$ &lt;/span&gt;vagrant package --name &amp;lt;VM name&amp;gt; --output FreshAndHotVagrant.box
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The result is a finished box, which we can add to our list:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='bash'&gt;~ &lt;span class='nv'&gt;$ &lt;/span&gt;vagrant box add &amp;lt;internal box name&amp;gt; FreshAndHotVagrant.box
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then feel free to use it inside &lt;code&gt;Vagrantfile&lt;/code&gt;:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='ruby'&gt;&lt;span class='no'&gt;Vagrant&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;configure&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;2&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='k'&gt;do&lt;/span&gt; &lt;span class='o'&gt;|&lt;/span&gt;&lt;span class='n'&gt;config&lt;/span&gt;&lt;span class='o'&gt;|&lt;/span&gt;
  &lt;span class='n'&gt;config&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;vm&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;box&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;&amp;lt;internal box name&amp;gt;&amp;quot;&lt;/span&gt;
&lt;span class='k'&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&quot;links_and_image_credits&quot;&gt;Links and Image credits&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://www.hashicorp.com/images/blog/a-new-look-for-vagrant/logo_wide-cab47086.png&quot;&gt;Original link to Vagrant logo&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href=&quot;http://docs.vagrantup.com/v2/&quot;&gt;Vagrant documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Tue, 08 Oct 2013 21:50:00 +0000</pubDate>
        <link>http://www.afronski.pl/2013/10/08/creating-a-custom-vagrant-box.html</link>
        <guid isPermaLink="true">http://www.afronski.pl/2013/10/08/creating-a-custom-vagrant-box.html</guid>
      </item>
    
      <item>
        <title>Why every programmer should play with LEGO?</title>
        <description>
&lt;h1 id=&quot;why_every_programmer_should_play_with_lego&quot;&gt;Why every programmer should play with LEGO?&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;/assets/LegoColorBricks.jpg&quot; alt=&quot;Colorful LEGO pieces&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;disclaimer&quot;&gt;Disclaimer&lt;/h2&gt;

&lt;p&gt;I would like to strongly deny that the post has anything in common with a recent visit from my parents who brought me the entire supply of bricks. I wonâ€™t say anything more without my lawyer :grin:.&lt;/p&gt;

&lt;h2 id=&quot;what_does_christiansens_toy_have_in_common_with_software_engineering&quot;&gt;What does Christiansenâ€™s toy have in common with software engineering?&lt;/h2&gt;

&lt;p&gt;At a first glance, not much. But after a moment of playing youâ€™ll begin to notice some similarities. The most obvious one is the process of creating a new thing, even if software exist only in the computerâ€™s memory. The second similarity is related strictly to creativity, because playing with LEGO and building software are the same creative processes (with high proportion of imagination). But in my opinion there are more similarities, not so evident at the beginning.&lt;/p&gt;

&lt;h3 id=&quot;standardization_and_interfaces&quot;&gt;Standardization and Interfaces&lt;/h3&gt;

&lt;p&gt;When youâ€™re playing with bricks, itâ€™s easy to create new things, connect previously assembled elements with each other and simulate some missing parts, or even replace completely.&lt;/p&gt;

&lt;p&gt;Itâ€™s a programmerâ€™s dream: everything what is designed right now, fits perfectly to other parts assembled in past. Each component has elements which can be connected with other components in future. Common missing elements can be completely replaced or reassembled from smaller pieces.&lt;/p&gt;

&lt;p&gt;By providing simple standardization and well defined interfaces (I guess the name &lt;em&gt;contract&lt;/em&gt; is more appropriate in this case) youâ€™ll achieve amazing level of flexibility. Of course more specific elements (e.g. wheel and axle) arenâ€™t so flexible and interchangeable as the common bricks, but itâ€™s a balance between common use cases and more specified functionality. But, even if you have an old fashioned wheel from a stagecoach and a new one with a rubber tire, you can use both with the same axle.&lt;/p&gt;

&lt;h3 id=&quot;modularity&quot;&gt;Modularity&lt;/h3&gt;

&lt;p&gt;Lets assume that you want to create a big castle like below:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/BigLegoCastle.jpg&quot; alt=&quot;Big LEGO castle&quot; /&gt;&lt;/p&gt;

&lt;p&gt;At first youâ€™re creating walls, then towers with guards, a castle gate with a bascule bridge and in the meantime youâ€™ll fill it with kingâ€™s headquarters and stables. When youâ€™ll finish the castle, youâ€™ll build the enemy armies with catapults (and finally destroy everything, because itâ€™s the most fun part :grin:).&lt;/p&gt;

&lt;p&gt;Stand back and look how the process flows - youâ€™re creating modularized parts of the castle, then modularized elements of the enemy army. All modules can be connected together, each module has a single, well defined responsibility and you can easily join seemingly unrelated components together (because you can put enemy catapults inside your castle, creating kind of an alliance :wink:).&lt;/p&gt;

&lt;h3 id=&quot;dry_and_design_patterns&quot;&gt;DRY and Design Patterns&lt;/h3&gt;

&lt;p&gt;Yes, the &lt;em&gt;donâ€™t repeat yourself&lt;/em&gt; rule have significant meaning when youâ€™re playing with LEGO, but itâ€™s formulated differently than the original one. In my opinion youâ€™re not reusing the assembled part itself (because youâ€™ve got it in just one copy), but the way of creating it (in other words: youâ€™re reusing the way of assembling a certain thing).&lt;/p&gt;

&lt;p&gt;Also the way of building a specific part can be called a &lt;em&gt;design pattern&lt;/em&gt;, which can be easily reused in the future (when you have enough bricks and time you can repeat the process over and over again). In the example mentioned above youâ€™ll have a design pattern for your tower, but you can reapply it as many times to as many towers you need (you can, of course, adjust the previous design with some small enhancements, you arenâ€™t obligated to fulfill all the requirements and perform all the steps from previous case).&lt;/p&gt;

&lt;h2 id=&quot;okay_but_what_if_i_dont_have_any_lego_bricks&quot;&gt;Okay, but what if I donâ€™t have any LEGO bricks?&lt;/h2&gt;

&lt;p&gt;Then maybe, youâ€™re seeing similarities in your childhood toys when youâ€™re programming and solving problems. Or maybe youâ€™re seeing completely different analogies when youâ€™ll recall memories related with LEGO bricks. In both cases feel free to share your findings in the comments.&lt;/p&gt;

&lt;h2 id=&quot;image_credits&quot;&gt;Image credits&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/File:Lego_Color_Bricks.jpg&quot;&gt;Lego Color Bricks&lt;/a&gt; (licensed on &lt;a href=&quot;http://creativecommons.org/licenses/by-sa/2.0/deed.en&quot;&gt;CC BY-SA 2.0&lt;/a&gt;)&lt;/li&gt;

&lt;li&gt;&lt;a href=&quot;http://www.flickr.com/photos/billward/3393269071/&quot;&gt;Lego Castle Photo&lt;/a&gt; (licensed on &lt;a href=&quot;http://creativecommons.org/licenses/by/2.0/deed.en&quot;&gt;CC BY 2.0&lt;/a&gt;)&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Sun, 06 Oct 2013 17:30:00 +0000</pubDate>
        <link>http://www.afronski.pl/2013/10/06/why-every-programmer-should-play-with-LEGO.html</link>
        <guid isPermaLink="true">http://www.afronski.pl/2013/10/06/why-every-programmer-should-play-with-LEGO.html</guid>
      </item>
    
  </channel>
</rss>