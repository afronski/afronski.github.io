<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>afronski.pl</title>
    <description>Random thoughts from top of my head - afronski.pl</description>
    <link>http://www.afronski.pl</link>
    <atom:link href="http://www.afronski.pl/feed.xml" rel="self" type="application/rss+xml" />
    
      <item>
        <title>Mysterious problem with missing name of the active virtualenv</title>
        <description>
&lt;h1 id=&quot;mysterious_problem_with_missing_name_of_the_active_&quot;&gt;Mysterious problem with missing name of the active &lt;code&gt;virtualenv&lt;/code&gt;&lt;/h1&gt;

&lt;p&gt;Recently I have ran into an issue related to &lt;code&gt;virtualenv&lt;/code&gt; and my shell. It did not display name of the active &lt;code&gt;virtualenv&lt;/code&gt; after invoking the standard command:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='bash'&gt;&lt;span class='nb'&gt;source &lt;/span&gt;bin/activate
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;However, everything works perfectly without that (even a &lt;code&gt;deactivate&lt;/code&gt; command). This little thing makes me nervous so I have started looking for a solution to that problem.&lt;/p&gt;

&lt;p&gt;After a while I found the reason why it does not work:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='bash'&gt;&lt;span class='lineno'&gt;1&lt;/span&gt; &lt;span class='k'&gt;function &lt;/span&gt;calculate_prompt&lt;span class='o'&gt;()&lt;/span&gt; &lt;span class='o'&gt;{&lt;/span&gt;
&lt;span class='lineno'&gt;2&lt;/span&gt;   &lt;span class='c'&gt;# Beautifying the prompt ;).&lt;/span&gt;
&lt;span class='lineno'&gt;3&lt;/span&gt; &lt;span class='o'&gt;}&lt;/span&gt;
&lt;span class='lineno'&gt;4&lt;/span&gt; 
&lt;span class='lineno'&gt;5&lt;/span&gt; &lt;span class='nv'&gt;PROMPT_COMMAND&lt;/span&gt;&lt;span class='o'&gt;=&lt;/span&gt;calculate_prompt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Yeah&lt;/em&gt;, I totally forgot about the fact that I am using &lt;code&gt;PROMPT_COMMAND&lt;/code&gt;. Right now, when I know the reason, the solution is a piece of cake - just add the code for displaying &lt;em&gt;&lt;code&gt;virtualenv&lt;/code&gt;&lt;/em&gt; name to the function which calculates the prompt:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='bash'&gt;&lt;span class='lineno'&gt; 1&lt;/span&gt; &lt;span class='k'&gt;function &lt;/span&gt;calculate_prompt&lt;span class='o'&gt;()&lt;/span&gt; &lt;span class='o'&gt;{&lt;/span&gt;
&lt;span class='lineno'&gt; 2&lt;/span&gt;   &lt;span class='c'&gt;# Beautifying the prompt ;).&lt;/span&gt;
&lt;span class='lineno'&gt; 3&lt;/span&gt;   &lt;span class='c'&gt;# ...&lt;/span&gt;
&lt;span class='lineno'&gt; 4&lt;/span&gt; 
&lt;span class='lineno'&gt; 5&lt;/span&gt;   &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='o'&gt;[&lt;/span&gt; -z &lt;span class='s2'&gt;&amp;quot;$VIRTUAL_ENV_DISABLE_PROMPT&amp;quot;&lt;/span&gt; &lt;span class='o'&gt;]&lt;/span&gt; ; &lt;span class='k'&gt;then&lt;/span&gt;
&lt;span class='lineno'&gt; 6&lt;/span&gt; &lt;span class='k'&gt;    &lt;/span&gt;&lt;span class='nv'&gt;_OLD_VIRTUAL_PS1&lt;/span&gt;&lt;span class='o'&gt;=&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;$PS1&amp;quot;&lt;/span&gt;
&lt;span class='lineno'&gt; 7&lt;/span&gt; 
&lt;span class='lineno'&gt; 8&lt;/span&gt;     &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='o'&gt;[&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;x&amp;quot;&lt;/span&gt; !&lt;span class='o'&gt;=&lt;/span&gt; x &lt;span class='o'&gt;]&lt;/span&gt; ; &lt;span class='k'&gt;then&lt;/span&gt;
&lt;span class='lineno'&gt; 9&lt;/span&gt; &lt;span class='k'&gt;        &lt;/span&gt;&lt;span class='nv'&gt;PS1&lt;/span&gt;&lt;span class='o'&gt;=&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;$PS1&amp;quot;&lt;/span&gt;
&lt;span class='lineno'&gt;10&lt;/span&gt;     &lt;span class='k'&gt;else&lt;/span&gt;
&lt;span class='lineno'&gt;11&lt;/span&gt; &lt;span class='k'&gt;      if&lt;/span&gt; &lt;span class='o'&gt;[&lt;/span&gt; ! -z &lt;span class='s2'&gt;&amp;quot;$VIRTUAL_ENV&amp;quot;&lt;/span&gt; &lt;span class='o'&gt;]&lt;/span&gt; ; &lt;span class='k'&gt;then&lt;/span&gt;
&lt;span class='lineno'&gt;12&lt;/span&gt; &lt;span class='k'&gt;        if&lt;/span&gt; &lt;span class='o'&gt;[&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;`basename \&amp;quot;$VIRTUAL_ENV\&amp;quot;`&amp;quot;&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;__&amp;quot;&lt;/span&gt; &lt;span class='o'&gt;]&lt;/span&gt; ; &lt;span class='k'&gt;then&lt;/span&gt;
&lt;span class='lineno'&gt;13&lt;/span&gt; &lt;span class='k'&gt;          &lt;/span&gt;&lt;span class='nv'&gt;PS1&lt;/span&gt;&lt;span class='o'&gt;=&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;`basename \`dirname \&amp;quot;$VIRTUAL_ENV\&amp;quot;\``: $PS1&amp;quot;&lt;/span&gt;
&lt;span class='lineno'&gt;14&lt;/span&gt;         &lt;span class='k'&gt;else&lt;/span&gt;
&lt;span class='lineno'&gt;15&lt;/span&gt; &lt;span class='k'&gt;          &lt;/span&gt;&lt;span class='nv'&gt;PS1&lt;/span&gt;&lt;span class='o'&gt;=&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;`basename $VIRTUAL_ENV`: $PS1&amp;quot;&lt;/span&gt;
&lt;span class='lineno'&gt;16&lt;/span&gt;         &lt;span class='k'&gt;fi&lt;/span&gt;
&lt;span class='lineno'&gt;17&lt;/span&gt; &lt;span class='k'&gt;      fi&lt;/span&gt;
&lt;span class='lineno'&gt;18&lt;/span&gt; &lt;span class='k'&gt;    fi&lt;/span&gt;
&lt;span class='lineno'&gt;19&lt;/span&gt; &lt;span class='k'&gt;  fi&lt;/span&gt;
&lt;span class='lineno'&gt;20&lt;/span&gt; &lt;span class='o'&gt;}&lt;/span&gt;
&lt;span class='lineno'&gt;21&lt;/span&gt; 
&lt;span class='lineno'&gt;22&lt;/span&gt; &lt;span class='nv'&gt;PROMPT_COMMAND&lt;/span&gt;&lt;span class='o'&gt;=&lt;/span&gt;calculate_prompt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And it is fixed! :wink:&lt;/p&gt;
</description>
        <pubDate>Wed, 13 Nov 2013 18:20:00 +0000</pubDate>
        <link>http://www.afronski.pl/2013/11/13/mysterious-problem-with-missing-name-of-the-active-virtualenv.html</link>
        <guid isPermaLink="true">http://www.afronski.pl/2013/11/13/mysterious-problem-with-missing-name-of-the-active-virtualenv.html</guid>
      </item>
    
      <item>
        <title>Differences between nohup and ampersand</title>
        <description>
&lt;h1 id=&quot;differences_between__and_the_ampersand&quot;&gt;Differences between &lt;code&gt;nohup&lt;/code&gt; and the ampersand&lt;/h1&gt;

&lt;p&gt;There are many cases when &lt;em&gt;small differences&lt;/em&gt; between environments can bite you. This is one into which I have ran recently. What is the difference between these two commands?&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='bash'&gt;&lt;span class='lineno'&gt;1&lt;/span&gt; ~ &lt;span class='nv'&gt;$ &lt;/span&gt;nohup myprocess.out &amp;amp;
&lt;span class='lineno'&gt;2&lt;/span&gt; ~ &lt;span class='nv'&gt;$ &lt;/span&gt;myprocess.out &amp;amp;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The answer is the same as usual - &lt;em&gt;it depends&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;nohup&lt;/code&gt; catches the hangup signal while the ampersand does not.&lt;/p&gt;

&lt;p&gt;What is the hangup signal?&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;code&gt;SIGHUP&lt;/code&gt; - hangup detected on controlling terminal or death of controlling process (value: 1).&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Normally, when running a command using &lt;code&gt;&amp;amp;&lt;/code&gt; and exiting the shell afterwards, the shell will terminate the sub-command with the hangup signal (like &lt;code&gt;kill -SIGHUP $PID&lt;/code&gt;). This can be prevented using nohup, as it catches the signal and ignores it so that it never reaches the actual application.&lt;/p&gt;

&lt;p&gt;Fine, but like in this case there are always &lt;em&gt;‘buts’&lt;/em&gt;. There is no difference between these launching methods when the shell is configured in a way where it does not send &lt;code&gt;SIGHUP&lt;/code&gt; at all.&lt;/p&gt;

&lt;p&gt;In case you are using bash, you can use the command specified below to find out whether your shell sends &lt;em&gt;&lt;code&gt;SIGHUP&lt;/code&gt;&lt;/em&gt; to its child processes or not:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='bash'&gt;~ &lt;span class='nv'&gt;$ &lt;/span&gt;&lt;span class='nb'&gt;shopt&lt;/span&gt; | grep hupon
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And moreover - there are cases where nohup does not work. For example, when the process you start reconnects the &lt;code&gt;NOHUP&lt;/code&gt; signal (it is done inside, on the application code level).&lt;/p&gt;

&lt;p&gt;In the described case, lack of differences bit me when inside a custom service launching script there was a call to a second script which sets up and launches the proper application &lt;em&gt;without a &lt;code&gt;nohup&lt;/code&gt; command&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;On one Linux environment everything worked smoothly, on a second one the application quit as soon as the second script exited (detecting that case, of course took me much more time then you might think :stuck_out_tongue:).&lt;/p&gt;

&lt;p&gt;After adding &lt;code&gt;nohup&lt;/code&gt; as a launching method to second script, application keeps running even if the scripts will exit and this behavior became consistent on both environments.&lt;/p&gt;

&lt;h1 id=&quot;references&quot;&gt;References&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://unixhelp.ed.ac.uk/CGI/man-cgi?signal+7&quot;&gt;&lt;code&gt;man 7 signal&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Thu, 07 Nov 2013 18:45:00 +0000</pubDate>
        <link>http://www.afronski.pl/2013/11/07/differences-between-nohup-and-the-ampersand.html</link>
        <guid isPermaLink="true">http://www.afronski.pl/2013/11/07/differences-between-nohup-and-the-ampersand.html</guid>
      </item>
    
      <item>
        <title>Low-level Node.js debugging on production</title>
        <description>
&lt;h1 id=&quot;lowlevel_nodejs_debugging_on_production&quot;&gt;Low-level Node.js debugging on production&lt;/h1&gt;

&lt;p&gt;Sometimes when you want to run your Node.js application on production environment, you will receive:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='bash'&gt;node-stuff &lt;span class='nv'&gt;$ &lt;/span&gt;node index.js
Segmentation fault
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Yeah… and &lt;em&gt;now&lt;/em&gt; what?&lt;/p&gt;

&lt;p&gt;Welcome to the dungeon, &lt;em&gt;DevOps&lt;/em&gt; marine :grin:.&lt;/p&gt;

&lt;p&gt;First of all, if you deployed an application on an &lt;em&gt;OS&lt;/em&gt; different than &lt;em&gt;SmartOS&lt;/em&gt;, you lost the ability to use many impressive tools which could definitely help you in that case (the most impressive ones are &lt;code&gt;mdb&lt;/code&gt; and &lt;code&gt;dtrace&lt;/code&gt;, you can find details in the references section of this post).&lt;/p&gt;

&lt;p&gt;So there is no &lt;em&gt;&lt;code&gt;mdb&lt;/code&gt;&lt;/em&gt;, no &lt;em&gt;&lt;code&gt;dtrace&lt;/code&gt;&lt;/em&gt;, no &lt;em&gt;SmartOS&lt;/em&gt;. You can’t also use your favorite debugger like &lt;a href=&quot;https://trace.gl/&quot;&gt;trace.gl&lt;/a&gt;, &lt;a href=&quot;https://github.com/jwarkentin/node-monkey&quot;&gt;node-monkey&lt;/a&gt; or &lt;a href=&quot;https://github.com/node-inspector/node-inspector&quot;&gt;node-inspector&lt;/a&gt;. You have got only &lt;code&gt;gdb&lt;/code&gt; and your brain filled with low-level computer knowledge :wink:.&lt;/p&gt;

&lt;p&gt;Before you dive deeper into the internals of your application, let’s begin the voodoo that is the process of setting the proper options in your &lt;em&gt;OS&lt;/em&gt;. First you will remove the limit related with the &lt;em&gt;core dump&lt;/em&gt; size:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='bash'&gt;~ &lt;span class='nv'&gt;$ &lt;/span&gt;sudo &lt;span class='nb'&gt;ulimit&lt;/span&gt; -c unlimited
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Next, you set different path for these files (remember to put them on a partition with a huge amount of the free disk space):&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='bash'&gt;~ &lt;span class='nv'&gt;$ &lt;/span&gt;&lt;span class='nb'&gt;echo&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;/tmp/core_%e.%p&amp;#39;&lt;/span&gt; | sudo tee /proc/sys/kernel/core_pattern
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then, if you are using native Node.js extensions you have to recompile them with the debugging flag &lt;em&gt;&lt;code&gt;-g&lt;/code&gt;&lt;/em&gt; (configuration file taken from the &lt;em&gt;&lt;code&gt;node_xslt&lt;/code&gt;&lt;/em&gt; module):&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='javascript'&gt;&lt;span class='p'&gt;{&lt;/span&gt;
  &lt;span class='s2'&gt;&amp;quot;targets&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='p'&gt;[{&lt;/span&gt;
    &lt;span class='s2'&gt;&amp;quot;target_name&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;node_xslt&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
    &lt;span class='s2'&gt;&amp;quot;sources&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;node_xslt.cc&amp;quot;&lt;/span&gt; &lt;span class='p'&gt;],&lt;/span&gt;

    &lt;span class='s2'&gt;&amp;quot;cflags&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;
      &lt;span class='s2'&gt;&amp;quot;&amp;amp;lt;!(xml2-config --cflags)&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
      &lt;span class='s2'&gt;&amp;quot;-fexceptions&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;

      &lt;span class='s2'&gt;&amp;quot;-g&amp;quot;&lt;/span&gt;
    &lt;span class='p'&gt;],&lt;/span&gt;

    &lt;span class='s2'&gt;&amp;quot;cflags_cc&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;
      &lt;span class='s2'&gt;&amp;quot;&amp;amp;lt;!(xml2-config --cflags)&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
      &lt;span class='s2'&gt;&amp;quot;-fexceptions&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;

      &lt;span class='s2'&gt;&amp;quot;-g&amp;quot;&lt;/span&gt;
    &lt;span class='p'&gt;],&lt;/span&gt;

    &lt;span class='s2'&gt;&amp;quot;xcode_settings&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
      &lt;span class='s2'&gt;&amp;quot;OTHER_CFLAGS&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;
        &lt;span class='s2'&gt;&amp;quot;&amp;amp;lt;!(xml2-config --cflags)&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
        &lt;span class='s2'&gt;&amp;quot;-fexceptions&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;

        &lt;span class='s2'&gt;&amp;quot;-g&amp;quot;&lt;/span&gt;
      &lt;span class='p'&gt;]&lt;/span&gt;
    &lt;span class='p'&gt;},&lt;/span&gt;
    &lt;span class='s2'&gt;&amp;quot;libraries&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;-lxml2&amp;quot;&lt;/span&gt; &lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;-lxslt&amp;quot;&lt;/span&gt; &lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;-lexslt&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;],&lt;/span&gt;
    &lt;span class='s2'&gt;&amp;quot;library_dirs&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;/usr/lib&amp;quot;&lt;/span&gt; &lt;span class='p'&gt;]&lt;/span&gt;
  &lt;span class='p'&gt;}]&lt;/span&gt;
&lt;span class='p'&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then, look at the dependencies (in our case &lt;code&gt;libxslt&lt;/code&gt;, &lt;code&gt;libxml2&lt;/code&gt;) and reinstall them in the development version (sometimes marked with a &lt;code&gt;-devel&lt;/code&gt; postfix).&lt;/p&gt;

&lt;p&gt;After modifications and installing dependencies in the &lt;em&gt;debugging mode&lt;/em&gt;, you have to run installation process inside the directory of the modified module (but only there, not on the upper level, because it will remove our changes in the modified module):&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='bash'&gt;node_xslt &lt;span class='nv'&gt;$ &lt;/span&gt;npm install --verbose
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Somewhere inside the long output you will find information about flags used in compilation process (and you should see a &lt;em&gt;&lt;code&gt;-g&lt;/code&gt;&lt;/em&gt; flag, responsible for attaching debugging informations).&lt;/p&gt;

&lt;p&gt;Next, you have to simulate again situation with &lt;em&gt;&lt;code&gt;Segmentation fault&lt;/code&gt;&lt;/em&gt; behavior. When application receive unwanted signal, it will dump file with the &lt;em&gt;post-mortem&lt;/em&gt; internal structure, ready for using inside &lt;code&gt;gdb&lt;/code&gt;:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='bash'&gt;~ &lt;span class='nv'&gt;$ &lt;/span&gt;gdb /usr/bin/node /tmp/core_XXX.YYY
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And now you are inside the belly of the monster, so you can move around:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='bash'&gt;...
Program received signal SIGSEGV, Segmentation fault.

&lt;span class='o'&gt;(&lt;/span&gt;gdb&lt;span class='o'&gt;)&lt;/span&gt; bt
&lt;span class='c'&gt;# It shows the stack trace (but from the native code).&lt;/span&gt;
&lt;span class='o'&gt;(&lt;/span&gt;gdb&lt;span class='o'&gt;)&lt;/span&gt; print V8_Fatal&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;a&amp;quot;&lt;/span&gt;, 11, &lt;span class='s2'&gt;&amp;quot;c&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt;
&lt;span class='c'&gt;# It shows the stack trace inside V8.&lt;/span&gt;
&lt;span class='c'&gt;# Values &amp;quot;a&amp;quot;, 11 and &amp;quot;c&amp;quot; are irrelevant.&lt;/span&gt;
&lt;span class='o'&gt;(&lt;/span&gt;gdb&lt;span class='o'&gt;)&lt;/span&gt; quit
&lt;span class='c'&gt;# It exits gdb.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you want to attach to the running process, you have to invoke the command specified below:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='bash'&gt;~ &lt;span class='nv'&gt;$ &lt;/span&gt;gdb attach &lt;span class='k'&gt;$(&lt;/span&gt;pidof node&lt;span class='k'&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;However, if your application is running in a cluster mode (or you are running more than one Node.js application on your machine), this will fail and instead of &lt;em&gt;&lt;code&gt;pidof&lt;/code&gt;&lt;/em&gt; you have to pass a single &lt;em&gt;PID&lt;/em&gt; value (from one application, master or one of the slaves, depends on what is interesting for you).&lt;/p&gt;

&lt;p&gt;You can also run &lt;em&gt;&lt;code&gt;strace&lt;/code&gt;&lt;/em&gt; in order to determine which system calls does your program invoke before &lt;em&gt;death&lt;/em&gt;:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='bash'&gt;~ &lt;span class='nv'&gt;$ &lt;/span&gt;strace -ttT
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After gathering a certain amount of knowledge, armed with the stack traces, system call invocations and the memory footprint you have to &lt;em&gt;dig deeper&lt;/em&gt; into the actual application code and maybe try to reproduce that behavior in a more &lt;em&gt;debuggable&lt;/em&gt; environment :wink:.&lt;/p&gt;

&lt;h1 id=&quot;references&quot;&gt;References&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://dtrace.org/blogs/dap/2012/01/13/playing-with-nodev8-postmortem-debugging&quot;&gt;Using &lt;code&gt;mdb&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href=&quot;http://dtrace.org/blogs/dap/2012/01/05/where-does-your-node-program-spend-its-time&quot;&gt;Using &lt;code&gt;dtrace&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href=&quot;http://linux.die.net/man/3/ulimit&quot;&gt;&lt;code&gt;ulimit&lt;/code&gt; man pages&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href=&quot;https://github.com/bsuh/node_xslt&quot;&gt;node_xslt&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href=&quot;http://linux.die.net/man/1/strace&quot;&gt;&lt;code&gt;strace&lt;/code&gt; man pages&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Sat, 02 Nov 2013 10:45:00 +0000</pubDate>
        <link>http://www.afronski.pl/2013/11/02/low-level-nodejs-debugging-on-production.html</link>
        <guid isPermaLink="true">http://www.afronski.pl/2013/11/02/low-level-nodejs-debugging-on-production.html</guid>
      </item>
    
      <item>
        <title>Tips and tricks for chef-solo and vagrant</title>
        <description>
&lt;h1 id=&quot;tips_and_tricks_for_chefsolo_and_vagrant&quot;&gt;Tips and tricks for chef-solo and vagrant&lt;/h1&gt;

&lt;p&gt;In your daily work at the kitchen sink :wink:, sometimes you have to be a &lt;em&gt;plumber&lt;/em&gt; and get dirty. In order to do that you have to be familiar with the concept of debugging &lt;em&gt;vagrant&lt;/em&gt;, &lt;em&gt;chef-solo&lt;/em&gt; and some other useful tricks.&lt;/p&gt;

&lt;h2 id=&quot;debugging_vagrant&quot;&gt;Debugging vagrant&lt;/h2&gt;

&lt;p&gt;If you want to enable a verbose mode for &lt;em&gt;vagrant&lt;/em&gt;, you need to set the environment variable &lt;code&gt;VAGRANT_LOG&lt;/code&gt; to &lt;code&gt;DEBUG&lt;/code&gt; or &lt;code&gt;INFO&lt;/code&gt; value, as in the example below:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='bash'&gt;~ &lt;span class='nv'&gt;$ VAGRANT_LOG&lt;/span&gt;&lt;span class='o'&gt;=&lt;/span&gt;DEBUG vagrant up
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;debugging_chefsolo&quot;&gt;Debugging chef-solo&lt;/h2&gt;

&lt;p&gt;You have got two options how to enable verbose mode for &lt;em&gt;chef-solo&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;First, you can &lt;em&gt;&lt;code&gt;SSH&lt;/code&gt;&lt;/em&gt; into a created virtual machine and invoke the &lt;em&gt;magic command&lt;/em&gt; in a certain directory:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='bash'&gt;~ &lt;span class='nv'&gt;$ &lt;/span&gt;vagrant ssh

vagrant@localhost ~ &lt;span class='nv'&gt;$ &lt;/span&gt;&lt;span class='nb'&gt;cd&lt;/span&gt; /tmp/vagrant-chef-1
vagrant@localhost /tmp/vagrant-chef-1 &lt;span class='nv'&gt;$ &lt;/span&gt;sudo chef-solo -c solo.rb -j dna.json -l debug
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In this &lt;em&gt;magic command&lt;/em&gt; the parameter &lt;code&gt;-c&lt;/code&gt; is responsible for setting a configuration file, &lt;code&gt;-j&lt;/code&gt; is for passing a file with attributes, which is later called a &lt;em&gt;node specification&lt;/em&gt;. Last parameter &lt;code&gt;-l&lt;/code&gt; - most important for us - enables the verbose mode at a certain logging level.&lt;/p&gt;

&lt;p&gt;You may be wondering why you are entering a &lt;code&gt;/tmp/vagrant-chef-1&lt;/code&gt; directory with a digit at the end?&lt;/p&gt;

&lt;p&gt;The actual value depends on the number of concurrent and active provisioning processes running on the virtual machine and is represented by the &lt;a href=&quot;https://github.com/mitchellh/vagrant/blob/master/plugins/provisioners/chef/provisioner/base.rb#L22&quot;&gt;get_and_update_counter&lt;/a&gt; method and the &lt;a href=&quot;https://github.com/mitchellh/vagrant/blob/master/lib/vagrant/util/counter.rb&quot;&gt;Counter&lt;/a&gt; module.&lt;/p&gt;

&lt;p&gt;But you can enable it in a different way - by passing the arguments to a provisioner inside &lt;em&gt;Vagrantfile&lt;/em&gt;:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='ruby'&gt;&lt;span class='lineno'&gt;1&lt;/span&gt; &lt;span class='no'&gt;Vagrant&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;configure&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;2&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='k'&gt;do&lt;/span&gt; &lt;span class='o'&gt;|&lt;/span&gt;&lt;span class='n'&gt;config&lt;/span&gt;&lt;span class='o'&gt;|&lt;/span&gt;
&lt;span class='lineno'&gt;2&lt;/span&gt;   &lt;span class='c1'&gt;# ...&lt;/span&gt;
&lt;span class='lineno'&gt;3&lt;/span&gt; 
&lt;span class='lineno'&gt;4&lt;/span&gt;   &lt;span class='n'&gt;config&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;vm&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;provision&lt;/span&gt; &lt;span class='ss'&gt;:chef_solo&lt;/span&gt; &lt;span class='k'&gt;do&lt;/span&gt; &lt;span class='o'&gt;|&lt;/span&gt;&lt;span class='n'&gt;chef&lt;/span&gt;&lt;span class='o'&gt;|&lt;/span&gt;
&lt;span class='lineno'&gt;5&lt;/span&gt;     &lt;span class='c1'&gt;# ...&lt;/span&gt;
&lt;span class='lineno'&gt;6&lt;/span&gt; 
&lt;span class='lineno'&gt;7&lt;/span&gt;     &lt;span class='n'&gt;chef&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;arguments&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;-l debug&amp;#39;&lt;/span&gt;
&lt;span class='lineno'&gt;8&lt;/span&gt;   &lt;span class='k'&gt;end&lt;/span&gt;
&lt;span class='lineno'&gt;9&lt;/span&gt; &lt;span class='k'&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;mutating_the_dna&quot;&gt;Mutating the DNA&lt;/h2&gt;

&lt;p&gt;As you can see in the example above, related with the chef-solo debugging, you have got a &lt;code&gt;dna.json&lt;/code&gt; file with attributes generated on the basis of provisioner configuration attached in &lt;em&gt;Vagrantfile&lt;/em&gt;. We call it a &lt;em&gt;node specification&lt;/em&gt;. But what if you already have an existing node specification, and you want to use it?&lt;/p&gt;

&lt;p&gt;There is an attribute for that, called &lt;code&gt;json&lt;/code&gt;, but it is a dictionary. You cannot pass a plain string with a path to the node file, like the role name in the &lt;em&gt;add_role&lt;/em&gt; method or setting a value in the &lt;em&gt;environment&lt;/em&gt; field.&lt;/p&gt;

&lt;p&gt;In order to inject our attributes you need to read the file first, then parse the content as JSON and finally merge it with the existing value of the field:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='ruby'&gt;&lt;span class='lineno'&gt;1&lt;/span&gt; &lt;span class='no'&gt;Vagrant&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;configure&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;2&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='k'&gt;do&lt;/span&gt; &lt;span class='o'&gt;|&lt;/span&gt;&lt;span class='n'&gt;config&lt;/span&gt;&lt;span class='o'&gt;|&lt;/span&gt;
&lt;span class='lineno'&gt;2&lt;/span&gt;   &lt;span class='c1'&gt;# ...&lt;/span&gt;
&lt;span class='lineno'&gt;3&lt;/span&gt; 
&lt;span class='lineno'&gt;4&lt;/span&gt;   &lt;span class='n'&gt;config&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;vm&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;provision&lt;/span&gt; &lt;span class='ss'&gt;:chef_solo&lt;/span&gt; &lt;span class='k'&gt;do&lt;/span&gt; &lt;span class='o'&gt;|&lt;/span&gt;&lt;span class='n'&gt;chef&lt;/span&gt;&lt;span class='o'&gt;|&lt;/span&gt;
&lt;span class='lineno'&gt;5&lt;/span&gt;     &lt;span class='c1'&gt;# ...&lt;/span&gt;
&lt;span class='lineno'&gt;6&lt;/span&gt; 
&lt;span class='lineno'&gt;7&lt;/span&gt;     &lt;span class='n'&gt;chef&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;json&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;merge!&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='no'&gt;JSON&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;parse&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='no'&gt;File&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;read&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;path/to/json/file&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;)))&lt;/span&gt;
&lt;span class='lineno'&gt;8&lt;/span&gt;   &lt;span class='k'&gt;end&lt;/span&gt;
&lt;span class='lineno'&gt;9&lt;/span&gt; &lt;span class='k'&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&quot;links&quot;&gt;Links&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/mitchellh/vagrant&quot;&gt;Vagrant Github repository&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href=&quot;http://docs.vagrantup.com/v2/&quot;&gt;Vagrant documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Fri, 18 Oct 2013 20:10:00 +0000</pubDate>
        <link>http://www.afronski.pl/2013/10/18/chef-solo-dna-mutation.html</link>
        <guid isPermaLink="true">http://www.afronski.pl/2013/10/18/chef-solo-dna-mutation.html</guid>
      </item>
    
      <item>
        <title>Creating a custom Vagrant box</title>
        <description>
&lt;h1 id=&quot;creating_a_custom_vagrant_box&quot;&gt;Creating a custom Vagrant box&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;/assets/VagrantLogo.png&quot; alt=&quot;Vagrant Logo&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;vagrant - a person without a settled home or regular work who wanders from place to place and lives by begging.&lt;/em&gt;&lt;/p&gt;

&lt;h1 id=&quot;it_is_not_a_common_path&quot;&gt;It is not a common path&lt;/h1&gt;

&lt;p&gt;Do not start the creation of a new box from scratch without checking both of these sites:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.vagrantbox.es/&quot;&gt;vagrantbox.es&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href=&quot;https://github.com/jedi4ever/veewee&quot;&gt;veewee&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In 99% of cases, one page will already contain the solution, which is a needed box. Otherwise we have to roll up our sleeves and go through the whole process. This post will contain almost all directions for creating a fresh box.&lt;/p&gt;

&lt;p&gt;And last but not least: all recipes provided in this article are valid for Vagrant in version 1.2 and above.&lt;/p&gt;

&lt;h1 id=&quot;_but_sometimes_necessary&quot;&gt;… but sometimes necessary&lt;/h1&gt;

&lt;h4 id=&quot;install_vagrant&quot;&gt;Install Vagrant&lt;/h4&gt;

&lt;p&gt;I’m assuming that you already have Vagrant - if not, go to &lt;a href=&quot;http://downloads.vagrantup.com/&quot;&gt;downloads&lt;/a&gt; page or install it by using package manager from your Linux distribution.&lt;/p&gt;

&lt;h4 id=&quot;virtual_machine_in_virtualbox&quot;&gt;Virtual Machine in VirtualBox&lt;/h4&gt;

&lt;p&gt;At first, we have to prepare a virtual machine with a specified amount of RAM, number of virtual processors, virtual hard disk image and the rest of the virtualized hardware. Remember the &lt;em&gt;VM&lt;/em&gt; name - you will need it at the end :wink:.&lt;/p&gt;

&lt;p&gt;One important thing related to networking - create only one network adapter and set it for using NAT. At last, setup port forwarding like presented below:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/VirtualBoxPortForwarding.png&quot; alt=&quot;Port forwarding setup for test purposes&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;installation&quot;&gt;Installation&lt;/h4&gt;

&lt;p&gt;Grab your favourite &lt;em&gt;Linux distribution&lt;/em&gt; / &lt;em&gt;Unix flavour&lt;/em&gt; ISO image and proceed with the installation process (no Windows because right now Vagrant doesn’t support this operating system as a guest).&lt;/p&gt;

&lt;p&gt;This is the easiest step in the whole guide :grin:.&lt;/p&gt;

&lt;h4 id=&quot;user_management&quot;&gt;User management&lt;/h4&gt;

&lt;p&gt;After the installation, create a new user account:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='bash'&gt;&lt;span class='c'&gt;# Create user &amp;#39;vagrant&amp;#39;.&lt;/span&gt;
root&amp;gt; useradd vagrant

&lt;span class='c'&gt;# Setup password.&lt;/span&gt;
root&amp;gt; passwd vagrant
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And add him to proper groups:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='bash'&gt;root&amp;gt; usermod -aG users,wheel vagrant
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And the final step here - disable password for &lt;code&gt;sudo&lt;/code&gt; command in the &lt;code&gt;wheel&lt;/code&gt; group:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='bash'&gt;root&amp;gt; visudo

&lt;span class='c'&gt;# Uncomment or add a line like below:&lt;/span&gt;
%wheel &lt;span class='nv'&gt;ALL&lt;/span&gt;&lt;span class='o'&gt;=(&lt;/span&gt;ALL&lt;span class='o'&gt;)&lt;/span&gt; NOPASSWD: ALL
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;ssh&quot;&gt;SSH&lt;/h4&gt;

&lt;p&gt;At first open port 22 on your machine, then get this &lt;a href=&quot;https://raw.github.com/mitchellh/vagrant/master/keys/vagrant.pub&quot;&gt;public key&lt;/a&gt; and put it in the file:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='bash'&gt;root&amp;gt; curl https://raw.github.com/.../vagrant.pub &amp;gt; /etc/ssh/authorized_keys
root&amp;gt; chown root:root /etc/ssh/authorized_keys
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then setup your &lt;code&gt;sshd_config&lt;/code&gt; file like presented below:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='bash'&gt;&lt;span class='c'&gt;# Uncomment these lines:&lt;/span&gt;
Port 22
AddressFamily any
ListenAddress 0.0.0.0
ListenAddress ::
PermitRootLogin yes

&lt;span class='c'&gt;# Also uncomment and change these:&lt;/span&gt;
AuthorizedKeysFile /etc/ssh/authorized_keys
PasswordAuthentication no
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then you can verify your settings by command:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='bash'&gt;~ &lt;span class='nv'&gt;$ &lt;/span&gt;ssh -i ~/.vagrant.d/insecure_private_key vagrant@localhost -p 2222
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If there are no errors you’re ready for the next step.&lt;/p&gt;

&lt;p&gt;In some cases you’ll receive an error similar to this one (&lt;strong&gt;SELinux compatible tip&lt;/strong&gt;):&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='bash'&gt;~ &lt;span class='nv'&gt;$ &lt;/span&gt;ssh -i ~/.vagrant.d/insecure_private_key vagrant@localhost -p 2222

Permission denied &lt;span class='o'&gt;(&lt;/span&gt;publickey,gssapi-keyex,gssapi-with-mic&lt;span class='o'&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In this case you need to fix the labels for the file with authorized keys:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='bash'&gt;~ &lt;span class='nv'&gt;$ &lt;/span&gt;&lt;span class='nb'&gt;cd&lt;/span&gt; /etc/ssh/
~ &lt;span class='nv'&gt;$ &lt;/span&gt;ls -laZ                     &lt;span class='c'&gt;# Checking labels.&lt;/span&gt;
~ &lt;span class='nv'&gt;$ &lt;/span&gt;restorecon -r -vv .         &lt;span class='c'&gt;# Fixing them.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;finishing_touches&quot;&gt;Finishing touches&lt;/h4&gt;

&lt;p&gt;Unfortunately our &lt;code&gt;sudo&lt;/code&gt; has one big disadvantage - it won’t work without a real TTY and as you probably guessed - vagrant doesn’t use it. So we have to disable this setting in &lt;code&gt;sudoers&lt;/code&gt; file:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='bash'&gt;~ &lt;span class='nv'&gt;$ &lt;/span&gt;sudo visudo

&lt;span class='c'&gt;# Comment or remove line like below:&lt;/span&gt;
Default requiretty
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Just before the last step, please remove all previously forwarded ports for your virtual machine in VirtualBox.&lt;/p&gt;

&lt;h4 id=&quot;gift_packing&quot;&gt;Gift packing!&lt;/h4&gt;

&lt;p&gt;We still have to do the last step - packaging:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='bash'&gt;~ &lt;span class='nv'&gt;$ &lt;/span&gt;vagrant package --name &amp;lt;VM name&amp;gt; --output FreshAndHotVagrant.box
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The result is a finished box, which we can add to our list:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='bash'&gt;~ &lt;span class='nv'&gt;$ &lt;/span&gt;vagrant box add &amp;lt;internal box name&amp;gt; FreshAndHotVagrant.box
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then feel free to use it inside &lt;code&gt;Vagrantfile&lt;/code&gt;:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='ruby'&gt;&lt;span class='no'&gt;Vagrant&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;configure&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;2&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='k'&gt;do&lt;/span&gt; &lt;span class='o'&gt;|&lt;/span&gt;&lt;span class='n'&gt;config&lt;/span&gt;&lt;span class='o'&gt;|&lt;/span&gt;
  &lt;span class='n'&gt;config&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;vm&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;box&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;&amp;lt;internal box name&amp;gt;&amp;quot;&lt;/span&gt;
&lt;span class='k'&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&quot;links_and_image_credits&quot;&gt;Links and Image credits&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://www.hashicorp.com/images/blog/a-new-look-for-vagrant/logo_wide-cab47086.png&quot;&gt;Original link to Vagrant logo&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href=&quot;http://docs.vagrantup.com/v2/&quot;&gt;Vagrant documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Tue, 08 Oct 2013 21:50:00 +0000</pubDate>
        <link>http://www.afronski.pl/2013/10/08/creating-a-custom-vagrant-box.html</link>
        <guid isPermaLink="true">http://www.afronski.pl/2013/10/08/creating-a-custom-vagrant-box.html</guid>
      </item>
    
      <item>
        <title>Why every programmer should play with LEGO?</title>
        <description>
&lt;h1 id=&quot;why_every_programmer_should_play_with_lego&quot;&gt;Why every programmer should play with LEGO?&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;/assets/LegoColorBricks.jpg&quot; alt=&quot;Colorful LEGO pieces&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;disclaimer&quot;&gt;Disclaimer&lt;/h2&gt;

&lt;p&gt;I would like to strongly deny that the post has anything in common with a recent visit from my parents who brought me the entire supply of bricks. I won’t say anything more without my lawyer :grin:.&lt;/p&gt;

&lt;h2 id=&quot;what_does_christiansens_toy_have_in_common_with_software_engineering&quot;&gt;What does Christiansen’s toy have in common with software engineering?&lt;/h2&gt;

&lt;p&gt;At a first glance, not much. But after a moment of playing you’ll begin to notice some similarities. The most obvious one is the process of creating a new thing, even if software exist only in the computer’s memory. The second similarity is related strictly to creativity, because playing with LEGO and building software are the same creative processes (with high proportion of imagination). But in my opinion there are more similarities, not so evident at the beginning.&lt;/p&gt;

&lt;h3 id=&quot;standardization_and_interfaces&quot;&gt;Standardization and Interfaces&lt;/h3&gt;

&lt;p&gt;When you’re playing with bricks, it’s easy to create new things, connect previously assembled elements with each other and simulate some missing parts, or even replace completely.&lt;/p&gt;

&lt;p&gt;It’s a programmer’s dream: everything what is designed right now, fits perfectly to other parts assembled in past. Each component has elements which can be connected with other components in future. Common missing elements can be completely replaced or reassembled from smaller pieces.&lt;/p&gt;

&lt;p&gt;By providing simple standardization and well defined interfaces (I guess the name &lt;em&gt;contract&lt;/em&gt; is more appropriate in this case) you’ll achieve amazing level of flexibility. Of course more specific elements (e.g. wheel and axle) aren’t so flexible and interchangeable as the common bricks, but it’s a balance between common use cases and more specified functionality. But, even if you have an old fashioned wheel from a stagecoach and a new one with a rubber tire, you can use both with the same axle.&lt;/p&gt;

&lt;h3 id=&quot;modularity&quot;&gt;Modularity&lt;/h3&gt;

&lt;p&gt;Lets assume that you want to create a big castle like below:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/BigLegoCastle.jpg&quot; alt=&quot;Big LEGO castle&quot; /&gt;&lt;/p&gt;

&lt;p&gt;At first you’re creating walls, then towers with guards, a castle gate with a bascule bridge and in the meantime you’ll fill it with king’s headquarters and stables. When you’ll finish the castle, you’ll build the enemy armies with catapults (and finally destroy everything, because it’s the most fun part :grin:).&lt;/p&gt;

&lt;p&gt;Stand back and look how the process flows - you’re creating modularized parts of the castle, then modularized elements of the enemy army. All modules can be connected together, each module has a single, well defined responsibility and you can easily join seemingly unrelated components together (because you can put enemy catapults inside your castle, creating kind of an alliance :wink:).&lt;/p&gt;

&lt;h3 id=&quot;dry_and_design_patterns&quot;&gt;DRY and Design Patterns&lt;/h3&gt;

&lt;p&gt;Yes, the &lt;em&gt;don’t repeat yourself&lt;/em&gt; rule have significant meaning when you’re playing with LEGO, but it’s formulated differently than the original one. In my opinion you’re not reusing the assembled part itself (because you’ve got it in just one copy), but the way of creating it (in other words: you’re reusing the way of assembling a certain thing).&lt;/p&gt;

&lt;p&gt;Also the way of building a specific part can be called a &lt;em&gt;design pattern&lt;/em&gt;, which can be easily reused in the future (when you have enough bricks and time you can repeat the process over and over again). In the example mentioned above you’ll have a design pattern for your tower, but you can reapply it as many times to as many towers you need (you can, of course, adjust the previous design with some small enhancements, you aren’t obligated to fulfill all the requirements and perform all the steps from previous case).&lt;/p&gt;

&lt;h2 id=&quot;okay_but_what_if_i_dont_have_any_lego_bricks&quot;&gt;Okay, but what if I don’t have any LEGO bricks?&lt;/h2&gt;

&lt;p&gt;Then maybe, you’re seeing similarities in your childhood toys when you’re programming and solving problems. Or maybe you’re seeing completely different analogies when you’ll recall memories related with LEGO bricks. In both cases feel free to share your findings in the comments.&lt;/p&gt;

&lt;h2 id=&quot;image_credits&quot;&gt;Image credits&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/File:Lego_Color_Bricks.jpg&quot;&gt;Lego Color Bricks&lt;/a&gt; (licensed on &lt;a href=&quot;http://creativecommons.org/licenses/by-sa/2.0/deed.en&quot;&gt;CC BY-SA 2.0&lt;/a&gt;)&lt;/li&gt;

&lt;li&gt;&lt;a href=&quot;http://www.flickr.com/photos/billward/3393269071/&quot;&gt;Lego Castle Photo&lt;/a&gt; (licensed on &lt;a href=&quot;http://creativecommons.org/licenses/by/2.0/deed.en&quot;&gt;CC BY 2.0&lt;/a&gt;)&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Sun, 06 Oct 2013 17:30:00 +0000</pubDate>
        <link>http://www.afronski.pl/2013/10/06/why-every-programmer-should-play-with-LEGO.html</link>
        <guid isPermaLink="true">http://www.afronski.pl/2013/10/06/why-every-programmer-should-play-with-LEGO.html</guid>
      </item>
    
  </channel>
</rss>