<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>afronski.pl</title>
    <description>Random thoughts from top of my head - afronski.pl</description>
    <link>http://www.afronski.pl</link>
    <atom:link href="http://www.afronski.pl/feed.xml" rel="self" type="application/rss+xml" />
    
      <item>
        <title>ssh2 - Node.js module of the week</title>
        <description>
&lt;h2 id=&quot;__nodejs_module_of_the_week&quot;&gt;&lt;code&gt;ssh2&lt;/code&gt; - Node.js module of the week&lt;/h2&gt;

&lt;h3 id=&quot;introduction&quot;&gt;Introduction&lt;/h3&gt;

&lt;p&gt;In this series of articles I would like to show interesting, sometimes solid, sometimes just working and really useful &lt;em&gt;Node.js&lt;/em&gt; modules which helps me in the last week (or earlier). Each post will describe a reason why I chosen this module, an API description or sample usage. It will also describe &lt;em&gt;health&lt;/em&gt; (in other words - what it supports and answer for question &lt;em&gt;“Is it actively developed?”&lt;/em&gt;) and &lt;em&gt;quality&lt;/em&gt; (documentation, tests and overall code quality).&lt;/p&gt;

&lt;h3 id=&quot;description&quot;&gt;Description&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;ssh2&lt;/code&gt; is a &lt;code&gt;SSH2&lt;/code&gt; client module written in pure JavaScript.&lt;/p&gt;

&lt;p&gt;In this case mentioned module helps me bootstrap the simple tool a while ago. The main goal of this tool is to automate create, download and upload a backup to &lt;code&gt;SFTP&lt;/code&gt; for &lt;em&gt;one-of-the-most-popular-services-for-project-management&lt;/em&gt; which in cheapest version does not provide an API for that.&lt;/p&gt;

&lt;p&gt;For the first part (&lt;em&gt;UI automation script&lt;/em&gt; which will create the backup and download an archive) I have used a &lt;em&gt;&lt;code&gt;node-chimera&lt;/code&gt;&lt;/em&gt; module (which I will describe in the next blog post) and for second part (&lt;em&gt;uploading previously downloaded &lt;code&gt;ZIP&lt;/code&gt; archive&lt;/em&gt; to two different &lt;code&gt;SFTP&lt;/code&gt; servers) I have used a &lt;em&gt;&lt;code&gt;ssh2&lt;/code&gt;&lt;/em&gt; module.&lt;/p&gt;

&lt;h3 id=&quot;api&quot;&gt;API&lt;/h3&gt;

&lt;p&gt;In the most basic case you need only to &lt;em&gt;&lt;code&gt;require&lt;/code&gt;&lt;/em&gt; this module and create new connection. It is useful to use &lt;em&gt;domains&lt;/em&gt; for error handling, but it is not an obligatory practice.&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='javascript'&gt;&lt;span class='lineno'&gt; 1&lt;/span&gt; &lt;span class='kd'&gt;var&lt;/span&gt; &lt;span class='nx'&gt;fs&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='nx'&gt;require&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;fs&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;),&lt;/span&gt;
&lt;span class='lineno'&gt; 2&lt;/span&gt;     &lt;span class='nx'&gt;util&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='nx'&gt;require&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;util&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;),&lt;/span&gt;
&lt;span class='lineno'&gt; 3&lt;/span&gt;     &lt;span class='nx'&gt;domain&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='nx'&gt;require&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;domain&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;),&lt;/span&gt;
&lt;span class='lineno'&gt; 4&lt;/span&gt; 
&lt;span class='lineno'&gt; 5&lt;/span&gt;     &lt;span class='nx'&gt;Connection&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='nx'&gt;require&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;ssh2&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;),&lt;/span&gt;
&lt;span class='lineno'&gt; 6&lt;/span&gt; 
&lt;span class='lineno'&gt; 7&lt;/span&gt;     &lt;span class='nx'&gt;OptionsForSFTP&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
&lt;span class='lineno'&gt; 8&lt;/span&gt;       &lt;span class='nx'&gt;host&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;X.Y.Z.U&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
&lt;span class='lineno'&gt; 9&lt;/span&gt;       &lt;span class='nx'&gt;port&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='mi'&gt;22&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
&lt;span class='lineno'&gt;10&lt;/span&gt;       &lt;span class='nx'&gt;username&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;backup&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
&lt;span class='lineno'&gt;11&lt;/span&gt;       &lt;span class='c1'&gt;// password: &amp;quot;password&amp;quot;&lt;/span&gt;
&lt;span class='lineno'&gt;12&lt;/span&gt;       &lt;span class='nx'&gt;privateKey&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='nx'&gt;fs&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;readFileSync&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;/path/to/privateKey&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
&lt;span class='lineno'&gt;13&lt;/span&gt;     &lt;span class='p'&gt;};&lt;/span&gt;
&lt;span class='lineno'&gt;14&lt;/span&gt; 
&lt;span class='lineno'&gt;15&lt;/span&gt; &lt;span class='c1'&gt;// ...&lt;/span&gt;
&lt;span class='lineno'&gt;16&lt;/span&gt; 
&lt;span class='lineno'&gt;17&lt;/span&gt; &lt;span class='kd'&gt;function&lt;/span&gt; &lt;span class='nx'&gt;uploadToSftpServer&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;options&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nx'&gt;fileName&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nx'&gt;callback&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
&lt;span class='lineno'&gt;18&lt;/span&gt;   &lt;span class='kd'&gt;var&lt;/span&gt; &lt;span class='nx'&gt;connection&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='k'&gt;new&lt;/span&gt; &lt;span class='nx'&gt;Connection&lt;/span&gt;&lt;span class='p'&gt;(),&lt;/span&gt;
&lt;span class='lineno'&gt;19&lt;/span&gt;       &lt;span class='nx'&gt;handler&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='nx'&gt;domain&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;create&lt;/span&gt;&lt;span class='p'&gt;();&lt;/span&gt;
&lt;span class='lineno'&gt;20&lt;/span&gt; 
&lt;span class='lineno'&gt;21&lt;/span&gt;   &lt;span class='nx'&gt;handler&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;on&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;error&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='kd'&gt;function&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;error&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
&lt;span class='lineno'&gt;22&lt;/span&gt;     &lt;span class='nx'&gt;console&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;error&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;Error occurred: %s&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nx'&gt;error&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='lineno'&gt;23&lt;/span&gt;     &lt;span class='nx'&gt;process&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;exit&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='lineno'&gt;24&lt;/span&gt;   &lt;span class='p'&gt;});&lt;/span&gt;
&lt;span class='lineno'&gt;25&lt;/span&gt; 
&lt;span class='lineno'&gt;26&lt;/span&gt;   &lt;span class='c1'&gt;// Handling &amp;quot;error&amp;quot; event inside domain handler.&lt;/span&gt;
&lt;span class='lineno'&gt;27&lt;/span&gt;   &lt;span class='nx'&gt;handler&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;add&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;connection&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='lineno'&gt;28&lt;/span&gt; 
&lt;span class='lineno'&gt;29&lt;/span&gt;   &lt;span class='nx'&gt;connection&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;on&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;ready&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='kd'&gt;function&lt;/span&gt; &lt;span class='p'&gt;()&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
&lt;span class='lineno'&gt;30&lt;/span&gt;     &lt;span class='nx'&gt;connection&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;sftp&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;handler&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;intercept&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='kd'&gt;function&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;sftp&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
&lt;span class='lineno'&gt;31&lt;/span&gt;       &lt;span class='kd'&gt;var&lt;/span&gt; &lt;span class='nx'&gt;providedFileName&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='nx'&gt;util&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;format&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;./%s&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nx'&gt;fileName&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='lineno'&gt;32&lt;/span&gt; 
&lt;span class='lineno'&gt;33&lt;/span&gt;       &lt;span class='nx'&gt;sftp&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;fastPut&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;providedFileName&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nx'&gt;providedFileName&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
&lt;span class='lineno'&gt;34&lt;/span&gt;                    &lt;span class='nx'&gt;handler&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;intercept&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;connection&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;end&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;bind&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;connection&lt;/span&gt;&lt;span class='p'&gt;)));&lt;/span&gt;
&lt;span class='lineno'&gt;35&lt;/span&gt;     &lt;span class='p'&gt;}));&lt;/span&gt;
&lt;span class='lineno'&gt;36&lt;/span&gt;   &lt;span class='p'&gt;});&lt;/span&gt;
&lt;span class='lineno'&gt;37&lt;/span&gt; 
&lt;span class='lineno'&gt;38&lt;/span&gt;   &lt;span class='nx'&gt;connection&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;on&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;end&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nx'&gt;callback&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='lineno'&gt;39&lt;/span&gt;   &lt;span class='nx'&gt;connection&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;connect&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;options&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='lineno'&gt;40&lt;/span&gt; &lt;span class='p'&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When connection is &lt;em&gt;&lt;code&gt;ready&lt;/code&gt;&lt;/em&gt; we need to open a &lt;em&gt;&lt;code&gt;SFTP&lt;/code&gt;&lt;/em&gt; channel and &lt;em&gt;&lt;code&gt;PUT&lt;/code&gt;&lt;/em&gt; file to the server. As you can see in example presented above, authentication via password or private key is a piece of cake and it is handled by module internals.&lt;/p&gt;

&lt;h3 id=&quot;health&quot;&gt;Health&lt;/h3&gt;

&lt;p&gt;Module is under active development, bugs are quickly resolved. Besides bug fixing and merging pull requests author incrementally improves design and code quality.&lt;/p&gt;

&lt;p&gt;It is supported on &lt;em&gt;Node.js&lt;/em&gt; version &lt;code&gt;0.8&lt;/code&gt; and higher (probably also on &lt;code&gt;0.11&lt;/code&gt; because it does not have any kind of binary extensions).&lt;/p&gt;

&lt;h3 id=&quot;quality&quot;&gt;Quality&lt;/h3&gt;

&lt;p&gt;Unfortunately &lt;em&gt;module is not&lt;/em&gt; an any kind of reference in terms of quality:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;It does not have any kind of tests&lt;/em&gt; (unit or even integration tests).&lt;/li&gt;

&lt;li&gt;Documentation is delivered inside single &lt;em&gt;&lt;code&gt;README.md&lt;/code&gt;&lt;/em&gt; file in form of source code examples.&lt;/li&gt;

&lt;li&gt;Overall code quality is not too high, module still makes an impression of &lt;em&gt;hacked&lt;/em&gt; in the hurry.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But it works and it has just a few bugs :wink:.&lt;/p&gt;

&lt;h3 id=&quot;references&quot;&gt;References&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/mscdex/ssh2&quot;&gt;&lt;code&gt;ssh2&lt;/code&gt; github page&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Tue, 04 Feb 2014 22:00:00 +0000</pubDate>
        <link>http://www.afronski.pl/2014/02/04/ssh2-nodejs-module-of-the-week.html</link>
        <guid isPermaLink="true">http://www.afronski.pl/2014/02/04/ssh2-nodejs-module-of-the-week.html</guid>
      </item>
    
      <item>
        <title>Reconciling cat and dog - the most productive git-svn setup</title>
        <description>
&lt;h2 id=&quot;reconciling_cat_and_dog__the_most_productive__setup&quot;&gt;Reconciling cat and dog - the most productive &lt;em&gt;&lt;code&gt;git-svn&lt;/code&gt;&lt;/em&gt; setup&lt;/h2&gt;

&lt;p&gt;I would like to present productive and effective setup for the &lt;em&gt;&lt;code&gt;git-svn&lt;/code&gt;&lt;/em&gt; bridge which removes most of the obstacles and fixes some problems which occur with this &lt;em&gt;bridged&lt;/em&gt; approach.&lt;/p&gt;

&lt;h3 id=&quot;configuration&quot;&gt;Configuration&lt;/h3&gt;

&lt;p&gt;Before we start - one remark: if you installed &lt;em&gt;&lt;code&gt;git&lt;/code&gt;&lt;/em&gt; on your machine first time ever, please remember about setting up proper user, email and &lt;em&gt;one-more-thing just for convinience&lt;/em&gt;:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='bash'&gt;~ &lt;span class='nv'&gt;$ &lt;/span&gt;git config --global user.name &lt;span class='s2'&gt;&amp;quot;Your Name Here&amp;quot;&lt;/span&gt;
~ &lt;span class='nv'&gt;$ &lt;/span&gt;git config --global user.email &lt;span class='s2'&gt;&amp;quot;your_email@example.com&amp;quot;&lt;/span&gt;
~ &lt;span class='nv'&gt;$ &lt;/span&gt;git config --global credential.helper cache
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;starting&quot;&gt;Starting&lt;/h3&gt;

&lt;p&gt;At first, you need to &lt;code&gt;clone&lt;/code&gt; (or &lt;code&gt;checkout&lt;/code&gt; in SVN terminology) repository. You can do in three different ways:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;First way (&lt;em&gt;2nd line&lt;/em&gt;) checkouts repository with a standard SVN layout (&lt;code&gt;trunk&lt;/code&gt;, &lt;code&gt;branches&lt;/code&gt;, &lt;code&gt;tags&lt;/code&gt;) and associates branches, tags and &lt;em&gt;&lt;code&gt;trunk&lt;/code&gt;&lt;/em&gt; with &lt;em&gt;&lt;code&gt;git&lt;/code&gt;&lt;/em&gt; &lt;em&gt;&lt;code&gt;master&lt;/code&gt;&lt;/em&gt;.&lt;/li&gt;

&lt;li&gt;Second way (&lt;em&gt;5th line&lt;/em&gt;) checkouts whole repository as it is.&lt;/li&gt;

&lt;li&gt;Third way (&lt;em&gt;starts in 8th line&lt;/em&gt;) is really an expansion for &lt;code&gt;git-svn clone&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='bash'&gt;&lt;span class='lineno'&gt; 1&lt;/span&gt; &lt;span class='c'&gt;# Standard layout.&lt;/span&gt;
&lt;span class='lineno'&gt; 2&lt;/span&gt; ~ &lt;span class='nv'&gt;$ &lt;/span&gt;git svn clone -s &lt;span class='nv'&gt;$SVN_REPOSITORY_ROOT_URL&lt;/span&gt;
&lt;span class='lineno'&gt; 3&lt;/span&gt; 
&lt;span class='lineno'&gt; 4&lt;/span&gt; &lt;span class='c'&gt;# Non-standard layout.&lt;/span&gt;
&lt;span class='lineno'&gt; 5&lt;/span&gt; ~ &lt;span class='nv'&gt;$ &lt;/span&gt;git svn clone &lt;span class='nv'&gt;$SVN_REPOSITORY_ROOT_URL&lt;/span&gt;
&lt;span class='lineno'&gt; 6&lt;/span&gt; 
&lt;span class='lineno'&gt; 7&lt;/span&gt; &lt;span class='c'&gt;# &amp;#39;git svn clone ...&amp;#39; is basically a shortcut for these commands:&lt;/span&gt;
&lt;span class='lineno'&gt; 8&lt;/span&gt; ~ &lt;span class='nv'&gt;$ &lt;/span&gt;mkdir REPOSITORY
&lt;span class='lineno'&gt; 9&lt;/span&gt; ~ &lt;span class='nv'&gt;$ &lt;/span&gt;&lt;span class='nb'&gt;cd &lt;/span&gt;REPOSITORY
&lt;span class='lineno'&gt;10&lt;/span&gt; ~ &lt;span class='nv'&gt;$ &lt;/span&gt;git svn init &lt;span class='nv'&gt;$SVN_REPOSITORY_TRUNK_URL&lt;/span&gt; .
&lt;span class='lineno'&gt;11&lt;/span&gt; ~ &lt;span class='nv'&gt;$ &lt;/span&gt;git svn fetch -r HEAD
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;updating_and_commiting&quot;&gt;Updating and commiting&lt;/h3&gt;

&lt;p&gt;Besides &lt;code&gt;pull&lt;/code&gt; and &lt;code&gt;push&lt;/code&gt; (or &lt;code&gt;update&lt;/code&gt; and &lt;code&gt;commit&lt;/code&gt; in SVN terminology) everything works like in classical &lt;em&gt;&lt;code&gt;git&lt;/code&gt;&lt;/em&gt;. First line represents &lt;em&gt;&lt;code&gt;svn update&lt;/code&gt;&lt;/em&gt; command, second - series of &lt;code&gt;svn commit&lt;/code&gt; commands with messages collected inside local &lt;em&gt;&lt;code&gt;git&lt;/code&gt;&lt;/em&gt; repository.&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='bash'&gt;&lt;span class='lineno'&gt;1&lt;/span&gt; ~ &lt;span class='nv'&gt;$ &lt;/span&gt;git svn rebase
&lt;span class='lineno'&gt;2&lt;/span&gt; ~ &lt;span class='nv'&gt;$ &lt;/span&gt;git svn dcommit
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;ignores&quot;&gt;Ignores&lt;/h3&gt;

&lt;p&gt;If you cannot store your &lt;em&gt;&lt;code&gt;.gitignore&lt;/code&gt;&lt;/em&gt; file in the SVN repository you can exclude these files locally:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='bash'&gt;~ &lt;span class='nv'&gt;$ &lt;/span&gt;git svn show-ignore &amp;gt;&amp;gt; .git/info/exclude
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But &lt;code&gt;.gitignore&lt;/code&gt; file can be very convenient - you can easily share exclusions with other members of the team which also use this bridged approach. &lt;em&gt;Moreover&lt;/em&gt;, this command is really slow for bigger repositories, so that is another advantage of having this file.&lt;/p&gt;

&lt;h3 id=&quot;branches&quot;&gt;Branches&lt;/h3&gt;

&lt;p&gt;If your repository does not have standard layout you can still easily associate SVN branch in your &lt;em&gt;&lt;code&gt;.git/config&lt;/code&gt;&lt;/em&gt; by adding new &lt;em&gt;&lt;code&gt;svn-remote&lt;/code&gt;&lt;/em&gt; section:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='bash'&gt;&lt;span class='o'&gt;[&lt;/span&gt;svn-remote &lt;span class='s2'&gt;&amp;quot;sample_branch&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;]&lt;/span&gt;
    &lt;span class='nv'&gt;url&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; https://svn_repository/branches/sample_branch
    &lt;span class='nv'&gt;fetch&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; :refs/remotes/sample_branch
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then you should run (and &lt;em&gt;develop the habit of running&lt;/em&gt;):&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='bash'&gt;~ &lt;span class='nv'&gt;$ &lt;/span&gt;git svn fetch --fetch-all
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As the last step, you need to &lt;em&gt;&lt;code&gt;checkout&lt;/code&gt;&lt;/em&gt; new branch:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='bash'&gt;~ &lt;span class='nv'&gt;$ &lt;/span&gt;git checkout -b sample_branch remotes/sample_branch
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After that your branch will be available like normal &lt;em&gt;&lt;code&gt;git&lt;/code&gt;&lt;/em&gt; branch. Remember that your &lt;em&gt;&lt;code&gt;trunk&lt;/code&gt;&lt;/em&gt; is actually a &lt;em&gt;&lt;code&gt;git&lt;/code&gt;&lt;/em&gt; &lt;em&gt;&lt;code&gt;master&lt;/code&gt;&lt;/em&gt; branch.&lt;/p&gt;

&lt;h3 id=&quot;removing_empty_directories&quot;&gt;Removing empty directories&lt;/h3&gt;

&lt;p&gt;Regarding the &lt;em&gt;&lt;code&gt;git-svn&lt;/code&gt;&lt;/em&gt; bridge, dangling empty directories are my nightmare. Fortunately, someone thought about it and we can enable deleting empty directories on commit (&lt;em&gt;globally&lt;/em&gt; via &lt;em&gt;&lt;code&gt;git-config&lt;/code&gt;&lt;/em&gt; or &lt;em&gt;on demand&lt;/em&gt; just for certain commit):&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='bash'&gt;~ &lt;span class='nv'&gt;$ &lt;/span&gt;git config svn.rmdir &lt;span class='nb'&gt;true&lt;/span&gt;
~ &lt;span class='nv'&gt;$ &lt;/span&gt;git svn dcommit --rmdir
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;problems&quot;&gt;Problems&lt;/h3&gt;

&lt;p&gt;There are still a few problems with the newest SVN clients for such combination. The most annoying is &lt;em&gt;assertion … failed&lt;/em&gt; related to the renaming operation. This error looks like this example:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='bash'&gt;~ &lt;span class='nv'&gt;$ &lt;/span&gt;git svn dcommit
Committing to http://...
    C      path/to/file/a.js &lt;span class='o'&gt;=&lt;/span&gt;&amp;gt; other/path/to/file/b.js
assertion &lt;span class='s2'&gt;&amp;quot;svn_fspath__is_canonical(child_fspath)&amp;quot;&lt;/span&gt; failed: file &lt;span class='s2'&gt;&amp;quot;dirent_uri.c&amp;quot;&lt;/span&gt;, line 2502, &lt;span class='k'&gt;function&lt;/span&gt;: svn_fspath__skip_ancestor
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;At first glance you may think that the only (and the &lt;em&gt;worst possible&lt;/em&gt; - lost information and mess in history) option is to split your commit into two. Happily, you can perform your commit normally but you need to turn off rename detection:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='bash'&gt;~ &lt;span class='nv'&gt;$ &lt;/span&gt;git svn dcommit -C1 -l1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Unfortunately you will still commit two changes, this time in one batch (as a &lt;em&gt;deletion the old file&lt;/em&gt; and &lt;em&gt;creation file with the new name&lt;/em&gt;), instead of just a file rename, so you will still loose information in the process.&lt;/p&gt;

&lt;p&gt;To avoid this completely the only option is to downgrade SVN client to the latest version on &lt;em&gt;&lt;code&gt;1.7.X&lt;/code&gt;&lt;/em&gt; branch.&lt;/p&gt;

&lt;h3 id=&quot;credits&quot;&gt;Credits&lt;/h3&gt;

&lt;p&gt;Big thanks to &lt;a href=&quot;https://twitter.com/skremiec&quot;&gt;@skremiec&lt;/a&gt; for undeceiving me in some cases and pointing out &lt;em&gt;&lt;code&gt;svn.rmdir&lt;/code&gt;&lt;/em&gt; option :wink:.&lt;/p&gt;

&lt;h3 id=&quot;references&quot;&gt;References&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://www.kernel.org/pub/software/scm/git/docs/git-svn.html&quot;&gt;Manual for &lt;code&gt;git-svn&lt;/code&gt; on kernel.org&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href=&quot;http://git-scm.com/book/en/Git-and-Other-Systems-Git-and-Subversion&quot;&gt;Chapter about &lt;code&gt;git-svn&lt;/code&gt; in &lt;code&gt;Pro Git&lt;/code&gt; book&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Sat, 25 Jan 2014 22:00:00 +0000</pubDate>
        <link>http://www.afronski.pl/2014/01/25/reconciling-cat-and-dog-the-most-productive-git-svn-setup.html</link>
        <guid isPermaLink="true">http://www.afronski.pl/2014/01/25/reconciling-cat-and-dog-the-most-productive-git-svn-setup.html</guid>
      </item>
    
      <item>
        <title>Small talk about productivity</title>
        <description>
&lt;h1 id=&quot;small_talk_about_productivity&quot;&gt;Small talk about productivity&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Do you propose a 4 day work week in your company?&lt;/li&gt;

&lt;li&gt;Are you using 3 monitors and you have requested another one?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;STOP!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Do you really think that &lt;em&gt;efficiency&lt;/em&gt; can be measured with &lt;em&gt;monitors-which-you-have-on-your-work-desk&lt;/em&gt;?&lt;/p&gt;

&lt;p&gt;&lt;em&gt;No, it cannot be measured in such way.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;time&quot;&gt;Time&lt;/h2&gt;

&lt;p&gt;Do you want work only 4 days in a week? And how do you spent time in a normal week? Be honest with yourself - are you really one of these people which have 90 - 95% productivity in a week and you always do what you plan to do?&lt;/p&gt;

&lt;p&gt;If not, let’s do some math.&lt;/p&gt;

&lt;p&gt;Let’s assume that you have pretty good efficiency around 80% in normal week. It means that (in terms of Polish work law) you worked &lt;em&gt;“properly”&lt;/em&gt; 32 hours per week, 8 hours you have spent on something else (let’s call it a &lt;em&gt;procrastination&lt;/em&gt;, BTW. in terms of Polish law it is a &lt;em&gt;whole working day&lt;/em&gt; spent on non-working activities).&lt;/p&gt;

&lt;p&gt;Now let’s think about 4 day work week - you have got 32 hours per week - in order to achieve the same productivity in terms of hours, you need to increase your efficiency from 80% to 100%. And probably you know &lt;em&gt;Pareto rule&lt;/em&gt; which states that 80% of “something” (work done, complexity etc.) is located in 20% of domain of “something” (hours per week, time spent of some task etc.). If you look at the 15 - 20% which you does not have at the moment, you can spent pretty significant amount of time in order to achieve that.&lt;/p&gt;

&lt;p&gt;But what if you stay with the 80% efficiency - you have got 26 hours (rounded with a handicap for you :wink:) - 6 hours less than in 5 a day work week. Think about - in order to do actual work (and you already cut &lt;em&gt;procrastination&lt;/em&gt; by reducing work week by one day) you need to cut time spent on less important tasks in your work day (for someone it will be a meeting, email communication, chatting for someone else reading an article, research etc.) - and you need to find 6 hours of &lt;em&gt;such time&lt;/em&gt;. Are you ready for that?&lt;/p&gt;

&lt;p&gt;You can do it better! How about increasing productivity for normal work week and going up to the 90 - 95%. Move forward, triage things, use &lt;em&gt;DDDD rule&lt;/em&gt; (&lt;em&gt;Do, Delegate, Defer, Delete&lt;/em&gt;) etc. There are many amazing things and talks about increasing productivity, some of them you can find in the references.&lt;/p&gt;

&lt;p&gt;If you achieve such level of efficiency, then you need to plan activities for each day - like 3 - 4 main activities which I need to do. If you do them, rest of time you can spent in a different way - e.g. procrastination, do some research, learning etc. You can do stuff unrelated with work only if you finish your daily work activity.&lt;/p&gt;

&lt;p&gt;One more thing - if you can’t specify your limited &lt;em&gt;daily goals&lt;/em&gt; list you are simply doing too much - please look at &lt;em&gt;DDDD&lt;/em&gt; in advance, because in future you can be highly frustrated (let’s call it a &lt;em&gt;burnout&lt;/em&gt;) about amount of work which you have to do and amount of responsibilities which are assigned to you.&lt;/p&gt;

&lt;h2 id=&quot;resources&quot;&gt;Resources&lt;/h2&gt;

&lt;p&gt;Are you using your resources in 100% and you are requesting more only if you feel constrained? If you have doubt about that, please read next paragraphs.&lt;/p&gt;

&lt;p&gt;I have seen people which have three monitors - one for &lt;code&gt;IDE&lt;/code&gt; / editor, one for browser, test runner, documentation and one for … &lt;code&gt;IRC&lt;/code&gt;, twitter, Skype, email client etc.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Why the heck people spent ⅓ of their resources on these “chatter-boxes”, instant interruptions and transforming asynchronous communication channels into synchronous ones?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Many people ask me why I’m using just one screen in my daily work (and I’m a programmer so in many people mindset I need to have at least two if not three monitors). I have got laptop and unattached second screen. And I’m using such opportunity only if I need to.&lt;/p&gt;

&lt;p&gt;Start with just one screen, use virtual desktops, throw away interruptions while you working, be effective on just one screen. If I feel constrained with space of my 4 virtual desktops at one physical screen I’m immediately attaching second screen and rearrange my workspace, on the occasion I’m cleaning up my stuff unrelated with the problem on which I’m working right now.&lt;/p&gt;

&lt;p&gt;Asynchronism in the communication channels should be our advantage. Please refer to the Scott’s talk and schedule time for emails / communication stuff. Respond only if you need and what is even more important be as much asynchronous with it as you can (in other words - defer it).&lt;/p&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;Whole topic came to my mind after some “unwise” statements that some people made in company which I’m working right now. What frustrates me the most is that these people &lt;em&gt;are not spent&lt;/em&gt; their time effectively and they claim that 4 day work week will be even more efficient (&lt;em&gt;of course it will&lt;/em&gt;, it will be productive in the lack of productivity :grin:).&lt;/p&gt;

&lt;p&gt;Please, be honest with yourselves and with your employers - We need to use our resources honestly, then effectively and only if we will be very productive we can move to the next step which is an &lt;em&gt;optimization&lt;/em&gt; of these parameters.&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://vimeo.com/39020426&quot;&gt;Scott Hanselman - It’s not what you read, it’s what you ignore&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Sat, 18 Jan 2014 17:30:00 +0000</pubDate>
        <link>http://www.afronski.pl/2014/01/18/small-talk-about-productivity.html</link>
        <guid isPermaLink="true">http://www.afronski.pl/2014/01/18/small-talk-about-productivity.html</guid>
      </item>
    
      <item>
        <title>With great power, comes great responsibility</title>
        <description>
&lt;h1 id=&quot;with_great_power_comes_great_responsibility&quot;&gt;With great power, comes great responsibility&lt;/h1&gt;

&lt;p&gt;If you had to choose what is better - &lt;em&gt;short and concise code&lt;/em&gt; or &lt;em&gt;abstractions visible at the first glance&lt;/em&gt; - what would you choose?&lt;/p&gt;

&lt;p&gt;Got your answer? Fine, let’s look at the examples.&lt;/p&gt;

&lt;h1 id=&quot;iterables&quot;&gt;Iterables&lt;/h1&gt;

&lt;p&gt;Let’s look at the standard abstraction of &lt;em&gt;iterable collections&lt;/em&gt;, available in Java and Scala (example written in &lt;em&gt;Scala&lt;/em&gt;):&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='scala'&gt;&lt;span class='lineno'&gt;1&lt;/span&gt; &lt;span class='k'&gt;trait&lt;/span&gt; &lt;span class='nc'&gt;Iterable&lt;/span&gt;&lt;span class='o'&gt;[&lt;/span&gt;&lt;span class='kt'&gt;T&lt;/span&gt;&lt;span class='o'&gt;]&lt;/span&gt; &lt;span class='o'&gt;{&lt;/span&gt;
&lt;span class='lineno'&gt;2&lt;/span&gt;   &lt;span class='k'&gt;def&lt;/span&gt; &lt;span class='n'&gt;iterator&lt;/span&gt;&lt;span class='o'&gt;()&lt;/span&gt;&lt;span class='k'&gt;:&lt;/span&gt; &lt;span class='kt'&gt;Iterator&lt;/span&gt;&lt;span class='o'&gt;[&lt;/span&gt;&lt;span class='kt'&gt;T&lt;/span&gt;&lt;span class='o'&gt;]&lt;/span&gt;
&lt;span class='lineno'&gt;3&lt;/span&gt; &lt;span class='o'&gt;}&lt;/span&gt;
&lt;span class='lineno'&gt;4&lt;/span&gt; 
&lt;span class='lineno'&gt;5&lt;/span&gt; &lt;span class='k'&gt;trait&lt;/span&gt; &lt;span class='nc'&gt;Iterator&lt;/span&gt;&lt;span class='o'&gt;[&lt;/span&gt;&lt;span class='kt'&gt;T&lt;/span&gt;&lt;span class='o'&gt;]&lt;/span&gt; &lt;span class='o'&gt;{&lt;/span&gt;
&lt;span class='lineno'&gt;6&lt;/span&gt;   &lt;span class='k'&gt;def&lt;/span&gt; &lt;span class='n'&gt;hasNext&lt;/span&gt;&lt;span class='k'&gt;:&lt;/span&gt; &lt;span class='kt'&gt;Boolean&lt;/span&gt;
&lt;span class='lineno'&gt;7&lt;/span&gt;   &lt;span class='k'&gt;def&lt;/span&gt; &lt;span class='n'&gt;next&lt;/span&gt;&lt;span class='o'&gt;()&lt;/span&gt;&lt;span class='k'&gt;:&lt;/span&gt; &lt;span class='kt'&gt;T&lt;/span&gt;
&lt;span class='lineno'&gt;8&lt;/span&gt; &lt;span class='o'&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Iterable&lt;/em&gt; is an abstraction for all collections which can be stepped through one-by-one.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Iterator&lt;/em&gt; is a data structure (again, an abstraction) that allows to iterate over a sequence of elements. It has two methods - first for checking if there is a next element available, and second which returns the next element.&lt;/p&gt;

&lt;p&gt;So far, so good - we can explicitly see an intent and usage for such abstractions. It is readable at the first sight.&lt;/p&gt;

&lt;h1 id=&quot;observables&quot;&gt;Observables&lt;/h1&gt;

&lt;p&gt;Things can get complicated if we are dealing with asynchronous operations, which return a collection as well. &lt;em&gt;Iterables&lt;/em&gt; define only a collection of existing elements, not possible results.&lt;/p&gt;

&lt;p&gt;But we can introduce new abstractions. Let’s look at the example (again, written in &lt;em&gt;Scala&lt;/em&gt;):&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='scala'&gt;&lt;span class='lineno'&gt; 1&lt;/span&gt; &lt;span class='k'&gt;trait&lt;/span&gt; &lt;span class='nc'&gt;Observable&lt;/span&gt;&lt;span class='o'&gt;[&lt;/span&gt;&lt;span class='kt'&gt;T&lt;/span&gt;&lt;span class='o'&gt;]&lt;/span&gt; &lt;span class='o'&gt;{&lt;/span&gt;
&lt;span class='lineno'&gt; 2&lt;/span&gt;   &lt;span class='k'&gt;def&lt;/span&gt; &lt;span class='n'&gt;subscribe&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;observer&lt;/span&gt;&lt;span class='k'&gt;:&lt;/span&gt; &lt;span class='kt'&gt;Observer&lt;/span&gt;&lt;span class='o'&gt;[&lt;/span&gt;&lt;span class='kt'&gt;T&lt;/span&gt;&lt;span class='o'&gt;])&lt;/span&gt;&lt;span class='k'&gt;:&lt;/span&gt; &lt;span class='kt'&gt;Subscription&lt;/span&gt;
&lt;span class='lineno'&gt; 3&lt;/span&gt; &lt;span class='o'&gt;}&lt;/span&gt;
&lt;span class='lineno'&gt; 4&lt;/span&gt; 
&lt;span class='lineno'&gt; 5&lt;/span&gt; &lt;span class='k'&gt;trait&lt;/span&gt; &lt;span class='nc'&gt;Observer&lt;/span&gt;&lt;span class='o'&gt;[&lt;/span&gt;&lt;span class='kt'&gt;T&lt;/span&gt;&lt;span class='o'&gt;]&lt;/span&gt; &lt;span class='o'&gt;{&lt;/span&gt;
&lt;span class='lineno'&gt; 6&lt;/span&gt;   &lt;span class='k'&gt;def&lt;/span&gt; &lt;span class='n'&gt;onNext&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;value&lt;/span&gt;&lt;span class='k'&gt;:&lt;/span&gt; &lt;span class='kt'&gt;T&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt;&lt;span class='k'&gt;:&lt;/span&gt; &lt;span class='kt'&gt;Unit&lt;/span&gt;
&lt;span class='lineno'&gt; 7&lt;/span&gt;   &lt;span class='k'&gt;def&lt;/span&gt; &lt;span class='n'&gt;onError&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='n'&gt;error&lt;/span&gt;&lt;span class='k'&gt;:&lt;/span&gt; &lt;span class='kt'&gt;Throwable&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt;&lt;span class='k'&gt;:&lt;/span&gt; &lt;span class='kt'&gt;Unit&lt;/span&gt;
&lt;span class='lineno'&gt; 8&lt;/span&gt;   &lt;span class='k'&gt;def&lt;/span&gt; &lt;span class='n'&gt;onCompleted&lt;/span&gt;&lt;span class='o'&gt;()&lt;/span&gt;&lt;span class='k'&gt;:&lt;/span&gt; &lt;span class='kt'&gt;Unit&lt;/span&gt;
&lt;span class='lineno'&gt; 9&lt;/span&gt; &lt;span class='o'&gt;}&lt;/span&gt;
&lt;span class='lineno'&gt;10&lt;/span&gt; 
&lt;span class='lineno'&gt;11&lt;/span&gt; &lt;span class='k'&gt;trait&lt;/span&gt; &lt;span class='nc'&gt;Subscription&lt;/span&gt; &lt;span class='o'&gt;{&lt;/span&gt;
&lt;span class='lineno'&gt;12&lt;/span&gt;   &lt;span class='k'&gt;def&lt;/span&gt; &lt;span class='n'&gt;unsubscribe&lt;/span&gt;&lt;span class='o'&gt;()&lt;/span&gt;&lt;span class='k'&gt;:&lt;/span&gt; &lt;span class='kt'&gt;Unit&lt;/span&gt;
&lt;span class='lineno'&gt;13&lt;/span&gt; &lt;span class='o'&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We can compare these two concepts and definitely see similarities, such as that &lt;em&gt;Observable&lt;/em&gt; is similar to &lt;em&gt;Iterable&lt;/em&gt;. The same for &lt;em&gt;Observer&lt;/em&gt; - &lt;em&gt;Iterator&lt;/em&gt; pair. Also, we can easily spot an intent and usage here.&lt;/p&gt;

&lt;p&gt;But when we add a new &lt;em&gt;trait&lt;/em&gt; called &lt;em&gt;Subscription&lt;/em&gt;, there is a slight and subtle change in approach for &lt;em&gt;Observable&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;It receives an &lt;em&gt;Observer&lt;/em&gt; instance as an argument, instead of returning it as presented in the &lt;em&gt;Iterable&lt;/em&gt; / &lt;em&gt;Iterator&lt;/em&gt; approach.&lt;/p&gt;

&lt;p&gt;This subtle change has huge consequences in modelling and understanding these two abstractions. We trade the possibility of pulling things out from an &lt;em&gt;Iterable&lt;/em&gt; collection to pushing a model for the &lt;em&gt;Observable&lt;/em&gt; which will notify an &lt;em&gt;Observer&lt;/em&gt; that something appears, but not for free - we receive an ability to model an asynchronous operation which returns a collection of elements (in other words: we transformed from &lt;em&gt;pulling mode&lt;/em&gt; to the &lt;em&gt;pushing mode&lt;/em&gt;).&lt;/p&gt;

&lt;h1 id=&quot;power_of_expressiveness&quot;&gt;Power of expressiveness&lt;/h1&gt;

&lt;p&gt;What if this &lt;em&gt;Observable&lt;/em&gt; / &lt;em&gt;Iterable&lt;/em&gt; approach was to be presented in one line as a composite type?&lt;/p&gt;

&lt;p&gt;Ready? Superb, but first we will bring up two definitions.&lt;/p&gt;

&lt;h2 id=&quot;&quot;&gt;&lt;code&gt;Try[T]&lt;/code&gt;&lt;/h2&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='scala'&gt;&lt;span class='lineno'&gt;1&lt;/span&gt; &lt;span class='k'&gt;val&lt;/span&gt; &lt;span class='n'&gt;sumTry&lt;/span&gt; &lt;span class='k'&gt;=&lt;/span&gt; &lt;span class='k'&gt;for&lt;/span&gt; &lt;span class='o'&gt;{&lt;/span&gt;
&lt;span class='lineno'&gt;2&lt;/span&gt;   &lt;span class='n'&gt;int1&lt;/span&gt; &lt;span class='k'&gt;&amp;lt;-&lt;/span&gt; &lt;span class='nc'&gt;Try&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='nc'&gt;Integer&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;parseInt&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;1&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;))&lt;/span&gt;   &lt;span class='c1'&gt;// int1 is Success(1).&lt;/span&gt;
&lt;span class='lineno'&gt;3&lt;/span&gt;   &lt;span class='n'&gt;int2&lt;/span&gt; &lt;span class='k'&gt;&amp;lt;-&lt;/span&gt; &lt;span class='nc'&gt;Try&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='nc'&gt;Integer&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;parseInt&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;a&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;))&lt;/span&gt;   &lt;span class='c1'&gt;// int2 is Failure(...).&lt;/span&gt;
&lt;span class='lineno'&gt;4&lt;/span&gt; &lt;span class='o'&gt;}&lt;/span&gt; &lt;span class='k'&gt;yield&lt;/span&gt; &lt;span class='o'&gt;{&lt;/span&gt;
&lt;span class='lineno'&gt;5&lt;/span&gt;   &lt;span class='n'&gt;int1&lt;/span&gt; &lt;span class='o'&gt;+&lt;/span&gt; &lt;span class='n'&gt;int2&lt;/span&gt;
&lt;span class='lineno'&gt;6&lt;/span&gt; &lt;span class='o'&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;&lt;code&gt;Try&lt;/code&gt;&lt;/em&gt; is an analog for the &lt;code&gt;try...catch&lt;/code&gt; block. Instead of having an exception thrown and having to deal with it immediately in the same thread, it disconnects the error handling and recovery.&lt;/p&gt;

&lt;h2 id=&quot;_2&quot;&gt;&lt;code&gt;Option[T]&lt;/code&gt;&lt;/h2&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='scala'&gt;&lt;span class='lineno'&gt;1&lt;/span&gt; &lt;span class='k'&gt;val&lt;/span&gt; &lt;span class='n'&gt;optionResult&lt;/span&gt; &lt;span class='k'&gt;=&lt;/span&gt; &lt;span class='nc'&gt;Option&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='kc'&gt;null&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt;   &lt;span class='c1'&gt;// optionResult is None.&lt;/span&gt;
&lt;span class='lineno'&gt;2&lt;/span&gt; &lt;span class='k'&gt;val&lt;/span&gt; &lt;span class='n'&gt;optionResult2&lt;/span&gt; &lt;span class='k'&gt;=&lt;/span&gt; &lt;span class='nc'&gt;Option&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt;     &lt;span class='c1'&gt;// optionResult2 is Some(1).&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;&lt;code&gt;Option&lt;/code&gt;&lt;/em&gt; represents optional values, returning an instance of &lt;em&gt;&lt;code&gt;Some(A)&lt;/code&gt;&lt;/em&gt; if &lt;code&gt;A&lt;/code&gt; exists, or &lt;em&gt;&lt;code&gt;None&lt;/code&gt;&lt;/em&gt; if it does not.&lt;/p&gt;

&lt;h2 id=&quot;composition&quot;&gt;Composition&lt;/h2&gt;

&lt;p&gt;The same abstraction, of &lt;em&gt;Observable&lt;/em&gt; can be built on top of &lt;em&gt;Iterable&lt;/em&gt; and a simple type, which is a composite of two previously explained elements:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='scala'&gt;&lt;span class='k'&gt;val&lt;/span&gt; &lt;span class='n'&gt;collection&lt;/span&gt;&lt;span class='k'&gt;:&lt;/span&gt; &lt;span class='kt'&gt;Iterable&lt;/span&gt;&lt;span class='o'&gt;[&lt;/span&gt;&lt;span class='kt'&gt;Try&lt;/span&gt;&lt;span class='o'&gt;[&lt;/span&gt;&lt;span class='kt'&gt;Option&lt;/span&gt;&lt;span class='o'&gt;[&lt;/span&gt;&lt;span class='kt'&gt;T&lt;/span&gt;&lt;span class='o'&gt;]]]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It’s a sequence which introduces the same abstraction, but definitely loses the intent. Usage is not visible at the first glance as well (how are we communicating that something changed?).&lt;/p&gt;

&lt;h1 id=&quot;summary&quot;&gt;Summary&lt;/h1&gt;

&lt;p&gt;The whole point of this article is to illustrate that intent and usage can be provided by certain abstractions. Of course, these abstractions can be verbose and seem unnecessary at first sight, but if we chase expressiveness, and introduce it out of hand we will loose details and initial intent.&lt;/p&gt;

&lt;p&gt;The post is strongly inspired by &lt;em&gt;Coursera&lt;/em&gt; course &lt;em&gt;“Principles of Reactive Programming”&lt;/em&gt; provided by courtesy of &lt;em&gt;Erik Meijer&lt;/em&gt;, &lt;em&gt;Martin Odersky&lt;/em&gt; and &lt;em&gt;Roland Kuhn&lt;/em&gt;.&lt;/p&gt;

&lt;h1 id=&quot;references&quot;&gt;References&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://www.coursera.org/course/reactive&quot;&gt;Coursera - Principles of Reactive Programming&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Tue, 17 Dec 2013 21:45:00 +0000</pubDate>
        <link>http://www.afronski.pl/2013/12/17/with-great-power-comes-great-responsibility.html</link>
        <guid isPermaLink="true">http://www.afronski.pl/2013/12/17/with-great-power-comes-great-responsibility.html</guid>
      </item>
    
      <item>
        <title>Node.js evolution</title>
        <description>
&lt;h1 id=&quot;nodejs_evolution&quot;&gt;Node.js evolution&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;/assets/NodeJsLogo.png&quot; alt=&quot;Node.js logo&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Node.js&lt;/em&gt; in blessed, &lt;em&gt;enterprise&lt;/em&gt; version &lt;code&gt;1.0&lt;/code&gt; comes faster then you might have expected (look at the first link in references - Isaac said that &lt;code&gt;0.12&lt;/code&gt; is the last version before the final release). What will the future bring us?&lt;/p&gt;

&lt;p&gt;Bert Belder’s talk on LXJS 2013 gives us a small overview about what is to come. It obviously has a provocative first slide and title, but the point still stands - what should we expect from &lt;em&gt;Node.js &lt;code&gt;2.0&lt;/code&gt;&lt;/em&gt; ?&lt;/p&gt;

&lt;h1 id=&quot;tasks&quot;&gt;Tasks&lt;/h1&gt;

&lt;p&gt;One nifty concept, called &lt;em&gt;Asynchronous Tasks&lt;/em&gt;, was presented in the talk.&lt;/p&gt;

&lt;p&gt;It was presented as an asynchronous &lt;code&gt;try...catch&lt;/code&gt; block without changing the language syntax and semantics. Let’s look at the initial representation:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='javascript'&gt;&lt;span class='lineno'&gt; 1&lt;/span&gt; &lt;span class='nx'&gt;task&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;create&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='kd'&gt;function&lt;/span&gt; &lt;span class='nx'&gt;concatTwoFilesAndThenSomeTask&lt;/span&gt;&lt;span class='p'&gt;()&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
&lt;span class='lineno'&gt; 2&lt;/span&gt; 
&lt;span class='lineno'&gt; 3&lt;/span&gt;   &lt;span class='nx'&gt;fs&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;readFile&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;some/template&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;utf8&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='kd'&gt;function&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;error&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nx'&gt;file1&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
&lt;span class='lineno'&gt; 4&lt;/span&gt; 
&lt;span class='lineno'&gt; 5&lt;/span&gt;     &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;error&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
&lt;span class='lineno'&gt; 6&lt;/span&gt;       &lt;span class='k'&gt;throw&lt;/span&gt; &lt;span class='nx'&gt;error&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='lineno'&gt; 7&lt;/span&gt;     &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='lineno'&gt; 8&lt;/span&gt; 
&lt;span class='lineno'&gt; 9&lt;/span&gt;     &lt;span class='nx'&gt;fs&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;readFile&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;something/else&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;utf8&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='kd'&gt;function&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;error&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nx'&gt;file2&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
&lt;span class='lineno'&gt;10&lt;/span&gt; 
&lt;span class='lineno'&gt;11&lt;/span&gt;       &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;error&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
&lt;span class='lineno'&gt;12&lt;/span&gt;         &lt;span class='k'&gt;throw&lt;/span&gt; &lt;span class='nx'&gt;error&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='lineno'&gt;13&lt;/span&gt;       &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='lineno'&gt;14&lt;/span&gt; 
&lt;span class='lineno'&gt;15&lt;/span&gt;       &lt;span class='kd'&gt;var&lt;/span&gt; &lt;span class='nx'&gt;data&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='nx'&gt;file1&lt;/span&gt; &lt;span class='o'&gt;+&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;--&amp;quot;&lt;/span&gt; &lt;span class='o'&gt;+&lt;/span&gt; &lt;span class='nx'&gt;file2&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='lineno'&gt;16&lt;/span&gt; 
&lt;span class='lineno'&gt;17&lt;/span&gt;       &lt;span class='nx'&gt;data&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='nx'&gt;data&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;replace&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='sr'&gt;/foo/g&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;bar&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='lineno'&gt;18&lt;/span&gt;       &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='nx'&gt;data&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='lineno'&gt;19&lt;/span&gt;     &lt;span class='p'&gt;});&lt;/span&gt;
&lt;span class='lineno'&gt;20&lt;/span&gt; 
&lt;span class='lineno'&gt;21&lt;/span&gt;   &lt;span class='p'&gt;});&lt;/span&gt;
&lt;span class='lineno'&gt;22&lt;/span&gt; 
&lt;span class='lineno'&gt;23&lt;/span&gt; &lt;span class='p'&gt;}).&lt;/span&gt;&lt;span class='nx'&gt;setCallback&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='kd'&gt;function&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;error&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nx'&gt;result&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
&lt;span class='lineno'&gt;24&lt;/span&gt; 
&lt;span class='lineno'&gt;25&lt;/span&gt;   &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;error&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
&lt;span class='lineno'&gt;26&lt;/span&gt;     &lt;span class='k'&gt;throw&lt;/span&gt; &lt;span class='nx'&gt;error&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='lineno'&gt;27&lt;/span&gt;   &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='lineno'&gt;28&lt;/span&gt; 
&lt;span class='lineno'&gt;29&lt;/span&gt;   &lt;span class='c1'&gt;// Do something with the result.&lt;/span&gt;
&lt;span class='lineno'&gt;30&lt;/span&gt; &lt;span class='p'&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Of course it is a simple concept, which ignores many thing e.g. &lt;code&gt;EventEmitter&lt;/code&gt;. But it also gives us many things e.g. meaningful stack traces with asynchronous operations or handling errors of composite asynchronous operations in one place.&lt;/p&gt;

&lt;p&gt;I know that there exist modules which can do that (like &lt;a href=&quot;https://github.com/caolan/async&quot;&gt;async&lt;/a&gt;), but having it built into the platform seems very interesting and brings other capabilities (e.g. under-the-hood optimization) which the additional modules do not have.&lt;/p&gt;

&lt;p&gt;The whole concept has evolved into something called by Bert a &lt;code&gt;domains2&lt;/code&gt; module. You can find details in references.&lt;/p&gt;

&lt;h1 id=&quot;what_else&quot;&gt;What else?&lt;/h1&gt;

&lt;p&gt;We have to remember that the world will not stay in place and will evolve. And &lt;em&gt;Node.js&lt;/em&gt; in the blessed, &lt;em&gt;enterprise&lt;/em&gt; version has to evolve too. The owners are the pushing platform in the right direction and I totally agree that &lt;em&gt;Node.js&lt;/em&gt; should have a thin core as it has right now. However, there are definitely many things which can land in it.&lt;/p&gt;

&lt;p&gt;How about:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Supporting new protocols:
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://tools.ietf.org/html/draft-ietf-httpbis-http2-04&quot;&gt;HTTP 2.0&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href=&quot;http://tools.ietf.org/html/draft-ietf-httpbis-http2-00&quot;&gt;SPDY&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href=&quot;http://tools.ietf.org/html/rfc5389&quot;&gt;STUN&lt;/a&gt; and &lt;a href=&quot;http://tools.ietf.org/html/rfc5766&quot;&gt;TURN&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;

&lt;li&gt;Supporting old ones, as well:
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.ietf.org/rfc/rfc1157.txt&quot;&gt;SNMP&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;

&lt;li&gt;Adding more load balancing algorithms to the &lt;em&gt;&lt;code&gt;cluster&lt;/code&gt;&lt;/em&gt; module (&lt;a href=&quot;http://strongloop.com/strongblog/whats-new-in-node-js-v0-12-cluster-round-robin-load-balancing/&quot;&gt;Round-Robin was recently added in &lt;code&gt;0.12&lt;/code&gt;&lt;/a&gt;).&lt;/li&gt;

&lt;li&gt;Adding supervision mechanisms (like the ones we have in &lt;a href=&quot;http://www.erlang.org/doc/design_principles/sup_princ.html&quot;&gt;Erlang and OTP&lt;/a&gt;)&lt;/li&gt;

&lt;li&gt;Supporting mesh topology (like in &lt;a href=&quot;https://github.com/dominictarr/scuttlebutt&quot;&gt;this module&lt;/a&gt;).&lt;/li&gt;

&lt;li&gt;Solving problems with &lt;em&gt;&lt;code&gt;NPM&lt;/code&gt;&lt;/em&gt; and keeping it &lt;em&gt;awesome&lt;/em&gt; (by providing &lt;a href=&quot;http://npmjs.eu/&quot;&gt;mirrors&lt;/a&gt; or &lt;a href=&quot;https://scalenpm.org/&quot;&gt;scaling it&lt;/a&gt; and &lt;a href=&quot;http://blog.nodejs.org/2013/11/26/npm-post-mortem/&quot;&gt;decentralizing&lt;/a&gt;).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The reported enhancements are just the tip of the iceberg and even you can expand this list. I encourage you to subscribe to &lt;em&gt;Node.js&lt;/em&gt; &lt;a href=&quot;https://groups.google.com/forum/#!forum/nodejs&quot;&gt;mailing list&lt;/a&gt; and then observe, learn, share ideas and experience, discuss.&lt;/p&gt;

&lt;p&gt;I encourage you to be a conscious and active member of the community, maybe involve in some initiatives mentioned above, like mirroring or scaling the &lt;em&gt;&lt;code&gt;NPM&lt;/code&gt;&lt;/em&gt; etc.&lt;/p&gt;

&lt;p&gt;The future looks promising only with the platform evolving with it - and evolution depends only on us.&lt;/p&gt;

&lt;h1 id=&quot;references&quot;&gt;References&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://www.youtube.com/watch?v=82hJbjqbIt4&quot;&gt;Isaac Shlueter - The Road to Node.js v1.0&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href=&quot;http://www.youtube.com/watch?v=QnO6Uut4Ao8&quot;&gt;Bert Belder - Node.js 2.0 (LXJS 2013)&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href=&quot;https://gist.github.com/piscisaureus/7454729&quot;&gt;&lt;code&gt;domains2&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href=&quot;http://blog.nodejs.org/2011/07/11/evolving-the-node-js-brand/&quot;&gt;Node.js Logo&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Fri, 06 Dec 2013 18:15:00 +0000</pubDate>
        <link>http://www.afronski.pl/2013/12/06/nodejs-evolution.html</link>
        <guid isPermaLink="true">http://www.afronski.pl/2013/12/06/nodejs-evolution.html</guid>
      </item>
    
      <item>
        <title>Let's talk about memory</title>
        <description>
&lt;h1 id=&quot;lets_talk_&quot;&gt;Let’s talk &lt;code&gt;about:memory&lt;/code&gt;&lt;/h1&gt;

&lt;p&gt;Recently on polish Facebook group &lt;em&gt;JSNews&lt;/em&gt;, thanks to &lt;a href=&quot;https://twitter.com/zbraniecki&quot;&gt;Zbigniew Braniecki&lt;/a&gt;, I found a very useful tool for monitoring memory in Firefox - &lt;code&gt;about:memory&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/AboutMemoryOverview.png&quot; alt=&quot;Overview for about:memory&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You can open it by typing &lt;code&gt;about:memory&lt;/code&gt; in your address bar. It has capabilities to measure memory usage at browser level, load and save dumps (as a gzipped &lt;em&gt;&lt;code&gt;JSON&lt;/code&gt;&lt;/em&gt; file), compare them and force garbage and cycle collection.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/AboutMemoryDiff.png&quot; alt=&quot;Difference for two memory dumps&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I strongly encourage you to dive into that tool, especially if you like me, thought that &lt;em&gt;Firefox&lt;/em&gt; hasn’t got any tools for memory profiling. Well, not the first time I’m wrong :wink:.&lt;/p&gt;

&lt;p&gt;P.S. On screenshots you can observe new UI for &lt;em&gt;Firefox&lt;/em&gt;, called &lt;em&gt;Australis&lt;/em&gt; - what do you think about it? Share your opinion in comments.&lt;/p&gt;
</description>
        <pubDate>Wed, 27 Nov 2013 23:35:00 +0000</pubDate>
        <link>http://www.afronski.pl/2013/11/27/lets-talk-about-memory.html</link>
        <guid isPermaLink="true">http://www.afronski.pl/2013/11/27/lets-talk-about-memory.html</guid>
      </item>
    
      <item>
        <title>Mysterious problem with missing name of the active virtualenv</title>
        <description>
&lt;h1 id=&quot;mysterious_problem_with_missing_name_of_the_active_&quot;&gt;Mysterious problem with missing name of the active &lt;code&gt;virtualenv&lt;/code&gt;&lt;/h1&gt;

&lt;p&gt;Recently I have ran into an issue related to &lt;code&gt;virtualenv&lt;/code&gt; and my shell. It did not display name of the active &lt;code&gt;virtualenv&lt;/code&gt; after invoking the standard command:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='bash'&gt;&lt;span class='nb'&gt;source &lt;/span&gt;bin/activate
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;However, everything works perfectly without that (even a &lt;code&gt;deactivate&lt;/code&gt; command). This little thing makes me nervous so I have started looking for a solution to that problem.&lt;/p&gt;

&lt;p&gt;After a while I found the reason why it does not work:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='bash'&gt;&lt;span class='lineno'&gt;1&lt;/span&gt; &lt;span class='k'&gt;function &lt;/span&gt;calculate_prompt&lt;span class='o'&gt;()&lt;/span&gt; &lt;span class='o'&gt;{&lt;/span&gt;
&lt;span class='lineno'&gt;2&lt;/span&gt;   &lt;span class='c'&gt;# Beautifying the prompt ;).&lt;/span&gt;
&lt;span class='lineno'&gt;3&lt;/span&gt; &lt;span class='o'&gt;}&lt;/span&gt;
&lt;span class='lineno'&gt;4&lt;/span&gt; 
&lt;span class='lineno'&gt;5&lt;/span&gt; &lt;span class='nv'&gt;PROMPT_COMMAND&lt;/span&gt;&lt;span class='o'&gt;=&lt;/span&gt;calculate_prompt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Yeah&lt;/em&gt;, I totally forgot about the fact that I am using &lt;code&gt;PROMPT_COMMAND&lt;/code&gt;. Right now, when I know the reason, the solution is a piece of cake - just add the code for displaying &lt;em&gt;&lt;code&gt;virtualenv&lt;/code&gt;&lt;/em&gt; name to the function which calculates the prompt:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='bash'&gt;&lt;span class='lineno'&gt; 1&lt;/span&gt; &lt;span class='k'&gt;function &lt;/span&gt;calculate_prompt&lt;span class='o'&gt;()&lt;/span&gt; &lt;span class='o'&gt;{&lt;/span&gt;
&lt;span class='lineno'&gt; 2&lt;/span&gt;   &lt;span class='c'&gt;# Beautifying the prompt ;).&lt;/span&gt;
&lt;span class='lineno'&gt; 3&lt;/span&gt;   &lt;span class='c'&gt;# ...&lt;/span&gt;
&lt;span class='lineno'&gt; 4&lt;/span&gt; 
&lt;span class='lineno'&gt; 5&lt;/span&gt;   &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='o'&gt;[&lt;/span&gt; -z &lt;span class='s2'&gt;&amp;quot;$VIRTUAL_ENV_DISABLE_PROMPT&amp;quot;&lt;/span&gt; &lt;span class='o'&gt;]&lt;/span&gt; ; &lt;span class='k'&gt;then&lt;/span&gt;
&lt;span class='lineno'&gt; 6&lt;/span&gt; &lt;span class='k'&gt;    &lt;/span&gt;&lt;span class='nv'&gt;_OLD_VIRTUAL_PS1&lt;/span&gt;&lt;span class='o'&gt;=&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;$PS1&amp;quot;&lt;/span&gt;
&lt;span class='lineno'&gt; 7&lt;/span&gt; 
&lt;span class='lineno'&gt; 8&lt;/span&gt;     &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='o'&gt;[&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;x&amp;quot;&lt;/span&gt; !&lt;span class='o'&gt;=&lt;/span&gt; x &lt;span class='o'&gt;]&lt;/span&gt; ; &lt;span class='k'&gt;then&lt;/span&gt;
&lt;span class='lineno'&gt; 9&lt;/span&gt; &lt;span class='k'&gt;        &lt;/span&gt;&lt;span class='nv'&gt;PS1&lt;/span&gt;&lt;span class='o'&gt;=&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;$PS1&amp;quot;&lt;/span&gt;
&lt;span class='lineno'&gt;10&lt;/span&gt;     &lt;span class='k'&gt;else&lt;/span&gt;
&lt;span class='lineno'&gt;11&lt;/span&gt; &lt;span class='k'&gt;      if&lt;/span&gt; &lt;span class='o'&gt;[&lt;/span&gt; ! -z &lt;span class='s2'&gt;&amp;quot;$VIRTUAL_ENV&amp;quot;&lt;/span&gt; &lt;span class='o'&gt;]&lt;/span&gt; ; &lt;span class='k'&gt;then&lt;/span&gt;
&lt;span class='lineno'&gt;12&lt;/span&gt; &lt;span class='k'&gt;        if&lt;/span&gt; &lt;span class='o'&gt;[&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;`basename \&amp;quot;$VIRTUAL_ENV\&amp;quot;`&amp;quot;&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;__&amp;quot;&lt;/span&gt; &lt;span class='o'&gt;]&lt;/span&gt; ; &lt;span class='k'&gt;then&lt;/span&gt;
&lt;span class='lineno'&gt;13&lt;/span&gt; &lt;span class='k'&gt;          &lt;/span&gt;&lt;span class='nv'&gt;PS1&lt;/span&gt;&lt;span class='o'&gt;=&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;`basename \`dirname \&amp;quot;$VIRTUAL_ENV\&amp;quot;\``: $PS1&amp;quot;&lt;/span&gt;
&lt;span class='lineno'&gt;14&lt;/span&gt;         &lt;span class='k'&gt;else&lt;/span&gt;
&lt;span class='lineno'&gt;15&lt;/span&gt; &lt;span class='k'&gt;          &lt;/span&gt;&lt;span class='nv'&gt;PS1&lt;/span&gt;&lt;span class='o'&gt;=&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;`basename $VIRTUAL_ENV`: $PS1&amp;quot;&lt;/span&gt;
&lt;span class='lineno'&gt;16&lt;/span&gt;         &lt;span class='k'&gt;fi&lt;/span&gt;
&lt;span class='lineno'&gt;17&lt;/span&gt; &lt;span class='k'&gt;      fi&lt;/span&gt;
&lt;span class='lineno'&gt;18&lt;/span&gt; &lt;span class='k'&gt;    fi&lt;/span&gt;
&lt;span class='lineno'&gt;19&lt;/span&gt; &lt;span class='k'&gt;  fi&lt;/span&gt;
&lt;span class='lineno'&gt;20&lt;/span&gt; &lt;span class='o'&gt;}&lt;/span&gt;
&lt;span class='lineno'&gt;21&lt;/span&gt; 
&lt;span class='lineno'&gt;22&lt;/span&gt; &lt;span class='nv'&gt;PROMPT_COMMAND&lt;/span&gt;&lt;span class='o'&gt;=&lt;/span&gt;calculate_prompt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And it is fixed! :wink:&lt;/p&gt;
</description>
        <pubDate>Wed, 13 Nov 2013 18:20:00 +0000</pubDate>
        <link>http://www.afronski.pl/2013/11/13/mysterious-problem-with-missing-name-of-the-active-virtualenv.html</link>
        <guid isPermaLink="true">http://www.afronski.pl/2013/11/13/mysterious-problem-with-missing-name-of-the-active-virtualenv.html</guid>
      </item>
    
      <item>
        <title>Differences between nohup and ampersand</title>
        <description>
&lt;h1 id=&quot;differences_between__and_the_ampersand&quot;&gt;Differences between &lt;code&gt;nohup&lt;/code&gt; and the ampersand&lt;/h1&gt;

&lt;p&gt;There are many cases when &lt;em&gt;small differences&lt;/em&gt; between environments can bite you. This is one into which I have ran recently. What is the difference between these two commands?&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='bash'&gt;&lt;span class='lineno'&gt;1&lt;/span&gt; ~ &lt;span class='nv'&gt;$ &lt;/span&gt;nohup myprocess.out &amp;amp;
&lt;span class='lineno'&gt;2&lt;/span&gt; ~ &lt;span class='nv'&gt;$ &lt;/span&gt;myprocess.out &amp;amp;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The answer is the same as usual - &lt;em&gt;it depends&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;nohup&lt;/code&gt; catches the hangup signal while the ampersand does not.&lt;/p&gt;

&lt;p&gt;What is the hangup signal?&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;code&gt;SIGHUP&lt;/code&gt; - hangup detected on controlling terminal or death of controlling process (value: 1).&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Normally, when running a command using &lt;code&gt;&amp;amp;&lt;/code&gt; and exiting the shell afterwards, the shell will terminate the sub-command with the hangup signal (like &lt;code&gt;kill -SIGHUP $PID&lt;/code&gt;). This can be prevented using nohup, as it catches the signal and ignores it so that it never reaches the actual application.&lt;/p&gt;

&lt;p&gt;Fine, but like in this case there are always &lt;em&gt;‘buts’&lt;/em&gt;. There is no difference between these launching methods when the shell is configured in a way where it does not send &lt;code&gt;SIGHUP&lt;/code&gt; at all.&lt;/p&gt;

&lt;p&gt;In case you are using bash, you can use the command specified below to find out whether your shell sends &lt;em&gt;&lt;code&gt;SIGHUP&lt;/code&gt;&lt;/em&gt; to its child processes or not:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='bash'&gt;~ &lt;span class='nv'&gt;$ &lt;/span&gt;&lt;span class='nb'&gt;shopt&lt;/span&gt; | grep hupon
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And moreover - there are cases where nohup does not work. For example, when the process you start reconnects the &lt;code&gt;NOHUP&lt;/code&gt; signal (it is done inside, on the application code level).&lt;/p&gt;

&lt;p&gt;In the described case, lack of differences bit me when inside a custom service launching script there was a call to a second script which sets up and launches the proper application &lt;em&gt;without a &lt;code&gt;nohup&lt;/code&gt; command&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;On one Linux environment everything worked smoothly, on a second one the application quit as soon as the second script exited (detecting that case, of course took me much more time then you might think :stuck_out_tongue:).&lt;/p&gt;

&lt;p&gt;After adding &lt;code&gt;nohup&lt;/code&gt; as a launching method to second script, application keeps running even if the scripts will exit and this behavior became consistent on both environments.&lt;/p&gt;

&lt;h1 id=&quot;references&quot;&gt;References&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://unixhelp.ed.ac.uk/CGI/man-cgi?signal+7&quot;&gt;&lt;code&gt;man 7 signal&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Thu, 07 Nov 2013 18:45:00 +0000</pubDate>
        <link>http://www.afronski.pl/2013/11/07/differences-between-nohup-and-the-ampersand.html</link>
        <guid isPermaLink="true">http://www.afronski.pl/2013/11/07/differences-between-nohup-and-the-ampersand.html</guid>
      </item>
    
      <item>
        <title>Low-level Node.js debugging on production</title>
        <description>
&lt;h1 id=&quot;lowlevel_nodejs_debugging_on_production&quot;&gt;Low-level Node.js debugging on production&lt;/h1&gt;

&lt;p&gt;Sometimes when you want to run your Node.js application on production environment, you will receive:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='bash'&gt;node-stuff &lt;span class='nv'&gt;$ &lt;/span&gt;node index.js
Segmentation fault
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Yeah… and &lt;em&gt;now&lt;/em&gt; what?&lt;/p&gt;

&lt;p&gt;Welcome to the dungeon, &lt;em&gt;DevOps&lt;/em&gt; marine :grin:.&lt;/p&gt;

&lt;p&gt;First of all, if you deployed an application on an &lt;em&gt;OS&lt;/em&gt; different than &lt;em&gt;SmartOS&lt;/em&gt;, you lost the ability to use many impressive tools which could definitely help you in that case (the most impressive ones are &lt;code&gt;mdb&lt;/code&gt; and &lt;code&gt;dtrace&lt;/code&gt;, you can find details in the references section of this post).&lt;/p&gt;

&lt;p&gt;So there is no &lt;em&gt;&lt;code&gt;mdb&lt;/code&gt;&lt;/em&gt;, no &lt;em&gt;&lt;code&gt;dtrace&lt;/code&gt;&lt;/em&gt;, no &lt;em&gt;SmartOS&lt;/em&gt;. You can’t also use your favorite debugger like &lt;a href=&quot;https://trace.gl/&quot;&gt;trace.gl&lt;/a&gt;, &lt;a href=&quot;https://github.com/jwarkentin/node-monkey&quot;&gt;node-monkey&lt;/a&gt; or &lt;a href=&quot;https://github.com/node-inspector/node-inspector&quot;&gt;node-inspector&lt;/a&gt;. You have got only &lt;code&gt;gdb&lt;/code&gt; and your brain filled with low-level computer knowledge :wink:.&lt;/p&gt;

&lt;p&gt;Before you dive deeper into the internals of your application, let’s begin the voodoo that is the process of setting the proper options in your &lt;em&gt;OS&lt;/em&gt;. First you will remove the limit related with the &lt;em&gt;core dump&lt;/em&gt; size:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='bash'&gt;~ &lt;span class='nv'&gt;$ &lt;/span&gt;sudo &lt;span class='nb'&gt;ulimit&lt;/span&gt; -c unlimited
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Next, you set different path for these files (remember to put them on a partition with a huge amount of the free disk space):&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='bash'&gt;~ &lt;span class='nv'&gt;$ &lt;/span&gt;&lt;span class='nb'&gt;echo&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;/tmp/core_%e.%p&amp;#39;&lt;/span&gt; | sudo tee /proc/sys/kernel/core_pattern
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then, if you are using native Node.js extensions you have to recompile them with the debugging flag &lt;em&gt;&lt;code&gt;-g&lt;/code&gt;&lt;/em&gt; (configuration file taken from the &lt;em&gt;&lt;code&gt;node_xslt&lt;/code&gt;&lt;/em&gt; module):&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='javascript'&gt;&lt;span class='p'&gt;{&lt;/span&gt;
  &lt;span class='s2'&gt;&amp;quot;targets&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='p'&gt;[{&lt;/span&gt;
    &lt;span class='s2'&gt;&amp;quot;target_name&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;node_xslt&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
    &lt;span class='s2'&gt;&amp;quot;sources&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;node_xslt.cc&amp;quot;&lt;/span&gt; &lt;span class='p'&gt;],&lt;/span&gt;

    &lt;span class='s2'&gt;&amp;quot;cflags&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;
      &lt;span class='s2'&gt;&amp;quot;&amp;lt;!(xml2-config --cflags)&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
      &lt;span class='s2'&gt;&amp;quot;-fexceptions&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;

      &lt;span class='s2'&gt;&amp;quot;-g&amp;quot;&lt;/span&gt;
    &lt;span class='p'&gt;],&lt;/span&gt;

    &lt;span class='s2'&gt;&amp;quot;cflags_cc&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;
      &lt;span class='s2'&gt;&amp;quot;&amp;lt;!(xml2-config --cflags)&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
      &lt;span class='s2'&gt;&amp;quot;-fexceptions&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;

      &lt;span class='s2'&gt;&amp;quot;-g&amp;quot;&lt;/span&gt;
    &lt;span class='p'&gt;],&lt;/span&gt;

    &lt;span class='s2'&gt;&amp;quot;xcode_settings&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
      &lt;span class='s2'&gt;&amp;quot;OTHER_CFLAGS&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;
        &lt;span class='s2'&gt;&amp;quot;&amp;lt;!(xml2-config --cflags)&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
        &lt;span class='s2'&gt;&amp;quot;-fexceptions&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;

        &lt;span class='s2'&gt;&amp;quot;-g&amp;quot;&lt;/span&gt;
      &lt;span class='p'&gt;]&lt;/span&gt;
    &lt;span class='p'&gt;},&lt;/span&gt;
    &lt;span class='s2'&gt;&amp;quot;libraries&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;-lxml2&amp;quot;&lt;/span&gt; &lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;-lxslt&amp;quot;&lt;/span&gt; &lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;-lexslt&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;],&lt;/span&gt;
    &lt;span class='s2'&gt;&amp;quot;library_dirs&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;/usr/lib&amp;quot;&lt;/span&gt; &lt;span class='p'&gt;]&lt;/span&gt;
  &lt;span class='p'&gt;}]&lt;/span&gt;
&lt;span class='p'&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then, look at the dependencies (in our case &lt;code&gt;libxslt&lt;/code&gt;, &lt;code&gt;libxml2&lt;/code&gt;) and reinstall them in the development version (sometimes marked with a &lt;code&gt;-devel&lt;/code&gt; postfix).&lt;/p&gt;

&lt;p&gt;After modifications and installing dependencies in the &lt;em&gt;debugging mode&lt;/em&gt;, you have to run installation process inside the directory of the modified module (but only there, not on the upper level, because it will remove our changes in the modified module):&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='bash'&gt;node_xslt &lt;span class='nv'&gt;$ &lt;/span&gt;npm install --verbose
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Somewhere inside the long output you will find information about flags used in compilation process (and you should see a &lt;em&gt;&lt;code&gt;-g&lt;/code&gt;&lt;/em&gt; flag, responsible for attaching debugging informations).&lt;/p&gt;

&lt;p&gt;Next, you have to simulate again situation with &lt;em&gt;&lt;code&gt;Segmentation fault&lt;/code&gt;&lt;/em&gt; behavior. When application receive unwanted signal, it will dump file with the &lt;em&gt;post-mortem&lt;/em&gt; internal structure, ready for using inside &lt;code&gt;gdb&lt;/code&gt;:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='bash'&gt;~ &lt;span class='nv'&gt;$ &lt;/span&gt;gdb /usr/bin/node /tmp/core_XXX.YYY
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And now you are inside the belly of the monster, so you can move around:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='bash'&gt;...
Program received signal SIGSEGV, Segmentation fault.

&lt;span class='o'&gt;(&lt;/span&gt;gdb&lt;span class='o'&gt;)&lt;/span&gt; bt
&lt;span class='c'&gt;# It shows the stack trace (but from the native code).&lt;/span&gt;
&lt;span class='o'&gt;(&lt;/span&gt;gdb&lt;span class='o'&gt;)&lt;/span&gt; print V8_Fatal&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;a&amp;quot;&lt;/span&gt;, 11, &lt;span class='s2'&gt;&amp;quot;c&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt;
&lt;span class='c'&gt;# It shows the stack trace inside V8.&lt;/span&gt;
&lt;span class='c'&gt;# Values &amp;quot;a&amp;quot;, 11 and &amp;quot;c&amp;quot; are irrelevant.&lt;/span&gt;
&lt;span class='o'&gt;(&lt;/span&gt;gdb&lt;span class='o'&gt;)&lt;/span&gt; quit
&lt;span class='c'&gt;# It exits gdb.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you want to attach to the running process, you have to invoke the command specified below:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='bash'&gt;~ &lt;span class='nv'&gt;$ &lt;/span&gt;gdb attach &lt;span class='k'&gt;$(&lt;/span&gt;pidof node&lt;span class='k'&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;However, if your application is running in a cluster mode (or you are running more than one Node.js application on your machine), this will fail and instead of &lt;em&gt;&lt;code&gt;pidof&lt;/code&gt;&lt;/em&gt; you have to pass a single &lt;em&gt;PID&lt;/em&gt; value (from one application, master or one of the slaves, depends on what is interesting for you).&lt;/p&gt;

&lt;p&gt;You can also run &lt;em&gt;&lt;code&gt;strace&lt;/code&gt;&lt;/em&gt; in order to determine which system calls does your program invoke before &lt;em&gt;death&lt;/em&gt;:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='bash'&gt;~ &lt;span class='nv'&gt;$ &lt;/span&gt;strace -ttT
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After gathering a certain amount of knowledge, armed with the stack traces, system call invocations and the memory footprint you have to &lt;em&gt;dig deeper&lt;/em&gt; into the actual application code and maybe try to reproduce that behavior in a more &lt;em&gt;debuggable&lt;/em&gt; environment :wink:.&lt;/p&gt;

&lt;h1 id=&quot;references&quot;&gt;References&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://dtrace.org/blogs/dap/2012/01/13/playing-with-nodev8-postmortem-debugging&quot;&gt;Using &lt;code&gt;mdb&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href=&quot;http://dtrace.org/blogs/dap/2012/01/05/where-does-your-node-program-spend-its-time&quot;&gt;Using &lt;code&gt;dtrace&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href=&quot;http://linux.die.net/man/3/ulimit&quot;&gt;&lt;code&gt;ulimit&lt;/code&gt; man pages&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href=&quot;https://github.com/bsuh/node_xslt&quot;&gt;node_xslt&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href=&quot;http://linux.die.net/man/1/strace&quot;&gt;&lt;code&gt;strace&lt;/code&gt; man pages&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Sat, 02 Nov 2013 10:45:00 +0000</pubDate>
        <link>http://www.afronski.pl/2013/11/02/low-level-nodejs-debugging-on-production.html</link>
        <guid isPermaLink="true">http://www.afronski.pl/2013/11/02/low-level-nodejs-debugging-on-production.html</guid>
      </item>
    
      <item>
        <title>Tips and tricks for chef-solo and vagrant</title>
        <description>
&lt;h1 id=&quot;tips_and_tricks_for_chefsolo_and_vagrant&quot;&gt;Tips and tricks for chef-solo and vagrant&lt;/h1&gt;

&lt;p&gt;In your daily work at the kitchen sink :wink:, sometimes you have to be a &lt;em&gt;plumber&lt;/em&gt; and get dirty. In order to do that you have to be familiar with the concept of debugging &lt;em&gt;vagrant&lt;/em&gt;, &lt;em&gt;chef-solo&lt;/em&gt; and some other useful tricks.&lt;/p&gt;

&lt;h2 id=&quot;debugging_vagrant&quot;&gt;Debugging vagrant&lt;/h2&gt;

&lt;p&gt;If you want to enable a verbose mode for &lt;em&gt;vagrant&lt;/em&gt;, you need to set the environment variable &lt;code&gt;VAGRANT_LOG&lt;/code&gt; to &lt;code&gt;DEBUG&lt;/code&gt; or &lt;code&gt;INFO&lt;/code&gt; value, as in the example below:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='bash'&gt;~ &lt;span class='nv'&gt;$ VAGRANT_LOG&lt;/span&gt;&lt;span class='o'&gt;=&lt;/span&gt;DEBUG vagrant up
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;debugging_chefsolo&quot;&gt;Debugging chef-solo&lt;/h2&gt;

&lt;p&gt;You have got two options how to enable verbose mode for &lt;em&gt;chef-solo&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;First, you can &lt;em&gt;&lt;code&gt;SSH&lt;/code&gt;&lt;/em&gt; into a created virtual machine and invoke the &lt;em&gt;magic command&lt;/em&gt; in a certain directory:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='bash'&gt;~ &lt;span class='nv'&gt;$ &lt;/span&gt;vagrant ssh

vagrant@localhost ~ &lt;span class='nv'&gt;$ &lt;/span&gt;&lt;span class='nb'&gt;cd&lt;/span&gt; /tmp/vagrant-chef-1
vagrant@localhost /tmp/vagrant-chef-1 &lt;span class='nv'&gt;$ &lt;/span&gt;sudo chef-solo -c solo.rb -j dna.json -l debug
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In this &lt;em&gt;magic command&lt;/em&gt; the parameter &lt;code&gt;-c&lt;/code&gt; is responsible for setting a configuration file, &lt;code&gt;-j&lt;/code&gt; is for passing a file with attributes, which is later called a &lt;em&gt;node specification&lt;/em&gt;. Last parameter &lt;code&gt;-l&lt;/code&gt; - most important for us - enables the verbose mode at a certain logging level.&lt;/p&gt;

&lt;p&gt;You may be wondering why you are entering a &lt;code&gt;/tmp/vagrant-chef-1&lt;/code&gt; directory with a digit at the end?&lt;/p&gt;

&lt;p&gt;The actual value depends on the number of concurrent and active provisioning processes running on the virtual machine and is represented by the &lt;a href=&quot;https://github.com/mitchellh/vagrant/blob/master/plugins/provisioners/chef/provisioner/base.rb#L22&quot;&gt;get_and_update_counter&lt;/a&gt; method and the &lt;a href=&quot;https://github.com/mitchellh/vagrant/blob/master/lib/vagrant/util/counter.rb&quot;&gt;Counter&lt;/a&gt; module.&lt;/p&gt;

&lt;p&gt;But you can enable it in a different way - by passing the arguments to a provisioner inside &lt;em&gt;Vagrantfile&lt;/em&gt;:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='ruby'&gt;&lt;span class='lineno'&gt;1&lt;/span&gt; &lt;span class='no'&gt;Vagrant&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;configure&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;2&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='k'&gt;do&lt;/span&gt; &lt;span class='o'&gt;|&lt;/span&gt;&lt;span class='n'&gt;config&lt;/span&gt;&lt;span class='o'&gt;|&lt;/span&gt;
&lt;span class='lineno'&gt;2&lt;/span&gt;   &lt;span class='c1'&gt;# ...&lt;/span&gt;
&lt;span class='lineno'&gt;3&lt;/span&gt; 
&lt;span class='lineno'&gt;4&lt;/span&gt;   &lt;span class='n'&gt;config&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;vm&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;provision&lt;/span&gt; &lt;span class='ss'&gt;:chef_solo&lt;/span&gt; &lt;span class='k'&gt;do&lt;/span&gt; &lt;span class='o'&gt;|&lt;/span&gt;&lt;span class='n'&gt;chef&lt;/span&gt;&lt;span class='o'&gt;|&lt;/span&gt;
&lt;span class='lineno'&gt;5&lt;/span&gt;     &lt;span class='c1'&gt;# ...&lt;/span&gt;
&lt;span class='lineno'&gt;6&lt;/span&gt; 
&lt;span class='lineno'&gt;7&lt;/span&gt;     &lt;span class='n'&gt;chef&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;arguments&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;-l debug&amp;#39;&lt;/span&gt;
&lt;span class='lineno'&gt;8&lt;/span&gt;   &lt;span class='k'&gt;end&lt;/span&gt;
&lt;span class='lineno'&gt;9&lt;/span&gt; &lt;span class='k'&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;mutating_the_dna&quot;&gt;Mutating the DNA&lt;/h2&gt;

&lt;p&gt;As you can see in the example above, related with the chef-solo debugging, you have got a &lt;code&gt;dna.json&lt;/code&gt; file with attributes generated on the basis of provisioner configuration attached in &lt;em&gt;Vagrantfile&lt;/em&gt;. We call it a &lt;em&gt;node specification&lt;/em&gt;. But what if you already have an existing node specification, and you want to use it?&lt;/p&gt;

&lt;p&gt;There is an attribute for that, called &lt;code&gt;json&lt;/code&gt;, but it is a dictionary. You cannot pass a plain string with a path to the node file, like the role name in the &lt;em&gt;add_role&lt;/em&gt; method or setting a value in the &lt;em&gt;environment&lt;/em&gt; field.&lt;/p&gt;

&lt;p&gt;In order to inject our attributes you need to read the file first, then parse the content as JSON and finally merge it with the existing value of the field:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='ruby'&gt;&lt;span class='lineno'&gt;1&lt;/span&gt; &lt;span class='no'&gt;Vagrant&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;configure&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;2&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='k'&gt;do&lt;/span&gt; &lt;span class='o'&gt;|&lt;/span&gt;&lt;span class='n'&gt;config&lt;/span&gt;&lt;span class='o'&gt;|&lt;/span&gt;
&lt;span class='lineno'&gt;2&lt;/span&gt;   &lt;span class='c1'&gt;# ...&lt;/span&gt;
&lt;span class='lineno'&gt;3&lt;/span&gt; 
&lt;span class='lineno'&gt;4&lt;/span&gt;   &lt;span class='n'&gt;config&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;vm&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;provision&lt;/span&gt; &lt;span class='ss'&gt;:chef_solo&lt;/span&gt; &lt;span class='k'&gt;do&lt;/span&gt; &lt;span class='o'&gt;|&lt;/span&gt;&lt;span class='n'&gt;chef&lt;/span&gt;&lt;span class='o'&gt;|&lt;/span&gt;
&lt;span class='lineno'&gt;5&lt;/span&gt;     &lt;span class='c1'&gt;# ...&lt;/span&gt;
&lt;span class='lineno'&gt;6&lt;/span&gt; 
&lt;span class='lineno'&gt;7&lt;/span&gt;     &lt;span class='n'&gt;chef&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;json&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;merge!&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='no'&gt;JSON&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;parse&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='no'&gt;File&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;read&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;path/to/json/file&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;)))&lt;/span&gt;
&lt;span class='lineno'&gt;8&lt;/span&gt;   &lt;span class='k'&gt;end&lt;/span&gt;
&lt;span class='lineno'&gt;9&lt;/span&gt; &lt;span class='k'&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&quot;links&quot;&gt;Links&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/mitchellh/vagrant&quot;&gt;Vagrant Github repository&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href=&quot;http://docs.vagrantup.com/v2/&quot;&gt;Vagrant documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Fri, 18 Oct 2013 20:10:00 +0000</pubDate>
        <link>http://www.afronski.pl/2013/10/18/chef-solo-dna-mutation.html</link>
        <guid isPermaLink="true">http://www.afronski.pl/2013/10/18/chef-solo-dna-mutation.html</guid>
      </item>
    
  </channel>
</rss>