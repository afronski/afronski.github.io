<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>afronski.pl - Tag: videos</title>
    <description>Random thoughts from top of my head - afronski.pl</description>
    <link>http://www.afronski.pl</link>
    <atom:link href="http://www.afronski.pl/tag/videos/feed.xml" rel="self" type="application/rss+xml" />
    
      <item>
        <title>My picks of NDC 2014 - part II</title>
        <description>&lt;h1 id=&quot;my-picks-of-ndc-2014---part-ii&quot;&gt;My picks of NDC 2014 - part II&lt;/h1&gt;

&lt;p&gt;Another presentations worth looking from the past NDC conference (previous part is &lt;a href=&quot;http://www.afronski.pl/2014/06/16/my-picks-of-NDC-2014-part-1.html&quot;&gt;here&lt;/a&gt;):&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://vimeo.com/97537675&quot;&gt;Venkat Subramaniam - Towards an Evolutionary Architecture&lt;/a&gt; - Very nice talk which summarizes all necessary things which are important in the concept of &lt;em&gt;Good Architecture&lt;/em&gt;. An architect in Agile have been considered as obsolete by many people, but actually it is the opposite. Good architecture defers decisions, enables evolution and moreover handles or even removes completely the complexity. Besides that - a very nice Agile approach is to prioritize features and assignments by the business value and the architectural impact - by doing that you can really avoid many pitfalls when you are moving forward and crush the knowledge during the process of building the application.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://vimeo.com/97415346&quot;&gt;Cory House - Becoming an Outlier: Career Reboot for the Developer Mind&lt;/a&gt; - Definitely recommended video to watch. For many people it will be a mind and eye opening experience. Handful of valuable thoughts and advices how to manage your career, change your habits and adapt in the continuously changing environment.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://vimeo.com/97516289&quot;&gt;Roy Osherove - Beautiful Builds&lt;/a&gt; - Very refreshing talk. It starts by very obvious, but very often forgotten statement that &lt;em&gt;automated builds are not the continuous integration&lt;/em&gt;. It introduces important concept of &lt;em&gt;shipping skeleton&lt;/em&gt;. Mixing operational knowledge with building and deployment knowledge is also an anti-pattern. Talk contains a very useful set of patterns and best practices about CI and even Continuous Deployment - definitely recommended.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://vimeo.com/97507576&quot;&gt;Doc Norton - The Technical Debt Trap&lt;/a&gt; - Very wise and mindful explanation of Technical Debt metaphor (and moreover - the good and only true one). If you are operating this metaphor and you often use it, please watch this presentation and be sure that all points which are related with the true definition are fulfilled. Because if not, you are talking about &lt;em&gt;cruft&lt;/em&gt; not &lt;em&gt;debt&lt;/em&gt;. &lt;img class=&quot;emoji&quot; title=&quot;:wink:&quot; alt=&quot;:wink:&quot; src=&quot;https://assets.github.com/images/icons/emoji/unicode/1f609.png&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://vimeo.com/97408239&quot;&gt;Joe Armstrong - The mess we’re in&lt;/a&gt; - In most cases talks presented by Joe Armstrong can look like a little spontaneous, sometimes even unprepared. However it is a false belief - amount of experience, insight, pragmatic and at the same time scientific approach to the computing can be really underestimated. Knowledge and very insightful anecdotes are &lt;em&gt;flowing out this talk&lt;/em&gt;. If you want to know more or you are merely interested about the history of computing and how it actually will affect the future of computer science, it is a must-watch presentation.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://vimeo.com/97505679&quot;&gt;Aral Balkan - Free is a lie&lt;/a&gt; - Definitely recommended talk, especially if you do not have an idea what is a Google / Facebook business model. For those people it can be even a controversial talk (for me it is because of presenting Mozilla as not a ‘Free’ option in the IT world - claiming that most of the income comes from the Google and only that disqualifies this company from being &lt;em&gt;free as a liberty&lt;/em&gt; is &lt;em&gt;just unfair&lt;/em&gt;). In other words - if you do not know this already, by using free services - you are not a consumer, you are a product - &lt;em&gt;a data source&lt;/em&gt; - nothing less, nothing more.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://vimeo.com/97541185&quot;&gt;Venkat Subramaniam - Core Software Design Principles&lt;/a&gt; - Worth looking if you forgot or you would like to refresh your knowledge about &lt;em&gt;&lt;code&gt;SOLID&lt;/code&gt;&lt;/em&gt; principles, or you do not know what &lt;em&gt;&lt;code&gt;YAGNI&lt;/code&gt;&lt;/em&gt;, &lt;em&gt;&lt;code&gt;DRY&lt;/code&gt;&lt;/em&gt; and &lt;em&gt;&lt;code&gt;TDA&lt;/code&gt;&lt;/em&gt; means. Otherwise, you will watch a rather repetitive (but not boring) presentation.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://vimeo.com/97337252&quot;&gt;Garrett Smith - Functional code considered Beautiful&lt;/a&gt; - Definitely worth looking, especially that it is a kind of a rather &lt;em&gt;soft&lt;/em&gt; talk with very pragmatic insights, without &lt;em&gt;preaching&lt;/em&gt; and not necessary &lt;em&gt;marketing&lt;/em&gt;. If you are not convinced enough - try to think about very readable, declarative code which is oriented around concurrency and is side-effect free - how it should look like? And one more - presented sample with &lt;em&gt;&lt;code&gt;GCD&lt;/code&gt;&lt;/em&gt; is beautiful and enlightening.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://vimeo.com/97514517&quot;&gt;Mathias Brandewinder - F# and Machine Learning: a winning combination&lt;/a&gt; - Inspiring and fresh talk, both regarding the topic and presented programming language. Definitely worth looking if you are interested in the polyglot programming movement, and if you are looking for interesting language to learn in this or next year. &lt;img class=&quot;emoji&quot; title=&quot;:wink:&quot; alt=&quot;:wink:&quot; src=&quot;https://assets.github.com/images/icons/emoji/unicode/1f609.png&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://vimeo.com/97419178&quot;&gt;Bruce Tate - Pipe Dreams&lt;/a&gt; - Another talk from the polyglot programming family. In this case it presents only two key pieces of Elixir, a new language which is a mix of Ruby syntax, Erlang VM and OTP library, but does it well and deeply - actually it is open-minded in terms of specific approach to the data processing paradigm and sequentiality.&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Thu, 28 Aug 2014 20:00:00 +0200</pubDate>
        <link>http://www.afronski.pl/2014/08/28/my-picks-of-NDC-2014-part-2.html</link>
        <guid isPermaLink="true">http://www.afronski.pl/2014/08/28/my-picks-of-NDC-2014-part-2.html</guid>
      </item>
    
      <item>
        <title>My picks of NDC 2014 - part I</title>
        <description>&lt;h1 id=&quot;my-picks-of-ndc-2014---part-i&quot;&gt;My picks of NDC 2014 - part I&lt;/h1&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://vimeo.com/97329157&quot;&gt;Kevlin Henney - Seven Ineffective Coding Habits of Many Programmers&lt;/a&gt; - Very refreshing talk about style and programming habbits. Even if it has many controversial points from your perspective and it is very opinionated, many of them are at least thought-provoking and maybe they should be reconsidered and rethought again.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://vimeo.com/97315946&quot;&gt;Hadi Hariri - Developing in a Decade&lt;/a&gt; - Very inspiring and refreshing talk what software development, internet and whole IT actually is and why it should change if we want to be happier and live in the better world. Amazing anegdotes and very thought-provoking comparisons to the books (Orwell’s &lt;em&gt;“1984”&lt;/em&gt;, Huxley’s &lt;em&gt;“Brave New World”&lt;/em&gt;, Postman’s &lt;em&gt;“Amusing Ourselves to Death”&lt;/em&gt;). For me, this is the best presentation of this year NDC by now.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://vimeo.com/97530863&quot;&gt;Robert C. Martin - Clean Architecture and Design&lt;/a&gt; - Strongly recommended if you have not seen earlier talks made by &lt;em&gt;Uncle Bob&lt;/em&gt; related with this topic. The most appropriate summary of this talk: &lt;em&gt;application’s business rules are the most important things, protect them - everything is a implementation detail and it should be pluggable&lt;/em&gt;. In other words &lt;em&gt;good architecture maximizes the number of decisions not made&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://vimeo.com/97505656&quot;&gt;Tim Berglund - Discrete Math You Need to Know&lt;/a&gt; - Inspiring talk (even if you may think that math cannot be inspiring). Definitely recommended, at first - it is recommended to stretch your mind frequently, moreover - it is nice to know more and have these tools in your toolbox (or what is even more recommended - refresh it). Surprisingly, still many people in IT do not know how the RSA works underneath.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://vimeo.com/97318800&quot;&gt;Denise R. Jackobs - Banish Your Inner Critic&lt;/a&gt; - It can be very enlightening talk for many people, maybe even a life changer. If you have problems with pursuing to the perfection state, procrastination and you have feeling and knowledge that you are a victim of &lt;em&gt;impostor syndrome&lt;/em&gt; definitely worth watching.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://vimeo.com/97516288&quot;&gt;Robert C. Martin - Advanced Test Driven Development&lt;/a&gt; - Again, if you have seen it before, there is probably nothing new, but if not - please definitely watch it. Very interesting concept called &lt;em&gt;transformation priority premise&lt;/em&gt;. And surprising summary - &lt;em&gt;if statement is a degenerated case of while loop&lt;/em&gt;. &lt;img class=&quot;emoji&quot; title=&quot;:wink:&quot; alt=&quot;:wink:&quot; src=&quot;https://assets.github.com/images/icons/emoji/unicode/1f609.png&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://vimeo.com/97537026&quot;&gt;Scott Bellware - TDD in Tatters&lt;/a&gt; - Eye-opening introduction about cognitive theory and learning. Very nice differentiation between crude and subtle things, which sometimes fells out and disappear in the process of learning. I disagree about that automation leads to removal a connection between the programmers and code, but still it is a viable talk (at least the beginning about &lt;em&gt;amateur cognitive theory&lt;/em&gt;, pointing out the subtleties and explaining the design role in &lt;em&gt;TDD&lt;/em&gt; acronym). The most important quote from this presentation is &lt;em&gt;every test is an additional coupling to the code&lt;/em&gt; - and by providing good design we should minimize the coupling, we should control it. It is the subtle thing that we often ignore.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;how-to-watch-these-videos-offline&quot;&gt;How to watch these videos offline?&lt;/h2&gt;

&lt;p&gt;Unfortunately, since 2013 there are no &lt;em&gt;&lt;code&gt;torrent&lt;/code&gt;&lt;/em&gt; files, which combine all videos in one place. But there is a solution - we can use &lt;code&gt;Selenium&lt;/code&gt; &lt;em&gt;JavaScript&lt;/em&gt; driver to scrap all links from &lt;em&gt;&lt;code&gt;HTML5&lt;/code&gt;&lt;/em&gt; &lt;em&gt;video&lt;/em&gt; tags. Complete source code of scripts and helpers is available &lt;a href=&quot;https://github.com/afronski/playground-repository/tree/master/vimeo-scraper&quot;&gt;here&lt;/a&gt;. Installation:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# On Arch Linux, Selenium Chrome WebDriver is available only in AUR.&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;2&lt;/span&gt; ~ &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;pacaur -S chromedriver
&lt;span class=&quot;lineno&quot;&gt;3&lt;/span&gt; ~ &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;npm install
&lt;span class=&quot;lineno&quot;&gt;4&lt;/span&gt; ~ &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;node vimeo-scraper.js &amp;gt; urls.txt&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In the output file you will receive list of URLs which point directly to &lt;em&gt;MP4&lt;/em&gt; ready to download.&lt;/p&gt;

&lt;h2 id=&quot;appendix---a-bitter-state-of-headless-browsers&quot;&gt;Appendix - A bitter state of headless browsers&lt;/h2&gt;

&lt;p&gt;I know that there are tools capable to do such things headlessly. I thought that it will be an easy task to do.&lt;/p&gt;

&lt;p&gt;Unfortunately, I have tested &lt;code&gt;Phantom.js&lt;/code&gt; and &lt;code&gt;SlimmerJS&lt;/code&gt; (representatives of two major browser engines - &lt;em&gt;WebKit&lt;/em&gt; and &lt;em&gt;Gecko&lt;/em&gt;) and both does not work (even if creators of &lt;code&gt;SlimmerJS&lt;/code&gt; &lt;a href=&quot;http://slimerjs.org/features.html&quot;&gt;claims&lt;/a&gt; that it should work with &lt;em&gt;&lt;code&gt;HTML5&lt;/code&gt;&lt;/em&gt; &lt;em&gt;video&lt;/em&gt;, &lt;code&gt;Phantom.js&lt;/code&gt; is slightly better in this matter - it &lt;a href=&quot;https://github.com/ariya/phantomjs/wiki/Supported-Web-Standards#unsupported-features&quot;&gt;officially&lt;/a&gt; does not support &lt;em&gt;audio&lt;/em&gt; and &lt;em&gt;video&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;The best implementation of &lt;em&gt;&lt;code&gt;WebKit&lt;/code&gt;&lt;/em&gt; rendering engine available to Node.js called &lt;em&gt;Chimera&lt;/em&gt; is &lt;a href=&quot;https://github.com/deanmao/node-chimera/issues/44#issuecomment-30561620&quot;&gt;no longer maintained&lt;/a&gt;. It was a very nice module, I have used it in the past - very unfortunate and disappointing decision.&lt;/p&gt;

&lt;p&gt;So if you really want to scrape pages headlessly by doing more than simple rendering, measure loading time and capture a single screenshot, you need to use the good, old and reliable pair: &lt;code&gt;Selenium&lt;/code&gt; and &lt;code&gt;Xvfb&lt;/code&gt;.&lt;/p&gt;

&lt;h1 id=&quot;references&quot;&gt;References&lt;/h1&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://vimeo.com/channels/ndc2014&quot;&gt;NDC 2014 Vimeo Playlist&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://slimmerjs.org&quot;&gt;SlimmerJS&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://phantomjs.org&quot;&gt;phantomjs&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/deanmao/node-chimera&quot;&gt;&lt;code&gt;node-chimera&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Mon, 16 Jun 2014 22:10:00 +0200</pubDate>
        <link>http://www.afronski.pl/2014/06/16/my-picks-of-NDC-2014-part-1.html</link>
        <guid isPermaLink="true">http://www.afronski.pl/2014/06/16/my-picks-of-NDC-2014-part-1.html</guid>
      </item>
    
  </channel>
</rss>
