<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>afronski.pl - Tag: devops</title>
    <description>Random thoughts from top of my head - afronski.pl</description>
    <link>http://www.afronski.pl</link>
    <atom:link href="http://www.afronski.pl/tag/devops/feed.xml" rel="self" type="application/rss+xml" />
    
      <item>
        <title>Writing custom modules for Ansible</title>
        <description>&lt;h1 id=&quot;writing-custom-modules-for-ansible&quot;&gt;Writing custom modules for Ansible&lt;/h1&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;h3 id=&quot;what-is-ansible-and-what-is-a-module&quot;&gt;What is Ansible and what is a &lt;code&gt;module&lt;/code&gt;?&lt;/h3&gt;

&lt;p&gt;If you are a big fan of &lt;em&gt;automation&lt;/em&gt;, if you are focused on spreading and building software in line with &lt;em&gt;DevOps&lt;/em&gt; culture tools related with automation / configuration management like &lt;em&gt;Chef&lt;/em&gt; or &lt;em&gt;Ansible&lt;/em&gt; are probably well known to you. Differences between various types of those tools is a topic for a next blog post. Let’s briefly zoom into details for those people which do not know what &lt;em&gt;Ansible&lt;/em&gt; and &lt;em&gt;modules&lt;/em&gt; are.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Ansible&lt;/em&gt; is a free-software platform for configuring and managing machines. It combines deployment, ad hoc tasks execution and configuration management. This tool uses &lt;em&gt;YAML&lt;/em&gt; and declarative way of defining steps, which are modifying state of your fleet. &lt;em&gt;Module&lt;/em&gt; is a single piece of those steps, well defined way of executing certain tasks on remote infrastructure. It works by outputting JSON to standard output, and it can be written in any programming language.&lt;/p&gt;

&lt;h2 id=&quot;development&quot;&gt;Development&lt;/h2&gt;

&lt;p&gt;Before we’ll start actual implementation we need to know how it works underneath.&lt;/p&gt;

&lt;h3 id=&quot;requirements&quot;&gt;Requirements&lt;/h3&gt;

&lt;p&gt;If you want to write a custom module, we stated above that you have to be aware of two things. Your module code will be executed on the provisioned machine, &lt;strong&gt;so all dependencies which your module requires, have to be there&lt;/strong&gt;. Second, your module communicates over specific input and output protocols. It uses certain syntax for sending input parameters (either sent as a &lt;code&gt;stdin&lt;/code&gt; or file) and JSON protocol which will be consumed as an output of the module. And nothing more - any other, non-JSON compliant output will be treated as an error, and would not be consumed by &lt;em&gt;Ansible&lt;/em&gt; properly.&lt;/p&gt;

&lt;h3 id=&quot;case-study&quot;&gt;Case Study&lt;/h3&gt;

&lt;p&gt;We would like to consume &lt;em&gt;XMLified&lt;/em&gt; status pages and do certain actions based on checked and exposed facts, scraped from aforementioned place. Because I like Erlang, I will use that language to implement that module. We will do it using &lt;code&gt;escript&lt;/code&gt;. What is it? Quoting official documentation:&lt;/p&gt;

&lt;quote class=&quot;citation&quot;&gt;&lt;code&gt;escript&lt;/code&gt; provides support for running short Erlang programs without having to compile them first and an easy way to retrieve the command line arguments.&lt;/quote&gt;

&lt;p&gt;Besides way of executing code, we need to have XML parser and HTTP client - in both cases we will use built-in thins from Erlang library - &lt;code&gt;xmerl&lt;/code&gt; and &lt;code&gt;httpc&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;developing-outside-ansible&quot;&gt;Developing outside Ansible&lt;/h3&gt;

&lt;p&gt;First we need to setup our environment for Ansible. The easiest way to do it in Python world is to spin up a &lt;code&gt;virtualenv&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;playground &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;virtualenv -p python2.7 .local
playground &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;source&lt;/span&gt; .local/bin/activate
playground &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;pip install &lt;span class=&quot;nv&quot;&gt;ansible&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;1.9.4                                            &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;.local&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then we can fiddle with it.&lt;/p&gt;

&lt;h4 id=&quot;input-arguments&quot;&gt;Input arguments&lt;/h4&gt;

&lt;p&gt;How to pass an arguments to it? You can observe it either when you define task parameters inside &lt;em&gt;YAML&lt;/em&gt; file or when you invoke ad hoc task in &lt;em&gt;Ansible&lt;/em&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;playground &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ansible host&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;001-002&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; -i production_hosts -m stat -a &lt;span class=&quot;s2&quot;&gt;&amp;quot;path=/etc/passwd&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Everything stated inside &lt;code&gt;-a&lt;/code&gt; attribute defines list of named parameters. In that case an argument named &lt;code&gt;path&lt;/code&gt; has value &lt;code&gt;/etc/passwd&lt;/code&gt;. This will be formatted and printed to a file. Path and name will be delivered as a first argument of command line invocation of our module.&lt;/p&gt;

&lt;h4 id=&quot;output-format&quot;&gt;Output format&lt;/h4&gt;

&lt;p&gt;As we specified above, our module will be executed in the context of actually modified machine. It communicates with Ansible over well defined JSON protocol, collected from &lt;code&gt;stdout&lt;/code&gt;. We have two basic forms - error:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;failed&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;msg&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Details of the error.&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And success:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;changed&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If we want to communicate new facts, which can be used in further tasks (e.g. as an argument for conditional statements) we can add it inside &lt;code&gt;ansible_facts&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;changed&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;ansible_facts&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;new_fact&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;new_value&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It is a good practice to prefix your facts with name of the module (for avoiding name conflicts and preserving clean structure).&lt;/p&gt;

&lt;h4 id=&quot;implementation&quot;&gt;Implementation&lt;/h4&gt;

&lt;p&gt;Further implementation is pretty straightforward, especially that we’re writing a sequential script using all power of Erlang related with &lt;a href=&quot;https://github.com/afronski/playground-infrastructure/blob/master/ansible/custom_modules/xml_status_page/xml_status_page#L40&quot;&gt;pattern matching&lt;/a&gt;, &lt;a href=&quot;https://github.com/afronski/playground-infrastructure/blob/master/ansible/custom_modules/xml_status_page/xml_status_page#L26&quot;&gt;&lt;em&gt;HTTP client&lt;/em&gt;&lt;/a&gt; and &lt;a href=&quot;https://github.com/afronski/playground-infrastructure/blob/master/ansible/custom_modules/xml_status_page/xml_status_page#L60&quot;&gt;flow control&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;testing-with-ansible&quot;&gt;Testing with Ansible&lt;/h3&gt;

&lt;p&gt;When you want to test your module with Ansible, you can set it up from source inside your &lt;code&gt;virtualenv&lt;/code&gt; and then invoke it by this series of commands:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;playground &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git clone git://github.com/ansible/ansible.git --recursive
playground &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;source &lt;/span&gt;ansible/hacking/env-setup
playground &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;chmod +x ansible/hacking/test-module
playground &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ansible/hacking/test-module
               -m ./xml_status_page
               -a &lt;span class=&quot;s2&quot;&gt;&amp;quot;host=localhost port=9999 xpath=//statistics name=version&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;Thanks to the good architecture and separation of concerns in Ansible, we can easily create modules using different languages and techniques, which will be executed on the provisioned host by a runner. There is no cleaner way to separate executor from task implementation, if you can separate it via programming language.&lt;/p&gt;

&lt;p&gt;Also nice structure of this tool and ability to combine it with &lt;code&gt;virtalenv&lt;/code&gt; allows us to use locally modified versions and prepare our own tailored toolboxes, customized to our projects and needs.&lt;/p&gt;

&lt;h2 id=&quot;credits&quot;&gt;Credits&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://docs.ansible.com/ansible/developing_modules.html&quot;&gt;Developing modules - Ansible documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/ansible/ansible-modules-extras&quot;&gt;Modules Extras - Ansible&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.lelonek.me/how-to-write-ansible-module-in-clojure-5b340df90f5a#.f5aqkjrlk&quot;&gt;How to write Ansible module in Clojure? - Kamil Lelonek’s blog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://erlang.org/doc/man/escript.html&quot;&gt;&lt;code&gt;escript&lt;/code&gt; - Erlang Documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://erlang.org/doc/man/xmerl.html&quot;&gt;&lt;code&gt;xmerl&lt;/code&gt; - Erlang Documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://erlang.org/doc/man/httpc.html&quot;&gt;&lt;code&gt;httpc&lt;/code&gt; - Erlang Documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Mon, 28 Mar 2016 21:00:00 +0200</pubDate>
        <link>http://www.afronski.pl/2016/03/28/writing-custom-modules-for-ansible.html</link>
        <guid isPermaLink="true">http://www.afronski.pl/2016/03/28/writing-custom-modules-for-ansible.html</guid>
      </item>
    
      <item>
        <title>Tips and tricks for chef-solo and vagrant</title>
        <description>&lt;h1 id=&quot;tips-and-tricks-for-chef-solo-and-vagrant&quot;&gt;Tips and tricks for chef-solo and vagrant&lt;/h1&gt;

&lt;p&gt;In your daily work at the kitchen sink &lt;img class=&quot;emoji&quot; title=&quot;:wink:&quot; alt=&quot;:wink:&quot; src=&quot;https://assets.github.com/images/icons/emoji/unicode/1f609.png&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; /&gt;, sometimes you have to be a &lt;em&gt;plumber&lt;/em&gt; and get dirty. In order to do that you have to be familiar with the concept of debugging &lt;em&gt;vagrant&lt;/em&gt;, &lt;em&gt;chef-solo&lt;/em&gt; and some other useful tricks.&lt;/p&gt;

&lt;h2 id=&quot;debugging-vagrant&quot;&gt;Debugging vagrant&lt;/h2&gt;

&lt;p&gt;If you want to enable a verbose mode for &lt;em&gt;vagrant&lt;/em&gt;, you need to set the environment variable &lt;code&gt;VAGRANT_LOG&lt;/code&gt; to &lt;code&gt;DEBUG&lt;/code&gt; or &lt;code&gt;INFO&lt;/code&gt; value, as in the example below:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;~ &lt;span class=&quot;nv&quot;&gt;$ VAGRANT_LOG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;DEBUG vagrant up&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;debugging-chef-solo&quot;&gt;Debugging chef-solo&lt;/h2&gt;

&lt;p&gt;You have got two options how to enable verbose mode for &lt;em&gt;chef-solo&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;First, you can &lt;em&gt;&lt;code&gt;SSH&lt;/code&gt;&lt;/em&gt; into a created virtual machine and invoke the &lt;em&gt;magic command&lt;/em&gt; in a certain directory:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;~ &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;vagrant ssh

vagrant@localhost ~ &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /tmp/vagrant-chef-1
vagrant@localhost /tmp/vagrant-chef-1 &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo chef-solo -c solo.rb -j dna.json -l debug&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In this &lt;em&gt;magic command&lt;/em&gt; the parameter &lt;code&gt;-c&lt;/code&gt; is responsible for setting a configuration file, &lt;code&gt;-j&lt;/code&gt; is for passing a file with attributes, which is later called a &lt;em&gt;node specification&lt;/em&gt;. Last parameter &lt;code&gt;-l&lt;/code&gt; - most important for us - enables the verbose mode at a certain logging level.&lt;/p&gt;

&lt;p&gt;You may be wondering why you are entering a &lt;code&gt;/tmp/vagrant-chef-1&lt;/code&gt; directory with a digit at the end?&lt;/p&gt;

&lt;p&gt;The actual value depends on the number of concurrent and active provisioning processes running on the virtual machine and is represented by the &lt;a href=&quot;https://github.com/mitchellh/vagrant/blob/master/plugins/provisioners/chef/provisioner/base.rb#L22&quot;&gt;get_and_update_counter&lt;/a&gt; method and the &lt;a href=&quot;https://github.com/mitchellh/vagrant/blob/master/lib/vagrant/util/counter.rb&quot;&gt;Counter&lt;/a&gt; module.&lt;/p&gt;

&lt;p&gt;But you can enable it in a different way - by passing the arguments to a provisioner inside &lt;em&gt;Vagrantfile&lt;/em&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Vagrant&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;configure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;2&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;2&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;3&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt;4&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;provision&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:chef_solo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chef&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;5&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;6&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt;7&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;chef&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arguments&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;-l debug&amp;#39;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;8&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;9&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;mutating-the-dna&quot;&gt;Mutating the DNA&lt;/h2&gt;

&lt;p&gt;As you can see in the example above, related with the chef-solo debugging, you have got a &lt;code&gt;dna.json&lt;/code&gt; file with attributes generated on the basis of provisioner configuration attached in &lt;em&gt;Vagrantfile&lt;/em&gt;. We call it a &lt;em&gt;node specification&lt;/em&gt;. But what if you already have an existing node specification, and you want to use it?&lt;/p&gt;

&lt;p&gt;There is an attribute for that, called &lt;code&gt;json&lt;/code&gt;, but it is a dictionary. You cannot pass a plain string with a path to the node file, like the role name in the &lt;em&gt;add_role&lt;/em&gt; method or setting a value in the &lt;em&gt;environment&lt;/em&gt; field.&lt;/p&gt;

&lt;p&gt;In order to inject our attributes you need to read the file first, then parse the content as JSON and finally merge it with the existing value of the field:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Vagrant&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;configure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;2&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;2&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;3&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt;4&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;provision&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:chef_solo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chef&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;5&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;6&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt;7&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;chef&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;merge!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;path/to/json/file&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;8&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;9&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1 id=&quot;links&quot;&gt;Links&lt;/h1&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/mitchellh/vagrant&quot;&gt;Vagrant Github repository&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://docs.vagrantup.com/v2/&quot;&gt;Vagrant documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Fri, 18 Oct 2013 20:10:00 +0200</pubDate>
        <link>http://www.afronski.pl/2013/10/18/chef-solo-dna-mutation.html</link>
        <guid isPermaLink="true">http://www.afronski.pl/2013/10/18/chef-solo-dna-mutation.html</guid>
      </item>
    
      <item>
        <title>Creating a custom Vagrant box</title>
        <description>&lt;h1 id=&quot;creating-a-custom-vagrant-box&quot;&gt;Creating a custom Vagrant box&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;/assets/VagrantLogo.png&quot; alt=&quot;Vagrant Logo&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;vagrant - a person without a settled home or regular work who wanders from place to place and lives by begging.&lt;/em&gt;&lt;/p&gt;

&lt;h1 id=&quot;it-is-not-a-common-path&quot;&gt;It is not a common path…&lt;/h1&gt;

&lt;p&gt;Do not start the creation of a new box from scratch without checking both of these sites:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.vagrantbox.es/&quot;&gt;vagrantbox.es&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/jedi4ever/veewee&quot;&gt;veewee&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In 99% of cases, one page will already contain the solution, which is a needed box. Otherwise we have to roll up our sleeves and go through the whole process. This post will contain almost all directions for creating a fresh box.&lt;/p&gt;

&lt;p&gt;And last but not least: all recipes provided in this article are valid for Vagrant in version 1.2 and above.&lt;/p&gt;

&lt;h1 id=&quot;but-sometimes-necessary&quot;&gt;… but sometimes necessary…&lt;/h1&gt;

&lt;h4 id=&quot;install-vagrant&quot;&gt;Install Vagrant&lt;/h4&gt;

&lt;p&gt;I’m assuming that you already have Vagrant - if not, go to &lt;a href=&quot;http://downloads.vagrantup.com/&quot;&gt;downloads&lt;/a&gt; page or install it by using package manager from your Linux distribution.&lt;/p&gt;

&lt;h4 id=&quot;virtual-machine-in-virtualbox&quot;&gt;Virtual Machine in VirtualBox&lt;/h4&gt;

&lt;p&gt;At first, we have to prepare a virtual machine with a specified amount of RAM, number of virtual processors, virtual hard disk image and the rest of the virtualized hardware. Remember the &lt;em&gt;VM&lt;/em&gt; name - you will need it at the end &lt;img class=&quot;emoji&quot; title=&quot;:wink:&quot; alt=&quot;:wink:&quot; src=&quot;https://assets.github.com/images/icons/emoji/unicode/1f609.png&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; /&gt;.&lt;/p&gt;

&lt;p&gt;One important thing related to networking - create only one network adapter and set it for using NAT. At last, setup port forwarding like presented below:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/VirtualBoxPortForwarding.png&quot; alt=&quot;Port forwarding setup for test purposes&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;installation&quot;&gt;Installation&lt;/h4&gt;

&lt;p&gt;Grab your favourite &lt;em&gt;Linux distribution&lt;/em&gt; / &lt;em&gt;Unix flavour&lt;/em&gt; ISO image and proceed with the installation process (no Windows because right now Vagrant doesn’t support this operating system as a guest).&lt;/p&gt;

&lt;p&gt;This is the easiest step in the whole guide &lt;img class=&quot;emoji&quot; title=&quot;:grin:&quot; alt=&quot;:grin:&quot; src=&quot;https://assets.github.com/images/icons/emoji/unicode/1f601.png&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; /&gt;.&lt;/p&gt;

&lt;h4 id=&quot;user-management&quot;&gt;User management&lt;/h4&gt;

&lt;p&gt;After the installation, create a new user account:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# Create user &amp;#39;vagrant&amp;#39;.&lt;/span&gt;
root&amp;gt; useradd vagrant

&lt;span class=&quot;c&quot;&gt;# Setup password.&lt;/span&gt;
root&amp;gt; passwd vagrant&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And add him to proper groups:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;root&amp;gt; usermod -aG users,wheel vagrant&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And the final step here - disable password for &lt;code&gt;sudo&lt;/code&gt; command in the &lt;code&gt;wheel&lt;/code&gt; group:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;root&amp;gt; visudo

&lt;span class=&quot;c&quot;&gt;# Uncomment or add a line like below:&lt;/span&gt;
%wheel &lt;span class=&quot;nv&quot;&gt;ALL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=(&lt;/span&gt;ALL&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; NOPASSWD: ALL&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id=&quot;ssh&quot;&gt;SSH&lt;/h4&gt;

&lt;p&gt;At first open port 22 on your machine, then get this &lt;a href=&quot;https://raw.github.com/mitchellh/vagrant/master/keys/vagrant.pub&quot;&gt;public key&lt;/a&gt; and put it in the file:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;root&amp;gt; curl https://raw.github.com/.../vagrant.pub &amp;gt; /etc/ssh/authorized_keys
root&amp;gt; chown root:root /etc/ssh/authorized_keys&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then setup your &lt;code&gt;sshd_config&lt;/code&gt; file like presented below:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# Uncomment these lines:&lt;/span&gt;
Port 22
AddressFamily any
ListenAddress 0.0.0.0
ListenAddress ::
PermitRootLogin yes

&lt;span class=&quot;c&quot;&gt;# Also uncomment and change these:&lt;/span&gt;
AuthorizedKeysFile /etc/ssh/authorized_keys
PasswordAuthentication no&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then you can verify your settings by command:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;~ &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ssh -i ~/.vagrant.d/insecure_private_key vagrant@localhost -p 2222&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If there are no errors you’re ready for the next step.&lt;/p&gt;

&lt;p&gt;In some cases you’ll receive an error similar to this one (&lt;strong&gt;SELinux compatible tip&lt;/strong&gt;):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;~ &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ssh -i ~/.vagrant.d/insecure_private_key vagrant@localhost -p 2222

Permission denied &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;publickey,gssapi-keyex,gssapi-with-mic&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In this case you need to fix the labels for the file with authorized keys:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;~ &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /etc/ssh/
~ &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ls -laZ                     &lt;span class=&quot;c&quot;&gt;# Checking labels.&lt;/span&gt;
~ &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;restorecon -r -vv .         &lt;span class=&quot;c&quot;&gt;# Fixing them.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id=&quot;finishing-touches&quot;&gt;Finishing touches&lt;/h4&gt;

&lt;p&gt;Unfortunately our &lt;code&gt;sudo&lt;/code&gt; has one big disadvantage - it won’t work without a real TTY and as you probably guessed - vagrant doesn’t use it. So we have to disable this setting in &lt;code&gt;sudoers&lt;/code&gt; file:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;~ &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo visudo

&lt;span class=&quot;c&quot;&gt;# Comment or remove line like below:&lt;/span&gt;
Default requiretty&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Just before the last step, please remove all previously forwarded ports for your virtual machine in VirtualBox.&lt;/p&gt;

&lt;h4 id=&quot;gift-packing&quot;&gt;Gift packing!&lt;/h4&gt;

&lt;p&gt;We still have to do the last step - packaging:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;~ &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;vagrant package --name &amp;lt;VM name&amp;gt; --output FreshAndHotVagrant.box&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The result is a finished box, which we can add to our list:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;~ &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;vagrant box add &amp;lt;internal box name&amp;gt; FreshAndHotVagrant.box&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then feel free to use it inside &lt;code&gt;Vagrantfile&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;no&quot;&gt;Vagrant&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;configure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;2&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;box&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&amp;lt;internal box name&amp;gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1 id=&quot;links-and-image-credits&quot;&gt;Links and Image credits&lt;/h1&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.hashicorp.com/images/blog/a-new-look-for-vagrant/logo_wide-cab47086.png&quot;&gt;Original link to Vagrant logo&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://docs.vagrantup.com/v2/&quot;&gt;Vagrant documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Tue, 08 Oct 2013 21:50:00 +0200</pubDate>
        <link>http://www.afronski.pl/2013/10/08/creating-a-custom-vagrant-box.html</link>
        <guid isPermaLink="true">http://www.afronski.pl/2013/10/08/creating-a-custom-vagrant-box.html</guid>
      </item>
    
  </channel>
</rss>
