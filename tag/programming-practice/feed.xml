<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>afronski.pl - Tag: programming-practice</title>
    <description>Random thoughts from top of my head - afronski.pl</description>
    <link>http://www.afronski.pl</link>
    <atom:link href="http://www.afronski.pl/tag/programming-practice/feed.xml" rel="self" type="application/rss+xml" />
    
      <item>
        <title>Why every programmer should play with LEGO?</title>
        <description>&lt;h1 id=&quot;why-every-programmer-should-play-with-lego&quot;&gt;Why every programmer should play with LEGO?&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;/assets/LegoColorBricks.jpg&quot; alt=&quot;Colorful LEGO pieces&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;disclaimer&quot;&gt;Disclaimer&lt;/h2&gt;

&lt;p&gt;I would like to strongly deny that the post has anything in common with a recent visit from my parents who brought me the entire supply of bricks. I won’t say anything more without my lawyer &lt;img class=&quot;emoji&quot; title=&quot;:grin:&quot; alt=&quot;:grin:&quot; src=&quot;https://assets.github.com/images/icons/emoji/unicode/1f601.png&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; /&gt;.&lt;/p&gt;

&lt;h2 id=&quot;what-does-christiansens-toy-have-in-common-with-software-engineering&quot;&gt;What does Christiansen’s toy have in common with software engineering?&lt;/h2&gt;

&lt;p&gt;At a first glance, not much. But after a moment of playing you’ll begin to notice some similarities. The most obvious one is the process of creating a new thing, even if software exist only in the computer’s memory. The second similarity is related strictly to creativity, because playing with LEGO and building software are the same creative processes (with high proportion of imagination). But in my opinion there are more similarities, not so evident at the beginning.&lt;/p&gt;

&lt;h3 id=&quot;standardization-and-interfaces&quot;&gt;Standardization and Interfaces&lt;/h3&gt;

&lt;p&gt;When you’re playing with bricks, it’s easy to create new things, connect previously assembled elements with each other and simulate some missing parts, or even replace completely.&lt;/p&gt;

&lt;p&gt;It’s a programmer’s dream: everything what is designed right now, fits perfectly to other parts assembled in past. Each component has elements which can be connected with other components in future. Common missing elements can be completely replaced or reassembled from smaller pieces.&lt;/p&gt;

&lt;p&gt;By providing simple standardization and well defined interfaces (I guess the name &lt;em&gt;contract&lt;/em&gt; is more appropriate in this case) you’ll achieve amazing level of flexibility. Of course more specific elements (e.g. wheel and axle) aren’t so flexible and interchangeable as the common bricks, but it’s a balance between common use cases and more specified functionality. But, even if you have an old fashioned wheel from a stagecoach and a new one with a rubber tire, you can use both with the same axle.&lt;/p&gt;

&lt;h3 id=&quot;modularity&quot;&gt;Modularity&lt;/h3&gt;

&lt;p&gt;Lets assume that you want to create a big castle like below:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/BigLegoCastle.jpg&quot; alt=&quot;Big LEGO castle&quot; /&gt;&lt;/p&gt;

&lt;p&gt;At first you’re creating walls, then towers with guards, a castle gate with a bascule bridge and in the meantime you’ll fill it with king’s headquarters and stables. When you’ll finish the castle, you’ll build the enemy armies with catapults (and finally destroy everything, because it’s the most fun part &lt;img class=&quot;emoji&quot; title=&quot;:grin:&quot; alt=&quot;:grin:&quot; src=&quot;https://assets.github.com/images/icons/emoji/unicode/1f601.png&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; /&gt;).&lt;/p&gt;

&lt;p&gt;Stand back and look how the process flows - you’re creating modularized parts of the castle, then modularized elements of the enemy army. All modules can be connected together, each module has a single, well defined responsibility and you can easily join seemingly unrelated components together (because you can put enemy catapults inside your castle, creating kind of an alliance &lt;img class=&quot;emoji&quot; title=&quot;:wink:&quot; alt=&quot;:wink:&quot; src=&quot;https://assets.github.com/images/icons/emoji/unicode/1f609.png&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; /&gt;).&lt;/p&gt;

&lt;h3 id=&quot;dry-and-design-patterns&quot;&gt;DRY and Design Patterns&lt;/h3&gt;

&lt;p&gt;Yes, the &lt;em&gt;don’t repeat yourself&lt;/em&gt; rule have significant meaning when you’re playing with LEGO, but it’s formulated differently than the original one. In my opinion you’re not reusing the assembled part itself (because you’ve got it in just one copy), but the way of creating it (in other words: you’re reusing the way of assembling a certain thing).&lt;/p&gt;

&lt;p&gt;Also the way of building a specific part can be called a &lt;em&gt;design pattern&lt;/em&gt;, which can be easily reused in the future (when you have enough bricks and time you can repeat the process over and over again). In the example mentioned above you’ll have a design pattern for your tower, but you can reapply it as many times to as many towers you need (you can, of course, adjust the previous design with some small enhancements, you aren’t obligated to fulfill all the requirements and perform all the steps from previous case).&lt;/p&gt;

&lt;h2 id=&quot;okay-but-what-if-i-dont-have-any-lego-bricks&quot;&gt;Okay, but what if I don’t have any LEGO bricks?&lt;/h2&gt;

&lt;p&gt;Then maybe, you’re seeing similarities in your childhood toys when you’re programming and solving problems. Or maybe you’re seeing completely different analogies when you’ll recall memories related with LEGO bricks. In both cases feel free to share your findings in the comments.&lt;/p&gt;

&lt;h2 id=&quot;image-credits&quot;&gt;Image credits&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/File:Lego_Color_Bricks.jpg&quot;&gt;Lego Color Bricks&lt;/a&gt; (licensed on &lt;a href=&quot;http://creativecommons.org/licenses/by-sa/2.0/deed.en&quot;&gt;CC BY-SA 2.0&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.flickr.com/photos/billward/3393269071/&quot;&gt;Lego Castle Photo&lt;/a&gt; (licensed on &lt;a href=&quot;http://creativecommons.org/licenses/by/2.0/deed.en&quot;&gt;CC BY 2.0&lt;/a&gt;)&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Sun, 06 Oct 2013 17:30:00 +0200</pubDate>
        <link>http://www.afronski.pl/2013/10/06/why-every-programmer-should-play-with-LEGO.html</link>
        <guid isPermaLink="true">http://www.afronski.pl/2013/10/06/why-every-programmer-should-play-with-LEGO.html</guid>
      </item>
    
      <item>
        <title>With great power, comes great responsibility</title>
        <description>&lt;h1 id=&quot;with-great-power-comes-great-responsibility&quot;&gt;With great power, comes great responsibility&lt;/h1&gt;

&lt;p&gt;If you had to choose what is better - &lt;em&gt;short and concise code&lt;/em&gt; or &lt;em&gt;abstractions visible at the first glance&lt;/em&gt; - what would you choose?&lt;/p&gt;

&lt;p&gt;Got your answer? Fine, let’s look at the examples.&lt;/p&gt;

&lt;h1 id=&quot;iterables&quot;&gt;Iterables&lt;/h1&gt;

&lt;p&gt;Let’s look at the standard abstraction of &lt;em&gt;iterable collections&lt;/em&gt;, available in Java and Scala (example written in &lt;em&gt;Scala&lt;/em&gt;):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;trait&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Iterable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;2&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iterator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Iterator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;4&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;trait&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Iterator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;6&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hasNext&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Boolean&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;7&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;8&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;Iterable&lt;/em&gt; is an abstraction for all collections which can be stepped through one-by-one.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Iterator&lt;/em&gt; is a data structure (again, an abstraction) that allows to iterate over a sequence of elements. It has two methods - first for checking if there is a next element available, and second which returns the next element.&lt;/p&gt;

&lt;p&gt;So far, so good - we can explicitly see an intent and usage for such abstractions. It is readable at the first sight.&lt;/p&gt;

&lt;h1 id=&quot;observables&quot;&gt;Observables&lt;/h1&gt;

&lt;p&gt;Things can get complicated if we are dealing with asynchronous operations, which return a collection as well. &lt;em&gt;Iterables&lt;/em&gt; define only a collection of existing elements, not possible results.&lt;/p&gt;

&lt;p&gt;But we can introduce new abstractions. Let’s look at the example (again, written in &lt;em&gt;Scala&lt;/em&gt;):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;lineno&quot;&gt; 1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;trait&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Observable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 2&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;observer&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Observer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Subscription&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 4&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt; 5&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;trait&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Observer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 6&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;onNext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Unit&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 7&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;onError&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Throwable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Unit&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 8&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;onCompleted&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Unit&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 9&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;10&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt;11&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;trait&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Subscription&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;12&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unsubscribe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Unit&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;13&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We can compare these two concepts and definitely see similarities, such as that &lt;em&gt;Observable&lt;/em&gt; is similar to &lt;em&gt;Iterable&lt;/em&gt;. The same for &lt;em&gt;Observer&lt;/em&gt; - &lt;em&gt;Iterator&lt;/em&gt; pair. Also, we can easily spot an intent and usage here.&lt;/p&gt;

&lt;p&gt;But when we add a new &lt;em&gt;trait&lt;/em&gt; called &lt;em&gt;Subscription&lt;/em&gt;, there is a slight and subtle change in approach for &lt;em&gt;Observable&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;It receives an &lt;em&gt;Observer&lt;/em&gt; instance as an argument, instead of returning it as presented in the &lt;em&gt;Iterable&lt;/em&gt; / &lt;em&gt;Iterator&lt;/em&gt; approach.&lt;/p&gt;

&lt;p&gt;This subtle change has huge consequences in modelling and understanding these two abstractions. We trade the possibility of pulling things out from an &lt;em&gt;Iterable&lt;/em&gt; collection to pushing a model for the &lt;em&gt;Observable&lt;/em&gt; which will notify an &lt;em&gt;Observer&lt;/em&gt; that something appears, but not for free - we receive an ability to model an asynchronous operation which returns a collection of elements (in other words: we transformed from &lt;em&gt;pulling mode&lt;/em&gt; to the &lt;em&gt;pushing mode&lt;/em&gt;).&lt;/p&gt;

&lt;h1 id=&quot;power-of-expressiveness&quot;&gt;Power of expressiveness&lt;/h1&gt;

&lt;p&gt;What if this &lt;em&gt;Observable&lt;/em&gt; / &lt;em&gt;Iterable&lt;/em&gt; approach was to be presented in one line as a composite type?&lt;/p&gt;

&lt;p&gt;Ready? Superb, but first we will bring up two definitions.&lt;/p&gt;

&lt;h2 id=&quot;tryt&quot;&gt;&lt;code&gt;Try[T]&lt;/code&gt;&lt;/h2&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sumTry&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;2&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;int1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Try&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;1&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// int1 is Success(1).&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;3&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;int2&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Try&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;a&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// int2 is Failure(...).&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;5&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;int1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int2&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;&lt;code&gt;Try&lt;/code&gt;&lt;/em&gt; is an analog for the &lt;code&gt;try...catch&lt;/code&gt; block. Instead of having an exception thrown and having to deal with it immediately in the same thread, it disconnects the error handling and recovery.&lt;/p&gt;

&lt;h2 id=&quot;optiont&quot;&gt;&lt;code&gt;Option[T]&lt;/code&gt;&lt;/h2&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;optionResult&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// optionResult is None.&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;optionResult2&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;// optionResult2 is Some(1).&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;&lt;code&gt;Option&lt;/code&gt;&lt;/em&gt; represents optional values, returning an instance of &lt;em&gt;&lt;code&gt;Some(A)&lt;/code&gt;&lt;/em&gt; if &lt;code&gt;A&lt;/code&gt; exists, or &lt;em&gt;&lt;code&gt;None&lt;/code&gt;&lt;/em&gt; if it does not.&lt;/p&gt;

&lt;h2 id=&quot;composition&quot;&gt;Composition&lt;/h2&gt;

&lt;p&gt;The same abstraction, of &lt;em&gt;Observable&lt;/em&gt; can be built on top of &lt;em&gt;Iterable&lt;/em&gt; and a simple type, which is a composite of two previously explained elements:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;collection&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Iterable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Try&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]]]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It’s a sequence which introduces the same abstraction, but definitely loses the intent. Usage is not visible at the first glance as well (how are we communicating that something changed?).&lt;/p&gt;

&lt;h1 id=&quot;summary&quot;&gt;Summary&lt;/h1&gt;

&lt;p&gt;The whole point of this article is to illustrate that intent and usage can be provided by certain abstractions. Of course, these abstractions can be verbose and seem unnecessary at first sight, but if we chase expressiveness, and introduce it out of hand we will loose details and initial intent.&lt;/p&gt;

&lt;p&gt;The post is strongly inspired by &lt;em&gt;Coursera&lt;/em&gt; course &lt;em&gt;“Principles of Reactive Programming”&lt;/em&gt; provided by courtesy of &lt;em&gt;Erik Meijer&lt;/em&gt;, &lt;em&gt;Martin Odersky&lt;/em&gt; and &lt;em&gt;Roland Kuhn&lt;/em&gt;.&lt;/p&gt;

&lt;h1 id=&quot;references&quot;&gt;References&lt;/h1&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.coursera.org/course/reactive&quot;&gt;Coursera - Principles of Reactive Programming&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Tue, 17 Dec 2013 21:45:00 +0100</pubDate>
        <link>http://www.afronski.pl/2013/12/17/with-great-power-comes-great-responsibility.html</link>
        <guid isPermaLink="true">http://www.afronski.pl/2013/12/17/with-great-power-comes-great-responsibility.html</guid>
      </item>
    
      <item>
        <title>Small talk about productivity</title>
        <description>&lt;h1 id=&quot;small-talk-about-productivity&quot;&gt;Small talk about productivity…&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Do you propose a 4 day work week in your company?&lt;/li&gt;
  &lt;li&gt;Are you using 3 monitors and you have requested another one?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;STOP!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Do you really think that &lt;em&gt;efficiency&lt;/em&gt; can be measured with &lt;em&gt;monitors-which-you-have-on-your-work-desk&lt;/em&gt;?&lt;/p&gt;

&lt;p&gt;&lt;em&gt;No, it cannot be measured in such way.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;time&quot;&gt;Time&lt;/h2&gt;

&lt;p&gt;Do you want work only 4 days in a week? And how do you spent time in a normal week? Be honest with yourself - are you really one of these people which have 90 - 95% productivity in a week and you always do what you plan to do?&lt;/p&gt;

&lt;p&gt;If not, let’s do some math.&lt;/p&gt;

&lt;p&gt;Let’s assume that you have pretty good efficiency around 80% in normal week. It means that (in terms of Polish work law) you worked &lt;em&gt;“properly”&lt;/em&gt; 32 hours per week, 8 hours you have spent on something else (let’s call it a &lt;em&gt;procrastination&lt;/em&gt;, BTW. in terms of Polish law it is a &lt;em&gt;whole working day&lt;/em&gt; spent on non-working activities).&lt;/p&gt;

&lt;p&gt;Now let’s think about 4 day work week - you have got 32 hours per week - in order to achieve the same productivity in terms of hours, you need to increase your efficiency from 80% to 100%. And probably you know &lt;em&gt;Pareto rule&lt;/em&gt; which states that 80% of “something” (work done, complexity etc.) is located in 20% of domain of “something” (hours per week, time spent of some task etc.). If you look at the 15 - 20% which you does not have at the moment, you can spent pretty significant amount of time in order to achieve that.&lt;/p&gt;

&lt;p&gt;But what if you stay with the 80% efficiency - you have got 26 hours (rounded with a handicap for you &lt;img class=&quot;emoji&quot; title=&quot;:wink:&quot; alt=&quot;:wink:&quot; src=&quot;https://assets.github.com/images/icons/emoji/unicode/1f609.png&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; /&gt;) - 6 hours less than in 5 a day work week. Think about - in order to do actual work (and you already cut &lt;em&gt;procrastination&lt;/em&gt; by reducing work week by one day) you need to cut time spent on less important tasks in your work day (for someone it will be a meeting, email communication, chatting for someone else reading an article, research etc.) - and you need to find 6 hours of &lt;em&gt;such time&lt;/em&gt;. Are you ready for that?&lt;/p&gt;

&lt;p&gt;You can do it better! How about increasing productivity for normal work week and going up to the 90 - 95%. Move forward, triage things, use &lt;em&gt;DDDD rule&lt;/em&gt; (&lt;em&gt;Do, Delegate, Defer, Delete&lt;/em&gt;) etc. There are many amazing things and talks about increasing productivity, some of them you can find in the references.&lt;/p&gt;

&lt;p&gt;If you achieve such level of efficiency, then you need to plan activities for each day - like 3 - 4  main activities which I need to do. If you do them, rest of time you can spent in a different way - e.g. procrastination, do some research, learning etc. You can do stuff unrelated with work only if you finish your daily work activity.&lt;/p&gt;

&lt;p&gt;One more thing - if you can’t specify your limited &lt;em&gt;daily goals&lt;/em&gt; list you are simply doing too much - please look at &lt;em&gt;DDDD&lt;/em&gt; in advance, because in future you can be highly frustrated (let’s call it a &lt;em&gt;burnout&lt;/em&gt;) about amount of work which you have to do and amount of responsibilities which are assigned to you.&lt;/p&gt;

&lt;h2 id=&quot;resources&quot;&gt;Resources&lt;/h2&gt;

&lt;p&gt;Are you using your resources in 100% and you are requesting more only if you feel constrained? If you have doubt about that, please read next paragraphs.&lt;/p&gt;

&lt;p&gt;I have seen people which have three monitors - one for &lt;code&gt;IDE&lt;/code&gt; / editor, one for browser, test runner, documentation and one for … &lt;code&gt;IRC&lt;/code&gt;, twitter, Skype, email client etc.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Why the heck people spent ⅓ of their resources on these “chatter-boxes”, instant interruptions and transforming asynchronous communication channels into synchronous ones?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Many people ask me why I’m using just one screen in my daily work (and I’m a programmer so in many people mindset I need to have at least two if not three monitors). I have got laptop and unattached second screen. And I’m using such opportunity only if I need to.&lt;/p&gt;

&lt;p&gt;Start with just one screen, use virtual desktops, throw away interruptions while you working, be effective on just one screen. If I feel constrained with space of my 4 virtual desktops at one physical screen I’m immediately attaching second screen and rearrange my workspace, on the occasion I’m cleaning up my stuff unrelated with the problem on which I’m working right now.&lt;/p&gt;

&lt;p&gt;Asynchronism in the communication channels should be our advantage. Please refer to the Scott’s talk and schedule time for emails / communication stuff. Respond only if you need and what is even more important be as much asynchronous with it as you can (in other words - defer it).&lt;/p&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;Whole topic came to my mind after some “unwise” statements that some people made in company which I’m working right now. What frustrates me the most is that these people &lt;em&gt;are not spent&lt;/em&gt; their time effectively and they claim that 4 day work week will be even more efficient (&lt;em&gt;of course it will&lt;/em&gt;, it will be productive in the lack of productivity &lt;img class=&quot;emoji&quot; title=&quot;:grin:&quot; alt=&quot;:grin:&quot; src=&quot;https://assets.github.com/images/icons/emoji/unicode/1f601.png&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; /&gt;).&lt;/p&gt;

&lt;p&gt;Please, be honest with yourselves and with your employers - We need to use our resources honestly, then effectively and only if we will be very productive we can move to the next step which is an &lt;em&gt;optimization&lt;/em&gt; of these parameters.&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://vimeo.com/39020426&quot;&gt;Scott Hanselman - It’s not what you read, it’s what you ignore&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Sat, 18 Jan 2014 16:30:00 +0100</pubDate>
        <link>http://www.afronski.pl/2014/01/18/small-talk-about-productivity.html</link>
        <guid isPermaLink="true">http://www.afronski.pl/2014/01/18/small-talk-about-productivity.html</guid>
      </item>
    
  </channel>
</rss>
